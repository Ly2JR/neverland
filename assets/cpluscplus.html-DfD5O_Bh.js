import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o,c as i,d as n,f as s,a as t,e}from"./app-tLwnvGGw.js";const c={},r={class:"hint-container tip"},u=n("p",{class:"hint-container-title"},"提示",-1),d={href:"https://learn.microsoft.com/zh-cn/dotnet/framework/interop/",target:"_blank",rel:"noopener noreferrer"},k={id:"数据类型对照",tabindex:"-1"},v={class:"header-anchor",href:"#数据类型对照"},m={href:"https://learn.microsoft.com/zh-cn/dotnet/framework/interop/marshalling-data-with-platform-invoke",target:"_blank",rel:"noopener noreferrer"},b=n("th",{style:{"text-align":"left"}},"Windows API中的非托管类型",-1),g={style:{"text-align":"left"}},h={href:"https://learn.microsoft.com/zh-cn/cpp/cpp/data-type-ranges?view=msvc-170",target:"_blank",rel:"noopener noreferrer"},y={style:{"text-align":"left"}},f={href:"https://learn.microsoft.com/zh-cn/dotnet/csharp/language-reference/builtin-types/built-in-types",target:"_blank",rel:"noopener noreferrer"},x=n("th",{style:{"text-align":"left"}},"描述",-1),_=n("tbody",null,[n("tr",null,[n("td",{style:{"text-align":"left"}},"VOID"),n("td",{style:{"text-align":"left"}},"void"),n("td",{style:{"text-align":"left"}},"System.Void"),n("td",{style:{"text-align":"left"}},"应用于不返回值的函数")]),n("tr",null,[n("td",{style:{"text-align":"left"}},"HANDLE"),n("td",{style:{"text-align":"left"}},"void*"),n("td",{style:{"text-align":"left"}},"System.IntPtr或System.UIntPtr"),n("td",{style:{"text-align":"left"}},"在32位Windows操作系统上为32位、在64位Windows操作系统上为64位")]),n("tr",null,[n("td",{style:{"text-align":"left"}},"BYTE"),n("td",{style:{"text-align":"left"}},"usigned char"),n("td",{style:{"text-align":"left"}},"System.Byte"),n("td",{style:{"text-align":"left"}},"8位")]),n("tr",null,[n("td",{style:{"text-align":"left"}},"SHORT"),n("td",{style:{"text-align":"left"}},"short"),n("td",{style:{"text-align":"left"}},"System.Int16"),n("td",{style:{"text-align":"left"}},"16位")]),n("tr",null,[n("td",{style:{"text-align":"left"}},"WORD"),n("td",{style:{"text-align":"left"}},"usigned short"),n("td",{style:{"text-align":"left"}},"System.UInt16"),n("td",{style:{"text-align":"left"}},"16位")]),n("tr",null,[n("td",{style:{"text-align":"left"}},"INT"),n("td",{style:{"text-align":"left"}},"int"),n("td",{style:{"text-align":"left"}},"System.Int16"),n("td",{style:{"text-align":"left"}},"32位")]),n("tr",null,[n("td",{style:{"text-align":"left"}},"UINT"),n("td",{style:{"text-align":"left"}},"unsigned int"),n("td",{style:{"text-align":"left"}},"System.UInt32"),n("td",{style:{"text-align":"left"}},"32位")]),n("tr",null,[n("td",{style:{"text-align":"left"}},"LONG"),n("td",{style:{"text-align":"left"}},"long"),n("td",{style:{"text-align":"left"}},"System.Int32"),n("td",{style:{"text-align":"left"}},"32位")]),n("tr",null,[n("td",{style:{"text-align":"left"}},"BOOL"),n("td",{style:{"text-align":"left"}},"long"),n("td",{style:{"text-align":"left"}},"System.Boolean或System.Int32"),n("td",{style:{"text-align":"left"}},"32位")]),n("tr",null,[n("td",{style:{"text-align":"left"}},"DWORD"),n("td",{style:{"text-align":"left"}},"unsigned long"),n("td",{style:{"text-align":"left"}},"System.UInt32"),n("td",{style:{"text-align":"left"}},"32位")]),n("tr",null,[n("td",{style:{"text-align":"left"}},"ULONG"),n("td",{style:{"text-align":"left"}},"unsigned long"),n("td",{style:{"text-align":"left"}},"System.UInt32"),n("td",{style:{"text-align":"left"}},"32位")]),n("tr",null,[n("td",{style:{"text-align":"left"}},"CHAR"),n("td",{style:{"text-align":"left"}},"char"),n("td",{style:{"text-align":"left"}},"System.Char"),n("td",{style:{"text-align":"left"}},"用ANSI修饰")]),n("tr",null,[n("td",{style:{"text-align":"left"}},"WCHAR"),n("td",{style:{"text-align":"left"}},"wchar_t"),n("td",{style:{"text-align":"left"}},"System.Char"),n("td",{style:{"text-align":"left"}},"用Unicode修饰")]),n("tr",null,[n("td",{style:{"text-align":"left"}},"LPSTR"),n("td",{style:{"text-align":"left"}},"char *"),n("td",{style:{"text-align":"left"}},"System.String或System.Text.StringBuilder"),n("td",{style:{"text-align":"left"}},"用ANSI修饰")]),n("tr",null,[n("td",{style:{"text-align":"left"}},"LPCSTR"),n("td",{style:{"text-align":"left"}},"const char *"),n("td",{style:{"text-align":"left"}},"System.String或System.Text.StringBuilder"),n("td",{style:{"text-align":"left"}},"用ANSI修饰")]),n("tr",null,[n("td",{style:{"text-align":"left"}},"LPWSTR"),n("td",{style:{"text-align":"left"}},"wchar_t *"),n("td",{style:{"text-align":"left"}},"System.String或System.Text.StringBuilder"),n("td",{style:{"text-align":"left"}},"用Unicode修饰")]),n("tr",null,[n("td",{style:{"text-align":"left"}},"LPCWSTR"),n("td",{style:{"text-align":"left"}},"const wchar_t *"),n("td",{style:{"text-align":"left"}},"System.String"),n("td",{style:{"text-align":"left"}},"用Unicode修饰")]),n("tr",null,[n("td",{style:{"text-align":"left"}},"FLOAT"),n("td",{style:{"text-align":"left"}},"float"),n("td",{style:{"text-align":"left"}},"System.Single"),n("td",{style:{"text-align":"left"}},"32位")]),n("tr",null,[n("td",{style:{"text-align":"left"}},"DOUBLE"),n("td",{style:{"text-align":"left"}},"double"),n("td",{style:{"text-align":"left"}},"System.Double"),n("td",{style:{"text-align":"left"}},"64位")])],-1),S=n("h2",{id:"c-动态连接库",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#c-动态连接库"},[n("span",null,"C++动态连接库")])],-1),w=n("h3",{id:"声明头文件",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#声明头文件"},[n("span",null,"声明头文件")])],-1),P=n("p",null,[s("创建头文件"),n("code",null,"HelloCplusPlus.h")],-1),C={href:"https://learn.microsoft.com/zh-cn/cpp/build/exporting-from-a-dll-using-declspec-dllexport?view=msvc-170",target:"_blank",rel:"noopener noreferrer"},q={href:"https://learn.microsoft.com/zh-cn/cpp/cpp/extern-cpp?view=msvc-170#extern-c-and-extern-c-function-declarations",target:"_blank",rel:"noopener noreferrer"},H=e(`<div class="language-c++ line-numbers-mode" data-ext="c++" data-title="c++"><pre class="language-c++"><code>#pragma once

#ifndef  HelloCPlusPlusDll

#define  HelloCPlusPlusDll

//宏定义导出
#ifdef  HelloCPlusPlusDll
#define HelloCPlusPlusDll __declspec(dllexport)//导出
#else
#define HelloCPlusPlusDll __declspec(dllimport)//导入
#endif

HelloCPlusPlusDll int __stdcall Add(int, int);

extern &quot;C&quot; {
    HelloCPlusPlusDll  int __stdcall Sub(int, int);

    HelloCPlusPlusDll const wchar_t* __stdcall ReadString();

    HelloCPlusPlusDll void __stdcall Reset();

    HelloCPlusPlusDll const wchar_t* __stdcall WriteString(const wchar_t* input);

    HelloCPlusPlusDll const char* __stdcall WriteString2(const char* input);
}

class HelloCPlusPlusDll C
{
public:
    static int Mul(int, int);
};

class HelloCPlusPlusDll S
{
public:
    int Div(int, int);
};

#endif
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="实现头文件" tabindex="-1"><a class="header-anchor" href="#实现头文件"><span>实现头文件</span></a></h3><p>创建源文件<code>HelloCplusPlus.cpp</code></p><div class="language-c++ line-numbers-mode" data-ext="c++" data-title="c++"><pre class="language-c++"><code>#include &quot;HelloCPlusPlus.h&quot;
#include &lt;iostream&gt;
#include &lt;wchar.h&gt;

using namespace std;

int Add(int a, int b) {
    return a + b;
}

int Sub(int a, int b) {
    return a - b;
}

wchar_t Hello[16]=L&quot;Hello&quot;;
char Hello2[16] = &quot;Hello&quot;;

const wchar_t* ReadString()
{
    return Hello;
}

void  Reset()
{
    fill(begin(Hello)+5,end(Hello),0);
    fill(begin(Hello2) + 5, end(Hello2), 0);
}

const wchar_t* WriteString(const wchar_t* input)
{
    wcscat_s(Hello,16,input);
    return Hello;
}

const char* WriteString2(const char* input)
{
    strcat_s(Hello2,16, input);
    return Hello2;
}

int C::Mul(int a, int b) {
    return a * b;
}

int S::Div(int a, int b) {
    return a / b;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="编译" tabindex="-1"><a class="header-anchor" href="#编译"><span>编译</span></a></h3><p>在<code>配置属性\\常规\\配置类型</code>改为<code>动态库(.dll)</code></p><h3 id="查看导出类型" tabindex="-1"><a class="header-anchor" href="#查看导出类型"><span>查看导出类型</span></a></h3>`,7),W=n("code",null,"Developer Command Prompt for VS2022",-1),D={href:"https://learn.microsoft.com/zh-cn/cpp/build/reference/dumpbin-reference?view=msvc-170",target:"_blank",rel:"noopener noreferrer"},L=e(`<p>输入<code>dumpbin /exports project1.dll</code></p><figure><img src="https://nas.ilyl.life:8092/cplusplus/dumpbin.png" alt="导出定义" tabindex="0" loading="lazy"><figcaption>导出定义</figcaption></figure><p>发现通过<code>extern &quot;C&quot;</code>导出的名称与定义一致，这也是C#调用C++提升找不到入口点的原因之一</p><h2 id="调用" tabindex="-1"><a class="header-anchor" href="#调用"><span>调用</span></a></h2><div class="hint-container warning"><p class="hint-container-title">注意</p><p>C++字符串以<code>\\0</code>结尾，多占一位</p></div><h3 id="cplusplus调用" tabindex="-1"><a class="header-anchor" href="#cplusplus调用"><span>CPlusPlus调用</span></a></h3><ol><li>新建控制台项目</li><li>新建<code>include</code>文件夹，拷贝<code>HelloCPlusPlus.h</code>头文件</li><li>新建<code>libs</code>文件夹，拷贝生成的<code>lib</code>、<code>dll</code>文件</li><li>打开<code>配置属性\\VC++目录\\</code>在<code>包含目录</code>添加<code>include</code>文件夹</li><li>打开<code>配置属性\\链接器\\常规</code>下的<code>附加库目录</code>添加<code>libs</code>文件夹</li><li>打开<code>配置属性\\链接器\\输入</code>下的<code>附加依赖项</code>添加<code>project.lib</code>文件</li></ol><div class="hint-container tip"><p class="hint-container-title">提示</p><p>可以不配置链接器，直接引用项目即可</p></div><div class="language-c++ line-numbers-mode" data-ext="c++" data-title="c++"><pre class="language-c++"><code>#include &lt;iostream&gt;
#include&lt;HelloCPlusPlus.h&gt;
using namespace std;
int main()
{
    int a= Add(1, 2);
    cout &lt;&lt; &quot;1+2=&quot;&lt;&lt; a &lt;&lt; endl;

    int a1 = Sub(2, 1);
    cout &lt;&lt; &quot;2-1=&quot;&lt;&lt;a1 &lt;&lt; endl;

    C helloC;
    int a2 = helloC.Mul(2, 3);
    cout &lt;&lt; &quot;2*3=&quot; &lt;&lt; a2 &lt;&lt; endl;

    S helloS;
    int a3 = helloS.Div(4, 2);
    cout &lt;&lt; &quot;4/2=&quot; &lt;&lt;a3 &lt;&lt; endl;

    const wchar_t* str= ReadString();
    wcout &lt;&lt; &quot;ReadString:&quot; &lt;&lt; str &lt;&lt; endl;

    const wchar_t* input1 = L&quot; World&quot;;
    const wchar_t* str1 = WriteString(input1);
    wcout &lt;&lt; &quot;WriteString:&quot; &lt;&lt; str1 &lt;&lt;&quot; Length:&quot; &lt;&lt; wcslen(str1) &lt;&lt; endl;

    const char input2[] = &quot; World1234&quot;;
    const char* str2 = WriteString2(input2);
    cout &lt;&lt; &quot;WriteString2:&quot; &lt;&lt; str2 &lt;&lt; &quot; Length:&quot; &lt;&lt; strnlen_s(str2,16) &lt;&lt; endl;
}

//输出
//1+2=3
//2-1=1
//2*3=6
//4/2=2
//ReadString:Hello
//WriteString:Hello World Length:11
//WriteString2:Hello World1234 Length:15
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="csharp调用" tabindex="-1"><a class="header-anchor" href="#csharp调用"><span>CSharp调用</span></a></h3>`,10),I={href:"https://learn.microsoft.com/zh-cn/dotnet/framework/interop/consuming-unmanaged-dll-functions",target:"_blank",rel:"noopener noreferrer"},V=e(`<p>引用<code>using System.Runtime.InteropServices;</code></p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Runtime<span class="token punctuation">.</span>InteropServices</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">short</span></span> a <span class="token operator">=</span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;1+2=</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">a</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">short</span></span> a1 <span class="token operator">=</span> <span class="token function">Sub</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;2-1=</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">a1</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">short</span></span> a2 <span class="token operator">=</span> <span class="token function">Mul</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;2*3=</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">a2</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">short</span></span> a3 <span class="token operator">=</span> <span class="token function">Div</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;4/2=</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">a3</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">IntPtr</span> readPtr1 <span class="token operator">=</span> <span class="token function">ReadString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//方式一：指针转换字符串</span>
<span class="token class-name"><span class="token keyword">var</span></span> readValue1 <span class="token operator">=</span> Marshal<span class="token punctuation">.</span><span class="token function">PtrToStringUni</span><span class="token punctuation">(</span>readPtr1<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token comment">//方式二：通过字节数组转换</span>
<span class="token comment">//byte[] bytes1 = new byte[16];</span>
<span class="token comment">//Marshal.Copy(readPtr1, bytes1, 0, 16);</span>
<span class="token comment">//var readValue1 = Encoding.Unicode.GetString(bytes1);</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;ReadString:&quot;</span><span class="token operator">+</span>readValue1<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//方式一:通过指针转换</span>
<span class="token comment">//var writeValue2 = &quot; World&quot;;</span>
<span class="token comment">//var writePtr2=Marshal.StringToHGlobalUni(writeValue2);</span>
<span class="token comment">//方式二:通过字节转换，末尾需要\`\\0\`</span>
<span class="token class-name"><span class="token keyword">var</span></span> writeValue2 <span class="token operator">=</span> <span class="token string">&quot; World\\0&quot;</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> byteStr2 <span class="token operator">=</span> Encoding<span class="token punctuation">.</span>Unicode<span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span>writeValue2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">IntPtr</span> writePtr2 <span class="token operator">=</span> Marshal<span class="token punctuation">.</span><span class="token function">AllocHGlobal</span><span class="token punctuation">(</span>byteStr2<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span>
Marshal<span class="token punctuation">.</span><span class="token function">Copy</span><span class="token punctuation">(</span>byteStr2<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> writePtr2<span class="token punctuation">,</span> byteStr2<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">IntPtr</span> readPtr2 <span class="token operator">=</span> <span class="token function">WriteString</span><span class="token punctuation">(</span>writePtr2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> readValue2 <span class="token operator">=</span> Marshal<span class="token punctuation">.</span><span class="token function">PtrToStringUni</span><span class="token punctuation">(</span>readPtr2<span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;WriteString:&quot;</span> <span class="token operator">+</span> readValue2 <span class="token operator">+</span> <span class="token string">&quot; Length:&quot;</span><span class="token operator">+</span>readValue2<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//WriteStringAs和WriteString使用同一个操作进行拼接，超出上限需要重置</span>
<span class="token function">Reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">string</span></span> writeValue3 <span class="token operator">=</span> <span class="token string">&quot; World12&quot;</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> readValuePtr3 <span class="token operator">=</span> <span class="token function">WriteStringAs</span><span class="token punctuation">(</span>writeValue3<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> readValue3 <span class="token operator">=</span> Marshal<span class="token punctuation">.</span><span class="token function">PtrToStringUni</span><span class="token punctuation">(</span>readValuePtr3<span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;WriteString:&quot;</span> <span class="token operator">+</span> readValue3 <span class="token operator">+</span> <span class="token string">&quot; Length:&quot;</span><span class="token operator">+</span>readValue2<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> writeValue4 <span class="token operator">=</span> <span class="token string">&quot; World1234&quot;</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> writeValuePtr4 <span class="token operator">=</span> Marshal<span class="token punctuation">.</span><span class="token function">StringToHGlobalAnsi</span><span class="token punctuation">(</span>writeValue4<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">IntPtr</span> readValuePtr4 <span class="token operator">=</span> <span class="token function">WriteString2</span><span class="token punctuation">(</span>writeValuePtr4<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> readValue4 <span class="token operator">=</span> Marshal<span class="token punctuation">.</span><span class="token function">PtrToStringAnsi</span><span class="token punctuation">(</span>readValuePtr4<span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;WriteString2:&quot;</span> <span class="token operator">+</span> readValue4 <span class="token operator">+</span> <span class="token string">&quot; Length:&quot;</span><span class="token operator">+</span>readValue2<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span>

Marshal<span class="token punctuation">.</span><span class="token function">FreeHGlobal</span><span class="token punctuation">(</span>readPtr1<span class="token punctuation">)</span><span class="token punctuation">;</span>
Marshal<span class="token punctuation">.</span><span class="token function">FreeHGlobal</span><span class="token punctuation">(</span>readPtr2<span class="token punctuation">)</span><span class="token punctuation">;</span>
Marshal<span class="token punctuation">.</span><span class="token function">FreeHGlobal</span><span class="token punctuation">(</span>readValuePtr3<span class="token punctuation">)</span><span class="token punctuation">;</span>
Marshal<span class="token punctuation">.</span><span class="token function">FreeHGlobal</span><span class="token punctuation">(</span>readValuePtr4<span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">DllImport</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">@&quot;.\\lib\\Project1.dll&quot;</span><span class="token punctuation">,</span>CharSet <span class="token operator">=</span>CharSet<span class="token punctuation">.</span>Unicode<span class="token punctuation">,</span> EntryPoint <span class="token operator">=</span> <span class="token string">&quot;?Add@@YAHHH@Z&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">static</span> <span class="token keyword">extern</span> <span class="token return-type class-name"><span class="token keyword">short</span></span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">short</span></span> a<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">short</span></span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">DllImport</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">@&quot;.\\lib\\Project1.dll&quot;</span><span class="token punctuation">,</span> CharSet <span class="token operator">=</span> CharSet<span class="token punctuation">.</span>Unicode<span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">static</span> <span class="token keyword">extern</span> <span class="token return-type class-name"><span class="token keyword">short</span></span> <span class="token function">Sub</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">short</span></span> a<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">short</span></span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">DllImport</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">@&quot;.\\lib\\Project1.dll&quot;</span><span class="token punctuation">,</span> CharSet <span class="token operator">=</span> CharSet<span class="token punctuation">.</span>Unicode<span class="token punctuation">,</span> EntryPoint <span class="token operator">=</span> <span class="token string">&quot;?Mul@C@@SAHHH@Z&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">static</span> <span class="token keyword">extern</span> <span class="token return-type class-name"><span class="token keyword">short</span></span> <span class="token function">Mul</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">short</span></span> a<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">short</span></span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">DllImport</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">@&quot;.\\lib\\Project1.dll&quot;</span><span class="token punctuation">,</span> CharSet <span class="token operator">=</span> CharSet<span class="token punctuation">.</span>Unicode<span class="token punctuation">,</span> EntryPoint <span class="token operator">=</span> <span class="token string">&quot;?Div@S@@QEAAHHH@Z&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">static</span> <span class="token keyword">extern</span> <span class="token return-type class-name"><span class="token keyword">short</span></span> <span class="token function">Div</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">short</span></span> a<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">short</span></span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">DllImport</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">@&quot;.\\lib\\Project1.dll&quot;</span><span class="token punctuation">,</span> CharSet <span class="token operator">=</span> CharSet<span class="token punctuation">.</span>Unicode<span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">static</span> <span class="token keyword">extern</span> <span class="token return-type class-name">IntPtr</span> <span class="token function">ReadString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">DllImport</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">@&quot;.\\lib\\Project1.dll&quot;</span><span class="token punctuation">,</span> CharSet <span class="token operator">=</span> CharSet<span class="token punctuation">.</span>Unicode<span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">static</span> <span class="token keyword">extern</span> <span class="token return-type class-name">IntPtr</span> <span class="token function">WriteString</span><span class="token punctuation">(</span><span class="token class-name">IntPtr</span> input<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">DllImport</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">@&quot;.\\lib\\Project1.dll&quot;</span><span class="token punctuation">,</span> CharSet <span class="token operator">=</span> CharSet<span class="token punctuation">.</span>Unicode<span class="token punctuation">,</span>EntryPoint <span class="token operator">=</span> <span class="token string">&quot;WriteString&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">static</span> <span class="token keyword">extern</span> <span class="token return-type class-name">IntPtr</span> <span class="token function">WriteStringAs</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> input<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">DllImport</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">@&quot;.\\lib\\Project1.dll&quot;</span><span class="token punctuation">,</span> CharSet <span class="token operator">=</span> CharSet<span class="token punctuation">.</span>Unicode<span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">static</span> <span class="token keyword">extern</span> <span class="token return-type class-name">IntPtr</span> <span class="token function">WriteString2</span><span class="token punctuation">(</span><span class="token class-name">IntPtr</span> input<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">DllImport</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">@&quot;.\\lib\\Project1.dll&quot;</span><span class="token punctuation">,</span> CharSet <span class="token operator">=</span> CharSet<span class="token punctuation">.</span>Unicode<span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">static</span> <span class="token keyword">extern</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//输出</span>
<span class="token comment">//1+2=3</span>
<span class="token comment">//2-1=1</span>
<span class="token comment">//2*3=6</span>
<span class="token comment">//4/2=0</span>
<span class="token comment">//ReadString:Hello</span>
<span class="token comment">//WriteString:Hello World Length:11</span>
<span class="token comment">//WriteString:Hello World12 Length:13</span>
<span class="token comment">//WriteString2:Hello World1234 Length:15</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),T=n("code",null,"WriteString",-1),A=n("code",null,"WriteStringAs",-1),U=n("code",null,"WriteString",-1),R={href:"https://learn.microsoft.com/zh-cn/dotnet/framework/interop/specifying-an-entry-point",target:"_blank",rel:"noopener noreferrer"},M=n("code",null,"IntPtr",-1),z=n("code",null,"string",-1),E=n("code",null,"string",-1),N=n("code",null,"Div",-1),j={href:"https://learn.microsoft.com/zh-cn/visualstudio/debugger/how-to-debug-managed-and-native-code?view=vs-2022",target:"_blank",rel:"noopener noreferrer"},B=e(`<div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> a3 <span class="token operator">=</span> <span class="token function">Div</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;4/2=</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">a3</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">DllImport</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">@&quot;.\\lib\\Project1.dll&quot;</span><span class="token punctuation">,</span> CharSet <span class="token operator">=</span> CharSet<span class="token punctuation">.</span>Unicode<span class="token punctuation">,</span> EntryPoint <span class="token operator">=</span> <span class="token string">&quot;?Div@S@@QEAAHHH@Z&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">static</span> <span class="token keyword">extern</span> <span class="token return-type class-name"><span class="token keyword">short</span></span> <span class="token function">Div</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">short</span></span> i<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">short</span></span> a<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">short</span></span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//输出</span>
<span class="token comment">//4/2=2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果按预期输出，C#是无法直接调用C++类，需要进行包装处理，但是为什么多加一个参数可以? 。</p>`,2);function O(G,Z){const a=p("ExternalLinkIcon");return o(),i("div",null,[n("div",r,[u,n("p",null,[s("参考资料"),n("a",d,[s("与非托管代码进行交互操作"),t(a)])])]),n("h2",k,[n("a",v,[n("span",null,[n("a",m,[s("数据类型对照"),t(a)])])])]),n("table",null,[n("thead",null,[n("tr",null,[b,n("th",g,[n("a",h,[s("非托管C语言类型"),t(a)])]),n("th",y,[n("a",f,[s("托管类型"),t(a)])]),x])]),_]),S,w,P,n("p",null,[s("通过"),n("a",C,[s("__declspec(dllexport)"),t(a)]),s("导出DLL文件")]),n("p",null,[s("分为函数导出、类导出、静态类导出以及"),n("a",q,[s('extern "C"'),t(a)]),s("导出")]),H,n("p",null,[s("安装VS后，打开"),W,s("，利用"),n("a",D,[s("dumpbin"),t(a)]),s("查看定义")]),L,n("p",null,[s("使用"),n("a",I,[s("DllImport"),t(a)]),s("访问非托管函数")]),V,n("p",null,[s("C#的"),T,s("和"),A,s("方法都是调用C++的"),U,s("，通过"),n("a",R,[s("EntryPoint"),t(a)]),s("更改入口点名称。它们唯一的区别在于形参参数传递，一个通过"),M,s("，一个通过"),z,s("，返回结果"),E,s("无效。")]),n("p",null,[s("发现"),N,s("函数输出结果不正确，"),n("a",j,[s("调试C#与C++代码"),t(a)]),s("发现传递两个参数，结果C++代码接收的参数多一个，调整代码")]),B])}const Q=l(c,[["render",O],["__file","cpluscplus.html.vue"]]),Y=JSON.parse('{"path":"/tools/csharp/cpluscplus.html","title":"调用C++","lang":"zh-CN","frontmatter":{"title":"调用C++","date":"2024-02-27T00:00:00.000Z","editLink":false,"footer":false,"isOriginal":true,"category":["工具箱"],"tag":["C#","C++"],"description":"提示 参考资料与非托管代码进行交互操作 数据类型对照 C++动态连接库 声明头文件 创建头文件HelloCplusPlus.h 通过__declspec(dllexport)导出DLL文件 分为函数导出、类导出、静态类导出以及extern \\"C\\"导出 实现头文件 创建源文件HelloCplusPlus.cpp 编译 在配置属性\\\\常规\\\\配置类型改为动态库...","head":[["meta",{"property":"og:url","content":"https://ilyl.life/tools/csharp/cpluscplus.html"}],["meta",{"property":"og:site_name","content":"乌龙茶有点甜"}],["meta",{"property":"og:title","content":"调用C++"}],["meta",{"property":"og:description","content":"提示 参考资料与非托管代码进行交互操作 数据类型对照 C++动态连接库 声明头文件 创建头文件HelloCplusPlus.h 通过__declspec(dllexport)导出DLL文件 分为函数导出、类导出、静态类导出以及extern \\"C\\"导出 实现头文件 创建源文件HelloCplusPlus.cpp 编译 在配置属性\\\\常规\\\\配置类型改为动态库..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://nas.ilyl.life:8092/cplusplus/dumpbin.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-28T09:04:30.000Z"}],["meta",{"property":"article:author","content":"乌龙茶"}],["meta",{"property":"article:tag","content":"C#"}],["meta",{"property":"article:tag","content":"C++"}],["meta",{"property":"article:published_time","content":"2024-02-27T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-28T09:04:30.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"调用C++\\",\\"image\\":[\\"https://nas.ilyl.life:8092/cplusplus/dumpbin.png\\"],\\"datePublished\\":\\"2024-02-27T00:00:00.000Z\\",\\"dateModified\\":\\"2024-02-28T09:04:30.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"乌龙茶\\",\\"url\\":\\"https://ilyl.life\\",\\"email\\":\\"mailto:982474256@qq.com\\"}]}"]]},"headers":[{"level":2,"title":"数据类型对照","slug":"数据类型对照","link":"#数据类型对照","children":[]},{"level":2,"title":"C++动态连接库","slug":"c-动态连接库","link":"#c-动态连接库","children":[{"level":3,"title":"声明头文件","slug":"声明头文件","link":"#声明头文件","children":[]},{"level":3,"title":"实现头文件","slug":"实现头文件","link":"#实现头文件","children":[]},{"level":3,"title":"编译","slug":"编译","link":"#编译","children":[]},{"level":3,"title":"查看导出类型","slug":"查看导出类型","link":"#查看导出类型","children":[]}]},{"level":2,"title":"调用","slug":"调用","link":"#调用","children":[{"level":3,"title":"CPlusPlus调用","slug":"cplusplus调用","link":"#cplusplus调用","children":[]},{"level":3,"title":"CSharp调用","slug":"csharp调用","link":"#csharp调用","children":[]}]}],"git":{"createdTime":1709096920000,"updatedTime":1709111070000,"contributors":[{"name":"乌龙茶","email":"982474256@qq.com","commits":2}]},"readingTime":{"minutes":4.9,"words":1470},"filePathRelative":"tools/csharp/cpluscplus.md","localizedDate":"2024年2月27日","excerpt":"<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">提示</p>\\n<p>参考资料<a href=\\"https://learn.microsoft.com/zh-cn/dotnet/framework/interop/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">与非托管代码进行交互操作</a></p>\\n</div>\\n<h2><a class=\\"header-anchor\\" href=\\"#数据类型对照\\"><span></span></a><a href=\\"https://learn.microsoft.com/zh-cn/dotnet/framework/interop/marshalling-data-with-platform-invoke\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">数据类型对照</a></h2>","autoDesc":true}');export{Q as comp,Y as data};
