import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as l,d as n,f as s,a as t,e as p}from"./app-DVRahF49.js";const u={},i=n("p",null,"没有使用第三方框架提供的命令，自带的命令在使用中有点繁琐。",-1),k={href:"https://learn.microsoft.com/zh-cn/dotnet/desktop/wpf/advanced/commanding-overview?view=netframeworkdesktop-4.8",target:"_blank",rel:"noopener noreferrer"},r=p(`<p>在写demo时很方便使用。</p><h2 id="基本命令" tabindex="-1"><a class="header-anchor" href="#基本命令"><span>基本命令</span></a></h2><p>将<code>ICommand</code>里的<code>Execute</code>执行方法迁移到MVVM中。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RelayCommand</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ICommand</span></span>
 <span class="token punctuation">{</span>
     <span class="token keyword">private</span> <span class="token class-name">Action<span class="token punctuation">&lt;</span><span class="token keyword">object</span><span class="token punctuation">?</span><span class="token punctuation">&gt;</span></span> _execute<span class="token punctuation">;</span>
     <span class="token keyword">private</span> <span class="token class-name">Predicate<span class="token punctuation">&lt;</span><span class="token keyword">object</span><span class="token punctuation">?</span><span class="token punctuation">&gt;</span></span> _canExecute<span class="token punctuation">;</span>

     <span class="token keyword">public</span> <span class="token keyword">event</span> <span class="token return-type class-name">EventHandler<span class="token punctuation">?</span></span> CanExecuteChanged<span class="token punctuation">{</span>
         <span class="token keyword">add</span>
         <span class="token punctuation">{</span>
             CommandManager<span class="token punctuation">.</span>RequerySuggested <span class="token operator">+=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>
         <span class="token punctuation">}</span>
         <span class="token keyword">remove</span>
         <span class="token punctuation">{</span>
             CommandManager<span class="token punctuation">.</span>RequerySuggested <span class="token operator">-=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>
         <span class="token punctuation">}</span>
     <span class="token punctuation">}</span>

     <span class="token keyword">public</span> <span class="token function">RelayCommand</span><span class="token punctuation">(</span><span class="token class-name">Action<span class="token punctuation">&lt;</span><span class="token keyword">object</span><span class="token punctuation">?</span><span class="token punctuation">&gt;</span></span> execute<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">this</span><span class="token punctuation">(</span>execute<span class="token punctuation">,</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

     <span class="token keyword">public</span> <span class="token function">RelayCommand</span><span class="token punctuation">(</span><span class="token class-name">Action<span class="token punctuation">&lt;</span><span class="token keyword">object</span><span class="token punctuation">?</span><span class="token punctuation">&gt;</span></span> execute<span class="token punctuation">,</span><span class="token class-name">Predicate<span class="token punctuation">&lt;</span><span class="token keyword">object</span><span class="token punctuation">?</span><span class="token punctuation">&gt;</span></span> canExecute<span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token keyword">if</span><span class="token punctuation">(</span>execute<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token keyword">nameof</span><span class="token punctuation">(</span>execute<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token keyword">if</span><span class="token punctuation">(</span>canExecute<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token keyword">nameof</span><span class="token punctuation">(</span>canExecute<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         _execute <span class="token operator">=</span> execute<span class="token punctuation">;</span>
         _canExecute <span class="token operator">=</span> canExecute<span class="token punctuation">;</span>
     <span class="token punctuation">}</span>

     <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">CanExecute</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span><span class="token punctuation">?</span></span> parameter<span class="token punctuation">)</span><span class="token punctuation">{</span>
         <span class="token keyword">return</span> <span class="token function">_canExecute</span><span class="token punctuation">(</span>parameter<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span>

     <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Execute</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span><span class="token punctuation">?</span></span> parameter<span class="token punctuation">)</span><span class="token punctuation">{</span>
         <span class="token function">_execute</span><span class="token punctuation">(</span>parameter<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),d={id:"异步编程",tabindex:"-1"},m={class:"header-anchor",href:"#异步编程"},v={href:"https://learn.microsoft.com/zh-cn/archive/msdn-magazine/2014/april/async-programming-patterns-for-asynchronous-mvvm-applications-commands",target:"_blank",rel:"noopener noreferrer"},y=p(`<ol><li><p>定义异步命令接口，继承<code>ICommand</code>，添加一个<code>ExecuteAsync</code>方法</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IAsyncCommand</span><span class="token punctuation">:</span><span class="token type-list"><span class="token class-name">ICommand</span></span><span class="token punctuation">{</span>
    <span class="token return-type class-name">Task</span> <span class="token function">ExecuteAsync</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span><span class="token punctuation">?</span></span> parameter<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>添加异步命令抽象类</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AsyncCommandBase</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IAsyncCommand</span></span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">CanExecute</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span><span class="token punctuation">?</span></span> parameter<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Execute</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span><span class="token punctuation">?</span></span> parameter<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
        <span class="token keyword">await</span> <span class="token function">ExecuteAsync</span><span class="token punctuation">(</span>parameter<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">event</span> <span class="token return-type class-name">EventHandler<span class="token punctuation">?</span></span> CanExecuteChanged<span class="token punctuation">{</span>
        <span class="token keyword">add</span> <span class="token punctuation">{</span> CommandManager<span class="token punctuation">.</span>RequerySuggested <span class="token operator">+=</span> <span class="token keyword">value</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
        <span class="token keyword">remove</span> <span class="token punctuation">{</span> CommandManager<span class="token punctuation">.</span>RequerySuggested <span class="token operator">-=</span> <span class="token keyword">value</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token return-type class-name">Task</span> <span class="token function">ExecuteAsync</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span><span class="token punctuation">?</span></span> parameter<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">protected</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">RaiseCanExecuteChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        CommandManager<span class="token punctuation">.</span><span class="token function">InvalidateRequerySuggested</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>异步执行具体命令类，包括取消，异步状态通知等</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AsyncCommand<span class="token punctuation">&lt;</span>TResult<span class="token punctuation">&gt;</span></span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">AsyncCommandBase</span><span class="token punctuation">,</span> <span class="token class-name">INotifyPropertyChanged</span></span><span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>CancellationToken<span class="token punctuation">,</span>Task<span class="token punctuation">&lt;</span>TResult<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> _command<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">CancelAsyncCommand</span> _canncelCommand<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">NotifyTaskCompletion<span class="token punctuation">&lt;</span>TResult<span class="token punctuation">&gt;</span></span> _execution<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">AsyncCommand</span><span class="token punctuation">(</span><span class="token class-name">Func<span class="token punctuation">&lt;</span>CancellationToken<span class="token punctuation">,</span>Task<span class="token punctuation">&lt;</span>TResult<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> command<span class="token punctuation">)</span><span class="token punctuation">{</span>
        _command <span class="token operator">=</span> command<span class="token punctuation">;</span>
        _canncelCommand<span class="token operator">=</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">CancelAsyncCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">CanExecute</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span><span class="token punctuation">?</span></span> parameter<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> Execution <span class="token operator">==</span> <span class="token keyword">null</span><span class="token operator">||</span> Execution<span class="token punctuation">.</span>IsCompleted<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">ExecuteAsync</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span><span class="token punctuation">?</span></span> parameter<span class="token punctuation">)</span><span class="token punctuation">{</span>
        _canncelCommand<span class="token punctuation">.</span><span class="token function">NotifyCommandStarting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Execution <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NotifyTaskCompletion<span class="token punctuation">&lt;</span>TResult<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token function">_command</span><span class="token punctuation">(</span>_canncelCommand<span class="token punctuation">.</span>Token<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">RaiseCanExecuteChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">await</span> Execution<span class="token punctuation">.</span>TaskCompletion<span class="token punctuation">;</span>

        _canncelCommand<span class="token punctuation">.</span><span class="token function">NotifyCommandFinished</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">RaiseCanExecuteChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name">ICommand</span> CancelCommand <span class="token punctuation">{</span> <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _canncelCommand<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name">NotifyTaskCompletion<span class="token punctuation">&lt;</span>TResult<span class="token punctuation">&gt;</span></span> Execution<span class="token punctuation">{</span>
        <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _execution<span class="token punctuation">;</span> <span class="token punctuation">}</span>
        <span class="token keyword">private</span> <span class="token keyword">set</span>
        <span class="token punctuation">{</span>
            _execution <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>
            <span class="token function">OnPropertyChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">event</span> <span class="token class-name">PropertyChangedEventHandler<span class="token punctuation">?</span></span> PropertyChanged<span class="token punctuation">;</span>

    <span class="token keyword">protected</span> <span class="token keyword">virtual</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnPropertyChanged</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">CallerMemberName</span></span><span class="token punctuation">]</span> <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">?</span></span> propertyName <span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        PropertyChanged<span class="token punctuation">?.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">PropertyChangedEventArgs</span><span class="token punctuation">(</span>propertyName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">CancelAsyncCommand</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ICommand</span></span><span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token class-name">CancellationTokenSource</span> _cts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CancellationTokenSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">bool</span></span> _commandExecuting<span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token return-type class-name">CancellationToken</span> Token <span class="token punctuation">{</span> <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _cts<span class="token punctuation">.</span>Token<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">NotifyCommandStarting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            _commandExecuting <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>_cts<span class="token punctuation">.</span>IsCancellationRequested<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
            _cts<span class="token operator">=</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">CancellationTokenSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">RaiseCanExecuteChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">NotifyCommandFinished</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            _commandExecuting <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token function">RaiseCanExecuteChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token keyword">event</span> <span class="token return-type class-name">EventHandler<span class="token punctuation">?</span></span> CanExecuteChanged <span class="token punctuation">{</span>
            <span class="token keyword">add</span> <span class="token punctuation">{</span> CommandManager<span class="token punctuation">.</span>RequerySuggested <span class="token operator">+=</span> <span class="token keyword">value</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
            <span class="token keyword">remove</span> <span class="token punctuation">{</span> CommandManager<span class="token punctuation">.</span>RequerySuggested <span class="token operator">-=</span> <span class="token keyword">value</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">RaiseCanExecuteChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            CommandManager<span class="token punctuation">.</span><span class="token function">InvalidateRequerySuggested</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token return-type class-name"><span class="token keyword">bool</span></span> ICommand<span class="token punctuation">.</span><span class="token function">CanExecute</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span><span class="token punctuation">?</span></span> parameter<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> _commandExecuting <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>_cts<span class="token punctuation">.</span>IsCancellationRequested<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token return-type class-name"><span class="token keyword">void</span></span> ICommand<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span><span class="token punctuation">?</span></span> parameter<span class="token punctuation">)</span><span class="token punctuation">{</span>
            _cts<span class="token punctuation">.</span><span class="token function">Cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">RaiseCanExecuteChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">AsyncCommand</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">AsyncCommand<span class="token punctuation">&lt;</span><span class="token keyword">object</span><span class="token punctuation">&gt;</span></span> <span class="token function">Create</span><span class="token punctuation">(</span><span class="token class-name">Func<span class="token punctuation">&lt;</span>Task<span class="token punctuation">&gt;</span></span> command<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AsyncCommand<span class="token punctuation">&lt;</span><span class="token keyword">object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token keyword">async</span> _ <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token keyword">await</span> <span class="token function">command</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">AsyncCommand<span class="token punctuation">&lt;</span>TResult<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">Create</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TResult<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">Func<span class="token punctuation">&lt;</span>Task<span class="token punctuation">&lt;</span>TResult<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> command<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AsyncCommand<span class="token punctuation">&lt;</span>TResult<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>_ <span class="token operator">=&gt;</span> <span class="token function">command</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">AsyncCommand<span class="token punctuation">&lt;</span><span class="token keyword">object</span><span class="token punctuation">&gt;</span></span> <span class="token function">Create</span><span class="token punctuation">(</span><span class="token class-name">Func<span class="token punctuation">&lt;</span>CancellationToken<span class="token punctuation">,</span>Task<span class="token punctuation">&gt;</span></span> command<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AsyncCommand<span class="token punctuation">&lt;</span><span class="token keyword">object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token keyword">async</span> token <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token keyword">await</span> <span class="token function">command</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">AsyncCommand<span class="token punctuation">&lt;</span>TResult<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">Create</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TResult<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">Func<span class="token punctuation">&lt;</span>CancellationToken<span class="token punctuation">,</span>Task<span class="token punctuation">&lt;</span>TResult<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> command<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AsyncCommand<span class="token punctuation">&lt;</span>TResult<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>异步执行状态通知</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">NotifyTaskCompletion<span class="token punctuation">&lt;</span>TResult<span class="token punctuation">&gt;</span></span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">INotifyPropertyChanged</span></span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token function">NotifyTaskCompletion</span><span class="token punctuation">(</span><span class="token class-name">Task<span class="token punctuation">&lt;</span>TResult<span class="token punctuation">&gt;</span></span> task<span class="token punctuation">)</span><span class="token punctuation">{</span>
        Task <span class="token operator">=</span> task<span class="token punctuation">;</span>
        TaskCompletion <span class="token operator">=</span> <span class="token function">WatchTaskAsync</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">private</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">WatchTaskAsync</span><span class="token punctuation">(</span><span class="token class-name">Task</span> task<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">try</span><span class="token punctuation">{</span>
            <span class="token keyword">await</span> task<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">catch</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

        <span class="token class-name"><span class="token keyword">var</span></span> propertyChanged <span class="token operator">=</span> PropertyChanged<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>propertyChanged <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token function">propertyChanged</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">PropertyChangedEventArgs</span><span class="token punctuation">(</span><span class="token string">&quot;Status&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">propertyChanged</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">PropertyChangedEventArgs</span><span class="token punctuation">(</span><span class="token string">&quot;IsCompleted&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">propertyChanged</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">PropertyChangedEventArgs</span><span class="token punctuation">(</span><span class="token string">&quot;IsNotCompleted&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>task<span class="token punctuation">.</span>IsCanceled<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token function">propertyChanged</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">PropertyChangedEventArgs</span><span class="token punctuation">(</span><span class="token string">&quot;IsCanceled&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>task<span class="token punctuation">.</span>IsFaulted<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token function">propertyChanged</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">PropertyChangedEventArgs</span><span class="token punctuation">(</span><span class="token string">&quot;IsFaulted&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">propertyChanged</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">PropertyChangedEventArgs</span><span class="token punctuation">(</span><span class="token string">&quot;Exception&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">propertyChanged</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">PropertyChangedEventArgs</span><span class="token punctuation">(</span><span class="token string">&quot;InnerException&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">propertyChanged</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">PropertyChangedEventArgs</span><span class="token punctuation">(</span><span class="token string">&quot;ErrorMessage&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span><span class="token punctuation">{</span>
            <span class="token function">propertyChanged</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">PropertyChangedEventArgs</span><span class="token punctuation">(</span><span class="token string">&quot;IsSuccessfullyCompleted&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">propertyChanged</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">PropertyChangedEventArgs</span><span class="token punctuation">(</span><span class="token string">&quot;Result&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>TResult<span class="token punctuation">&gt;</span></span> Task <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">Task</span> TaskCompletion <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">TResult</span> Result<span class="token punctuation">{</span>
        <span class="token keyword">get</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span>Task<span class="token punctuation">.</span>Status <span class="token operator">==</span> TaskStatus<span class="token punctuation">.</span>RanToCompletion<span class="token punctuation">)</span> <span class="token punctuation">?</span>
                Task<span class="token punctuation">.</span>Result <span class="token punctuation">:</span> <span class="token keyword">default</span><span class="token punctuation">(</span><span class="token type-expression class-name">TResult</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">TaskStatus</span> Status <span class="token punctuation">{</span> <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> Task<span class="token punctuation">.</span>Status<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> IsCompleted <span class="token punctuation">{</span> <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> Task<span class="token punctuation">.</span>IsCompleted<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> IsNotCompleted <span class="token punctuation">{</span> <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token operator">!</span>Task<span class="token punctuation">.</span>IsCompleted<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> IsSuccessfullyCompleted<span class="token punctuation">{</span>
        <span class="token keyword">get</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> Task<span class="token punctuation">.</span>Status <span class="token operator">==</span>
                TaskStatus<span class="token punctuation">.</span>RanToCompletion<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> IsCanceled <span class="token punctuation">{</span> <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> Task<span class="token punctuation">.</span>IsCanceled<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> IsFaulted <span class="token punctuation">{</span> <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> Task<span class="token punctuation">.</span>IsFaulted<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">AggregateException</span> Exception <span class="token punctuation">{</span> <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> Task<span class="token punctuation">.</span>Exception<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">Exception</span> InnerException<span class="token punctuation">{</span>
        <span class="token keyword">get</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span>Exception <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">?</span>
                <span class="token keyword">null</span> <span class="token punctuation">:</span> Exception<span class="token punctuation">.</span>InnerException<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> ErrorMessage<span class="token punctuation">{</span>
        <span class="token keyword">get</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span>InnerException <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">?</span>
                <span class="token keyword">null</span> <span class="token punctuation">:</span> InnerException<span class="token punctuation">.</span>Message<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">event</span> <span class="token class-name">PropertyChangedEventHandler</span> PropertyChanged<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol>`,1);function b(w,g){const a=o("ExternalLinkIcon");return c(),l("div",null,[i,n("p",null,[s("需要对"),n("a",k,[s("ICommand"),t(a)]),s("命令进行包装。")]),r,n("h2",d,[n("a",m,[n("span",null,[n("a",v,[s("异步编程"),t(a)])])])]),y])}const f=e(u,[["render",b],["__file","command.html.vue"]]),x=JSON.parse('{"path":"/cs/wpf/command.html","title":"命令","lang":"zh-CN","frontmatter":{"title":"命令","date":"2023-08-11T00:00:00.000Z","editLink":false,"footer":false,"isOriginal":true,"category":["C#"],"tag":["WPF"],"description":"没有使用第三方框架提供的命令，自带的命令在使用中有点繁琐。 需要对ICommand命令进行包装。 在写demo时很方便使用。 基本命令 将ICommand里的Execute执行方法迁移到MVVM中。 异步编程 定义异步命令接口，继承ICommand，添加一个ExecuteAsync方法 添加异步命令抽象类 异步执行具体命令类，包括取消，异步状态通知等 ...","head":[["meta",{"property":"og:url","content":"https://ilyl.life/cs/wpf/command.html"}],["meta",{"property":"og:site_name","content":"乌龙茶有点甜"}],["meta",{"property":"og:title","content":"命令"}],["meta",{"property":"og:description","content":"没有使用第三方框架提供的命令，自带的命令在使用中有点繁琐。 需要对ICommand命令进行包装。 在写demo时很方便使用。 基本命令 将ICommand里的Execute执行方法迁移到MVVM中。 异步编程 定义异步命令接口，继承ICommand，添加一个ExecuteAsync方法 添加异步命令抽象类 异步执行具体命令类，包括取消，异步状态通知等 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-26T07:17:54.000Z"}],["meta",{"property":"article:author","content":"乌龙茶"}],["meta",{"property":"article:tag","content":"WPF"}],["meta",{"property":"article:published_time","content":"2023-08-11T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-01-26T07:17:54.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"命令\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-08-11T00:00:00.000Z\\",\\"dateModified\\":\\"2024-01-26T07:17:54.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"乌龙茶\\",\\"url\\":\\"https://ilyl.life\\",\\"email\\":\\"mailto:982474256@qq.com\\"}]}"]]},"headers":[{"level":2,"title":"基本命令","slug":"基本命令","link":"#基本命令","children":[]},{"level":2,"title":"异步编程","slug":"异步编程","link":"#异步编程","children":[]}],"git":{"createdTime":1691735146000,"updatedTime":1706253474000,"contributors":[{"name":"乌龙茶","email":"982474256@qq.com","commits":2}]},"readingTime":{"minutes":2.34,"words":702},"filePathRelative":"cs/wpf/command.md","localizedDate":"2023年8月11日","excerpt":"<p>没有使用第三方框架提供的命令，自带的命令在使用中有点繁琐。</p>\\n<p>需要对<a href=\\"https://learn.microsoft.com/zh-cn/dotnet/desktop/wpf/advanced/commanding-overview?view=netframeworkdesktop-4.8\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">ICommand</a>命令进行包装。</p>\\n<p>在写demo时很方便使用。</p>\\n<h2>基本命令</h2>\\n<p>将<code>ICommand</code>里的<code>Execute</code>执行方法迁移到MVVM中。</p>","autoDesc":true}');export{f as comp,x as data};
