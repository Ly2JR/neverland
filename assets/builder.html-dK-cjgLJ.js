const e=JSON.parse('{"key":"v-a5d0e9f4","path":"/cs/design-pattern/builder.html","title":"建造者模式","lang":"zh-CN","frontmatter":{"title":"建造者模式","date":"2023-06-17T00:00:00.000Z","dir.order":4,"order":4,"editLink":false,"footer":false,"category":["设计模式"],"tag":["设计模式"],"description":"参与此模式的类和对象包括： Builder(VehicleBuilder) 指定用于创建Product对象的部分的抽象接口。 ConcreteBuilder(MotorCycleBuilder,CarBuilder,ScooterBuilder) 通过实现Builder接口来构造和组装产品的各个部分。 定义并跟踪它创建的表示。 提供检索产品的接口。 Director(Shop) 使用Builder接口构造一个对象。 Product(Vehicle) 表示正在构建的复杂对象。ConcreteBuilder构建产品的内部表示并定义其组装过程。 包括定义组成部分的类，包括将这些部分组装成最终结果的接口。","head":[["meta",{"property":"og:url","content":"https://ilyl.life/cs/design-pattern/builder.html"}],["meta",{"property":"og:site_name","content":"乌龙茶有点甜"}],["meta",{"property":"og:title","content":"建造者模式"}],["meta",{"property":"og:description","content":"参与此模式的类和对象包括： Builder(VehicleBuilder) 指定用于创建Product对象的部分的抽象接口。 ConcreteBuilder(MotorCycleBuilder,CarBuilder,ScooterBuilder) 通过实现Builder接口来构造和组装产品的各个部分。 定义并跟踪它创建的表示。 提供检索产品的接口。 Director(Shop) 使用Builder接口构造一个对象。 Product(Vehicle) 表示正在构建的复杂对象。ConcreteBuilder构建产品的内部表示并定义其组装过程。 包括定义组成部分的类，包括将这些部分组装成最终结果的接口。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-07-21T07:17:50.000Z"}],["meta",{"property":"article:author","content":"乌龙茶"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:published_time","content":"2023-06-17T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-07-21T07:17:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"建造者模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-06-17T00:00:00.000Z\\",\\"dateModified\\":\\"2023-07-21T07:17:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"乌龙茶\\",\\"url\\":\\"https://ilyl.life\\",\\"email\\":\\"mailto:982474256@qq.com\\"}]}"]]},"headers":[],"git":{"createdTime":1687005402000,"updatedTime":1689923870000,"contributors":[{"name":"乌龙茶","email":"982474256@qq.com","commits":2}]},"readingTime":{"minutes":2.47,"words":741},"filePathRelative":"cs/design-pattern/builder.md","localizedDate":"2023年6月17日","excerpt":"<p>参与此模式的类和对象包括：</p>\\n<ul>\\n<li>\\n<p>Builder(<code>VehicleBuilder</code>)</p>\\n<ul>\\n<li>指定用于创建Product对象的部分的抽象接口。</li>\\n</ul>\\n</li>\\n<li>\\n<p>ConcreteBuilder(<code>MotorCycleBuilder</code>,<code>CarBuilder</code>,<code>ScooterBuilder</code>)</p>\\n<ul>\\n<li>通过实现Builder接口来构造和组装产品的各个部分。</li>\\n<li>定义并跟踪它创建的表示。</li>\\n<li>提供检索产品的接口。</li>\\n</ul>\\n</li>\\n<li>\\n<p>Director(<code>Shop</code>)</p>\\n<ul>\\n<li>使用Builder接口构造一个对象。</li>\\n</ul>\\n</li>\\n<li>\\n<p>Product(<code>Vehicle</code>)</p>\\n<ul>\\n<li>表示正在构建的复杂对象。ConcreteBuilder构建产品的内部表示并定义其组装过程。</li>\\n<li>包括定义组成部分的类，包括将这些部分组装成最终结果的接口。</li>\\n</ul>\\n</li>\\n</ul>","copyright":{"author":"乌龙茶","license":"MIT"},"autoDesc":true}');export{e as data};
