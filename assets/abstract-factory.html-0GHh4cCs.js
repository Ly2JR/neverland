const t=JSON.parse('{"key":"v-a706141c","path":"/cs/design-pattern/abstract-factory.html","title":"抽象工厂","lang":"zh-CN","frontmatter":{"title":"抽象工厂","date":"2023-06-17T00:00:00.000Z","dir.order":1,"order":1,"editLink":false,"footer":false,"category":["设计模式"],"tag":["设计模式"],"description":"参与此模式的类和对象包括： AbstractFactory(ContinentFactory) 为创建抽象产品的操作声明一个接口。 ConcreteFactory(AfricaFacotry,AmericaFactory) 实现创建具体产品对象的操作。 AbstractProduct(Herbivore,Carnivore) 声明一种产品对象的接口。 Product(Wildebeest,Lion,Bison,Wolf) 定义要由相应的具体工厂创建的产品对象。 实现AbstractProduct接口。 Client(AnimalWorld) 使用AbstractFactory和AbstractProduct类声明的接口。","head":[["meta",{"property":"og:url","content":"https://ilyl.life/cs/design-pattern/abstract-factory.html"}],["meta",{"property":"og:site_name","content":"乌龙茶有点甜"}],["meta",{"property":"og:title","content":"抽象工厂"}],["meta",{"property":"og:description","content":"参与此模式的类和对象包括： AbstractFactory(ContinentFactory) 为创建抽象产品的操作声明一个接口。 ConcreteFactory(AfricaFacotry,AmericaFactory) 实现创建具体产品对象的操作。 AbstractProduct(Herbivore,Carnivore) 声明一种产品对象的接口。 Product(Wildebeest,Lion,Bison,Wolf) 定义要由相应的具体工厂创建的产品对象。 实现AbstractProduct接口。 Client(AnimalWorld) 使用AbstractFactory和AbstractProduct类声明的接口。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-07-21T07:17:50.000Z"}],["meta",{"property":"article:author","content":"乌龙茶"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:published_time","content":"2023-06-17T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-07-21T07:17:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"抽象工厂\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-06-17T00:00:00.000Z\\",\\"dateModified\\":\\"2023-07-21T07:17:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"乌龙茶\\",\\"url\\":\\"https://ilyl.life\\",\\"email\\":\\"mailto:982474256@qq.com\\"}]}"]]},"headers":[],"git":{"createdTime":1687005402000,"updatedTime":1689923870000,"contributors":[{"name":"乌龙茶","email":"982474256@qq.com","commits":2}]},"readingTime":{"minutes":1.85,"words":556},"filePathRelative":"cs/design-pattern/abstract-factory.md","localizedDate":"2023年6月17日","excerpt":"<p>参与此模式的类和对象包括：</p>\\n<ul>\\n<li>\\n<p>AbstractFactory(<code>ContinentFactory</code>)</p>\\n<ul>\\n<li>为创建抽象产品的操作声明一个接口。</li>\\n</ul>\\n</li>\\n<li>\\n<p>ConcreteFactory(<code>AfricaFacotry</code>,<code>AmericaFactory</code>)</p>\\n<ul>\\n<li>实现创建具体产品对象的操作。</li>\\n</ul>\\n</li>\\n<li>\\n<p>AbstractProduct(<code>Herbivore</code>,<code>Carnivore</code>)</p>\\n<ul>\\n<li>声明一种产品对象的接口。</li>\\n</ul>\\n</li>\\n<li>\\n<p>Product(<code>Wildebeest</code>,<code>Lion</code>,<code>Bison</code>,<code>Wolf</code>)</p>\\n<ul>\\n<li>定义要由相应的具体工厂创建的产品对象。</li>\\n<li>实现AbstractProduct接口。</li>\\n</ul>\\n</li>\\n<li>\\n<p>Client(<code>AnimalWorld</code>)</p>\\n<ul>\\n<li>使用AbstractFactory和AbstractProduct类声明的接口。</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}');export{t as data};
