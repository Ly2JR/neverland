const e=JSON.parse('{"key":"v-2098d3f0","path":"/cs/wpf/teeview.html","title":"自定义控件TreeView","lang":"zh-CN","frontmatter":{"title":"自定义控件TreeView","date":"2024-01-02T00:00:00.000Z","editLink":false,"footer":false,"isOriginal":true,"category":["C#"],"tag":["WPF","自定义控件"],"description":"自带的TreeView没有Checkbox，需要自定义设计实现效果 自定义TreeView 定义模型 定义需要显示的数据ViewModel public class TreeItemViewModel : INotifyPropertyChanged { public required string Name { get; set; } public Visibility HasPath { get { if (Parent == null) return Visibility.Collapsed; return Visibility.Visible; } } private bool _isChecked = false; public bool IsChecked { get { return _isChecked; } set { _isChecked = value; OnPropertyChanged(nameof(IsChecked)); } } public TreeItemViewModel? Parent { get; set; } public List&lt;TreeItemViewModel&gt;? Children { get; set; } public event PropertyChangedEventHandler? PropertyChanged; private void OnPropertyChanged(string propName) { if (this.PropertyChanged != null) { this.PropertyChanged(this, new PropertyChangedEventArgs(propName)); } } }","head":[["meta",{"property":"og:url","content":"https://ilyl.life/cs/wpf/teeview.html"}],["meta",{"property":"og:site_name","content":"乌龙茶有点甜"}],["meta",{"property":"og:title","content":"自定义控件TreeView"}],["meta",{"property":"og:description","content":"自带的TreeView没有Checkbox，需要自定义设计实现效果 自定义TreeView 定义模型 定义需要显示的数据ViewModel public class TreeItemViewModel : INotifyPropertyChanged { public required string Name { get; set; } public Visibility HasPath { get { if (Parent == null) return Visibility.Collapsed; return Visibility.Visible; } } private bool _isChecked = false; public bool IsChecked { get { return _isChecked; } set { _isChecked = value; OnPropertyChanged(nameof(IsChecked)); } } public TreeItemViewModel? Parent { get; set; } public List&lt;TreeItemViewModel&gt;? Children { get; set; } public event PropertyChangedEventHandler? PropertyChanged; private void OnPropertyChanged(string propName) { if (this.PropertyChanged != null) { this.PropertyChanged(this, new PropertyChangedEventArgs(propName)); } } }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-02T08:58:46.000Z"}],["meta",{"property":"article:author","content":"乌龙茶"}],["meta",{"property":"article:tag","content":"WPF"}],["meta",{"property":"article:tag","content":"自定义控件"}],["meta",{"property":"article:published_time","content":"2024-01-02T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-01-02T08:58:46.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"自定义控件TreeView\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-01-02T00:00:00.000Z\\",\\"dateModified\\":\\"2024-01-02T08:58:46.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"乌龙茶\\",\\"url\\":\\"https://ilyl.life\\",\\"email\\":\\"mailto:982474256@qq.com\\"}]}"]]},"headers":[{"level":2,"title":"定义模型","slug":"定义模型","link":"#定义模型","children":[{"level":3,"title":"定义需要显示的数据ViewModel","slug":"定义需要显示的数据viewmodel","link":"#定义需要显示的数据viewmodel","children":[]},{"level":3,"title":"定义CheckBox点击事件Command","slug":"定义checkbox点击事件command","link":"#定义checkbox点击事件command","children":[]},{"level":3,"title":"定义TreeView中的VM","slug":"定义treeview中的vm","link":"#定义treeview中的vm","children":[]}]},{"level":2,"title":"定义样式","slug":"定义样式","link":"#定义样式","children":[{"level":3,"title":"定义TreeViewItem显示样式","slug":"定义treeviewitem显示样式","link":"#定义treeviewitem显示样式","children":[]},{"level":3,"title":"自定义Checkbox样式","slug":"自定义checkbox样式","link":"#自定义checkbox样式","children":[]},{"level":3,"title":"定义Treeview左边三角形","slug":"定义treeview左边三角形","link":"#定义treeview左边三角形","children":[]},{"level":3,"title":"定义TreeViewItem样式","slug":"定义treeviewitem样式","link":"#定义treeviewitem样式","children":[]},{"level":3,"title":"定义TreeView样式","slug":"定义treeview样式","link":"#定义treeview样式","children":[]}]},{"level":2,"title":"用户控件使用","slug":"用户控件使用","link":"#用户控件使用","children":[]}],"git":{"createdTime":1704185926000,"updatedTime":1704185926000,"contributors":[{"name":"乌龙茶","email":"982474256@qq.com","commits":1}]},"readingTime":{"minutes":4.07,"words":1220},"filePathRelative":"cs/wpf/teeview.md","localizedDate":"2024年1月2日","excerpt":"<p>自带的TreeView没有Checkbox，需要自定义设计实现效果</p>\\n<figure><img src=\\"https://nas.ilyl.life:8092/wpf/treeview.gif\\" alt=\\"自定义TreeView\\" width=\\"240\\" height=\\"280\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>自定义TreeView</figcaption></figure>\\n<h2>定义模型</h2>\\n<h3>定义需要显示的数据<code>ViewModel</code></h3>\\n<div class=\\"language-csharp line-numbers-mode\\" data-ext=\\"cs\\" data-title=\\"cs\\"><pre class=\\"language-csharp\\"><code><span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">TreeItemViewModel</span> <span class=\\"token punctuation\\">:</span> <span class=\\"token type-list\\"><span class=\\"token class-name\\">INotifyPropertyChanged</span></span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">public</span> required <span class=\\"token return-type class-name\\"><span class=\\"token keyword\\">string</span></span> Name <span class=\\"token punctuation\\">{</span> <span class=\\"token keyword\\">get</span><span class=\\"token punctuation\\">;</span> <span class=\\"token keyword\\">set</span><span class=\\"token punctuation\\">;</span> <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token return-type class-name\\">Visibility</span> HasPath <span class=\\"token punctuation\\">{</span> <span class=\\"token keyword\\">get</span> <span class=\\"token punctuation\\">{</span> <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>Parent <span class=\\"token operator\\">==</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">return</span> Visibility<span class=\\"token punctuation\\">.</span>Collapsed<span class=\\"token punctuation\\">;</span> <span class=\\"token keyword\\">return</span> Visibility<span class=\\"token punctuation\\">.</span>Visible<span class=\\"token punctuation\\">;</span> <span class=\\"token punctuation\\">}</span> <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token class-name\\"><span class=\\"token keyword\\">bool</span></span> _isChecked <span class=\\"token operator\\">=</span> <span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token return-type class-name\\"><span class=\\"token keyword\\">bool</span></span> IsChecked <span class=\\"token punctuation\\">{</span> <span class=\\"token keyword\\">get</span> <span class=\\"token punctuation\\">{</span> <span class=\\"token keyword\\">return</span> _isChecked<span class=\\"token punctuation\\">;</span> <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">set</span> <span class=\\"token punctuation\\">{</span> _isChecked <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">value</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token function\\">OnPropertyChanged</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">nameof</span><span class=\\"token punctuation\\">(</span>IsChecked<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span> <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token return-type class-name\\">TreeItemViewModel<span class=\\"token punctuation\\">?</span></span> Parent <span class=\\"token punctuation\\">{</span> <span class=\\"token keyword\\">get</span><span class=\\"token punctuation\\">;</span> <span class=\\"token keyword\\">set</span><span class=\\"token punctuation\\">;</span> <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token return-type class-name\\">List<span class=\\"token punctuation\\">&lt;</span>TreeItemViewModel<span class=\\"token punctuation\\">&gt;</span><span class=\\"token punctuation\\">?</span></span> Children <span class=\\"token punctuation\\">{</span> <span class=\\"token keyword\\">get</span><span class=\\"token punctuation\\">;</span> <span class=\\"token keyword\\">set</span><span class=\\"token punctuation\\">;</span> <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">event</span> <span class=\\"token class-name\\">PropertyChangedEventHandler<span class=\\"token punctuation\\">?</span></span> PropertyChanged<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token return-type class-name\\"><span class=\\"token keyword\\">void</span></span> <span class=\\"token function\\">OnPropertyChanged</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\"><span class=\\"token keyword\\">string</span></span> propName<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>PropertyChanged <span class=\\"token operator\\">!=</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">PropertyChanged</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">new</span> <span class=\\"token constructor-invocation class-name\\">PropertyChangedEventArgs</span><span class=\\"token punctuation\\">(</span>propName<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{e as data};
