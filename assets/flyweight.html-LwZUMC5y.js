const e=JSON.parse('{"key":"v-b2bfc414","path":"/cs/design-pattern/flyweight.html","title":"享元模式","lang":"zh-CN","frontmatter":{"title":"享元模式","date":"2023-06-17T00:00:00.000Z","dir.order":11,"order":11,"editLink":false,"footer":false,"category":["设计模式"],"tag":["设计模式"],"description":"参与此模式的类和对象包括： Flyweight(Character) 声明一个接口，享元可以通过该接口接收外部状态并对其进行操作。 ConcreteFlyweight(CharacterA,CharacterB,...,CharacterZ) 实现享元接口并为内在状态添加存储(如果有)。ConcreteFlyweight对象必须是可共享的。它存储的任何状态都必须是内在的，也就是说，它必须独立于ConcreteFlyweight对象的上下文。 UnsharedConcreteFlyweight(not used) 并非所有享元子类都需要共享。Flyweight接口支持共享，但不强制执行。UnsharedConcreteFlyweight对象通常在享元对象结构中的某个级别将ConcreteFlyweight对象作为子对象(如Row和Column类所具有的)。 FlyweightFactory(CharacterFactory) 创建和管理享元对象。 确保享元被正确共享。当客户端请求享元时，FlyweightFactory对象资产现有实例或创建一个(如果不存在)。 Client(FlyweightApp) 维护对享元的引用。 计算或存储享元的外在状态。","head":[["meta",{"property":"og:url","content":"https://ilyl.life/cs/design-pattern/flyweight.html"}],["meta",{"property":"og:site_name","content":"乌龙茶有点甜"}],["meta",{"property":"og:title","content":"享元模式"}],["meta",{"property":"og:description","content":"参与此模式的类和对象包括： Flyweight(Character) 声明一个接口，享元可以通过该接口接收外部状态并对其进行操作。 ConcreteFlyweight(CharacterA,CharacterB,...,CharacterZ) 实现享元接口并为内在状态添加存储(如果有)。ConcreteFlyweight对象必须是可共享的。它存储的任何状态都必须是内在的，也就是说，它必须独立于ConcreteFlyweight对象的上下文。 UnsharedConcreteFlyweight(not used) 并非所有享元子类都需要共享。Flyweight接口支持共享，但不强制执行。UnsharedConcreteFlyweight对象通常在享元对象结构中的某个级别将ConcreteFlyweight对象作为子对象(如Row和Column类所具有的)。 FlyweightFactory(CharacterFactory) 创建和管理享元对象。 确保享元被正确共享。当客户端请求享元时，FlyweightFactory对象资产现有实例或创建一个(如果不存在)。 Client(FlyweightApp) 维护对享元的引用。 计算或存储享元的外在状态。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-07-21T07:17:50.000Z"}],["meta",{"property":"article:author","content":"乌龙茶"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:published_time","content":"2023-06-17T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-07-21T07:17:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"享元模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-06-17T00:00:00.000Z\\",\\"dateModified\\":\\"2023-07-21T07:17:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"乌龙茶\\",\\"url\\":\\"https://ilyl.life\\",\\"email\\":\\"mailto:982474256@qq.com\\"}]}"]]},"headers":[],"git":{"createdTime":1687005402000,"updatedTime":1689923870000,"contributors":[{"name":"乌龙茶","email":"982474256@qq.com","commits":2}]},"readingTime":{"minutes":2.28,"words":684},"filePathRelative":"cs/design-pattern/flyweight.md","localizedDate":"2023年6月17日","excerpt":"<p>参与此模式的类和对象包括：</p>\\n<ul>\\n<li>\\n<p>Flyweight(<code>Character</code>)</p>\\n<ul>\\n<li>声明一个接口，享元可以通过该接口接收外部状态并对其进行操作。</li>\\n</ul>\\n</li>\\n<li>\\n<p>ConcreteFlyweight(<code>CharacterA</code>,<code>CharacterB</code>,<code>...</code>,<code>CharacterZ</code>)</p>\\n<ul>\\n<li>实现享元接口并为内在状态添加存储(如果有)。ConcreteFlyweight对象必须是可共享的。它存储的任何状态都必须是内在的，也就是说，它必须独立于ConcreteFlyweight对象的上下文。</li>\\n</ul>\\n</li>\\n<li>\\n<p>UnsharedConcreteFlyweight(<code>not used</code>)</p>\\n<ul>\\n<li>并非所有享元子类都需要共享。Flyweight接口支持共享，但不强制执行。UnsharedConcreteFlyweight对象通常在享元对象结构中的某个级别将ConcreteFlyweight对象作为子对象(如Row和Column类所具有的)。</li>\\n</ul>\\n</li>\\n<li>\\n<p>FlyweightFactory(<code>CharacterFactory</code>)</p>\\n<ul>\\n<li>创建和管理享元对象。</li>\\n<li>确保享元被正确共享。当客户端请求享元时，FlyweightFactory对象资产现有实例或创建一个(如果不存在)。</li>\\n</ul>\\n</li>\\n<li>\\n<p>Client(<code>FlyweightApp</code>)</p>\\n<ul>\\n<li>维护对享元的引用。</li>\\n<li>计算或存储享元的外在状态。</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}');export{e as data};
