import{_ as d}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as p,o as k,c as m,d as n,e as s,f as a,w as t,b as e}from"./app-j311YtHJ.js";const v={},b={href:"https://github.com/dotnet/runtime/blob/main/docs/design/features/COM-activation.md",target:"_blank",rel:"noopener noreferrer"},h=e('<table><thead><tr><th>Server</th><th>Client</th><th style="text-align:center;">Current Support</th></tr></thead><tbody><tr><td>COM*</td><td>.NET Core</td><td style="text-align:center;">Yes</td></tr><tr><td>.NET Core</td><td>COM*</td><td style="text-align:center;">Yes</td></tr><tr><td>.NET Core</td><td>.NET Core</td><td style="text-align:center;">Yes</td></tr><tr><td>.NET Framework</td><td>.NET Core</td><td style="text-align:center;">No</td></tr><tr><td>.NET Core</td><td>.NET Framework</td><td style="text-align:center;">No</td></tr></tbody></table><ul><li>“COM”用于表示除 .NET 以外的任何 COM 环境（例如 C/C++）。</li></ul>',2),g={href:"https://github.com/Ly2JR/wpf-samples/tree/main/src/ComDemo",target:"_blank",rel:"noopener noreferrer"},w=e("<li><code>DemoVB.Client</code>：VB客户端</li><li><code>DemoWin.Client</code>：.NETFramework Winform客户端</li><li><code>DemoWin.Contract</code>：.NETFramework公开服务</li><li><code>DemoWin.Plugin</code>：.NETFramework和.NET Core服务实现</li><li><code>DemoCore.Client</code>：.NETCore WPF客户端</li><li><code>DemoCore.Contract</code>：.NETCore和.NETFramework公开服务</li><li><code>DemoCore.Plugin</code>：.NET Core和.Net Framework服务实现</li>",7),f=e(`<div class="hint-container tip"><p class="hint-container-title">提示</p><ol><li><p>更新程序需要放在对应的客户端目录下，因为是从当前客户端查找的...</p></li><li><p>不带UI的COM调用很容易，带UI的COM比较复杂，特别是带IOC的UI...</p></li></ol></div><h2 id="vb与-net-framework" tabindex="-1"><a class="header-anchor" href="#vb与-net-framework" aria-hidden="true">#</a> VB与.NET Framework</h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p>VB客户端放在哪里都无所谓，通过COM CLSID找到，即使通过<code>tlb</code>引入。</p></div><figure><img src="https://nas.ilyl.life:8092/wpf/com1.gif" alt="VB调用.NET Framework" width="420" height="200" tabindex="0" loading="lazy"><figcaption>VB调用.NET Framework</figcaption></figure><h3 id="定义guid" tabindex="-1"><a class="header-anchor" href="#定义guid" aria-hidden="true">#</a> 定义GUID</h3><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">ContractGuids</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">string</span></span> ServerClass <span class="token operator">=</span> <span class="token string">&quot;XXXX-XXX-XXX-XXXX&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">string</span></span> ServerInterface <span class="token operator">=</span> <span class="token string">&quot;XXXX-XXX-XXX-XXXX&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="公开服务接口" tabindex="-1"><a class="header-anchor" href="#公开服务接口" aria-hidden="true">#</a> 公开服务接口</h3><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ComVisible</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Guid</span><span class="token attribute-arguments"><span class="token punctuation">(</span>ContractGuids<span class="token punctuation">.</span>ServerInterface<span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">InterfaceType</span><span class="token attribute-arguments"><span class="token punctuation">(</span>ComInterfaceType<span class="token punctuation">.</span>InterfaceIsIUnknown<span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IServer</span>
<span class="token punctuation">{</span>
    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">StartWin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="实现服务接口" tabindex="-1"><a class="header-anchor" href="#实现服务接口" aria-hidden="true">#</a> 实现服务接口</h3><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ComVisible</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Guid</span><span class="token attribute-arguments"><span class="token punctuation">(</span>ContractGuids<span class="token punctuation">.</span>ServerClass<span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Server</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IServer</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">StartWin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> login<span class="token operator">=</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">FrmLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        login<span class="token punctuation">.</span><span class="token function">ShowDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同时勾选项目属性<code>为COM互操作注册</code>，生成一个带<code>xxx.tlb</code>的文件</p>`,11),C={href:"https://learn.microsoft.com/zh-cn/dotnet/framework/tools/regasm-exe-assembly-registration-tool",target:"_blank",rel:"noopener noreferrer"},y=e(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>regasm xxx.dll /tlb:xxx.tlb
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如无法找到，需要加上<code>/codebase</code>，即<code>regasm xxx.dll /tlb:xxx.tlb /codebase</code></p><h3 id="客户端调用" tabindex="-1"><a class="header-anchor" href="#客户端调用" aria-hidden="true">#</a> 客户端调用</h3><div class="language-vb line-numbers-mode" data-ext="vb"><pre class="language-vb"><code><span class="token keyword">Dim</span> obj <span class="token keyword">As</span> <span class="token keyword">Object</span>
<span class="token comment">&#39;方式一：引用</span>
<span class="token comment">&#39;Set obj = New DemoWin_Plugin.Server</span>
<span class="token comment">&#39;obj.startwin</span>

<span class="token comment">&#39;方式二：反射</span>
<span class="token keyword">Set</span> obj <span class="token operator">=</span> CreateObject<span class="token punctuation">(</span><span class="token string">&quot;DemoWin.Plugin.Server&quot;</span><span class="token punctuation">)</span>
obj<span class="token punctuation">.</span>startwin

<span class="token keyword">set</span> obj<span class="token operator">=</span><span class="token boolean">Nothing</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="net-core与-net-core" tabindex="-1"><a class="header-anchor" href="#net-core与-net-core" aria-hidden="true">#</a> .NET Core与.NET Core</h2>`,5),T={href:"https://learn.microsoft.com/zh-cn/dotnet/core/native-interop/expose-components-to-com#sample",target:"_blank",rel:"noopener noreferrer"},N=e('<figure><img src="https://nas.ilyl.life:8092/wpf/com2.gif" alt="NETCore与NETCore" width="420" height="200" tabindex="0" loading="lazy"><figcaption>NETCore与NETCore</figcaption></figure><h3 id="net-core支持多框架" tabindex="-1"><a class="header-anchor" href="#net-core支持多框架" aria-hidden="true">#</a> .Net Core支持多框架</h3><p>为了使<code>DemoCore.Contract</code>同时支持<code>.NET Core</code>和<code>.NET Framework</code>。</p><p>默认新建的是.NET Core类库项目，</p><p><code>编辑项目文件</code>，将<code>&lt;TargetFramework&gt;net7.0-windows&lt;/TargetFramework&gt;</code></p><p>改成&lt;TargetFramework<code>s</code>&gt;net7.0-windows<code>;net48</code>&lt;/TargetFramework<code>s</code>&gt;，</p><p>关闭项目，重新打开即可。</p><p>步骤与上诉流程类似，部分差异。</p><h3 id="公开服务接口差异" tabindex="-1"><a class="header-anchor" href="#公开服务接口差异" aria-hidden="true">#</a> 公开服务接口差异</h3><p>这里使用的是WPF作为页面展示，<code>编辑项目文件</code>添加<code>&lt;UseWPF&gt;true&lt;/UseWPF&gt;</code>，使接口能返回<code>Window</code>供客户端使用。</p>',10),x=n("code",null,"StartWpf",-1),S=e(`<div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ComVisible</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Guid</span><span class="token attribute-arguments"><span class="token punctuation">(</span>ContractGuids<span class="token punctuation">.</span>ServerInterface<span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">InterfaceType</span><span class="token attribute-arguments"><span class="token punctuation">(</span>ComInterfaceType<span class="token punctuation">.</span>InterfaceIsIUnknown<span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IServer</span>
<span class="token punctuation">{</span>
    <span class="token comment">//页面直接使用</span>
    <span class="token return-type class-name">Window</span> <span class="token function">StartCore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//Prism IOC使用</span>
    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">StartWpf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//不带UI的计算</span>
    <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Sum</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> a<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">int</span></span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="实现服务接口差异" tabindex="-1"><a class="header-anchor" href="#实现服务接口差异" aria-hidden="true">#</a> 实现服务接口差异</h3><p>这里使用的是WPF作为页面展示</p><p><code>编辑项目文件</code>添加<code>&lt;EnableComHosting&gt;true&lt;/EnableComHosting&gt;</code>，生成<code>xxxx.comhost.dll</code>文件。</p>`,4),E={href:"https://learn.microsoft.com/zh-cn/windows-server/administration/windows-commands/regsvr32",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"xxx.comhost.dll",-1),I=e("<p><code>编辑项目文件</code>添加<code>&lt;EnableRegFreeCom&gt;true&lt;/EnableRegFreeCom&gt;</code>，生成<code>XXXX..X.manifest</code>清单文件。</p><p>另外加了一个带<code>Prism</code>的启动，需要将<code>App.xml</code>文件右击属性，将生成操作调整为<code>页</code>。</p>",2),F={class:"hint-container tip"},D=n("p",{class:"hint-container-title"},"提示",-1),P=n("p",null,[s("因为没有"),n("code",null,"app.xaml"),s("作为启动项，所以app.xaml里的资源不能直接绑定了，需要单独使用。")],-1),X=n("code",null,"App.xaml",-1),V=e("<p>正如<code>VB客户端</code>无法使用IOC，但是可以调用<code>StartWPF</code>作为整体启动。</p><p>另外<code>.NET Core客户端</code>已经有了<code>Application</code>，无法启用<code>StartWPF</code>，但是可以将IOC放在外部客户端上，调用<code>StartCore</code>方法</p>",2),W=e(`<div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ComVisible</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Guid</span><span class="token attribute-arguments"><span class="token punctuation">(</span>ContractGuids<span class="token punctuation">.</span>ServerClass<span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Server</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IServer</span></span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 不带IOC</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name">Window</span> <span class="token function">StartCore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MainView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 使用Prism</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">StartWPF</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        app<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Sum</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> a<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> b<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="客户端调用差异" tabindex="-1"><a class="header-anchor" href="#客户端调用差异" aria-hidden="true">#</a> 客户端调用差异</h3>`,2),M=n("div",{class:"language-csharp line-numbers-mode","data-ext":"cs"},[n("pre",{class:"language-csharp"},[n("code",null,[n("span",{class:"token class-name"},[n("span",{class:"token keyword"},"var")]),s(" caller "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token constructor-invocation class-name"},"Server"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token class-name"},[n("span",{class:"token keyword"},"var")]),s(" mainView"),n("span",{class:"token operator"},"="),s(" caller"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"StartCore"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
mainView`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"ShowDialog"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
Application`),n("span",{class:"token punctuation"},"."),s("Current"),n("span",{class:"token punctuation"},"."),s("MainWindow "),n("span",{class:"token operator"},"="),s(" mainView"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),A=n("div",{class:"language-csharp line-numbers-mode","data-ext":"cs"},[n("pre",{class:"language-csharp"},[n("code",null,[n("span",{class:"token comment"},"// The following classes are typically defined in a PIA, but for this example"),s(`
`),n("span",{class:"token comment"},"// are being defined here to simplify the scenario."),s(`
`),n("span",{class:"token keyword"},"namespace"),s(),n("span",{class:"token namespace"},"Activation"),s(`
`),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token doc-comment comment"},[s("/// "),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("summary")]),n("span",{class:"token punctuation"},">")])]),s(`
    `),n("span",{class:"token doc-comment comment"},"/// Managed definition of CoClass"),s(`
    `),n("span",{class:"token doc-comment comment"},[s("/// "),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("summary")]),n("span",{class:"token punctuation"},">")])]),s(`
    `),n("span",{class:"token punctuation"},"["),s("ComImport"),n("span",{class:"token punctuation"},"]"),s(`
    `),n("span",{class:"token punctuation"},"["),n("span",{class:"token attribute"},[n("span",{class:"token class-name"},"CoClass"),n("span",{class:"token attribute-arguments"},[n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"typeof"),n("span",{class:"token punctuation"},"("),n("span",{class:"token type-expression class-name"},"ServerClass"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")")])]),n("span",{class:"token punctuation"},"]"),s(`
    `),n("span",{class:"token punctuation"},"["),n("span",{class:"token attribute"},[n("span",{class:"token class-name"},"Guid"),n("span",{class:"token attribute-arguments"},[n("span",{class:"token punctuation"},"("),s("ContractGuids"),n("span",{class:"token punctuation"},"."),s("ServerInterface"),n("span",{class:"token punctuation"},")")])]),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token comment"},"// By TlbImp convention, set this to the GUID of the parent interface"),s(`
    `),n("span",{class:"token keyword"},"internal"),s(),n("span",{class:"token keyword"},"interface"),s(),n("span",{class:"token class-name"},"Server"),s(),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token type-list"},[n("span",{class:"token class-name"},"IServer")]),s(`
    `),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`

    `),n("span",{class:"token doc-comment comment"},[s("/// "),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("summary")]),n("span",{class:"token punctuation"},">")])]),s(`
    `),n("span",{class:"token doc-comment comment"},"/// Managed activation for CoClass"),s(`
    `),n("span",{class:"token doc-comment comment"},[s("/// "),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("summary")]),n("span",{class:"token punctuation"},">")])]),s(`
    `),n("span",{class:"token punctuation"},"["),s("ComImport"),n("span",{class:"token punctuation"},"]"),s(`
    `),n("span",{class:"token punctuation"},"["),n("span",{class:"token attribute"},[n("span",{class:"token class-name"},"Guid"),n("span",{class:"token attribute-arguments"},[n("span",{class:"token punctuation"},"("),s("ContractGuids"),n("span",{class:"token punctuation"},"."),s("ServerClass"),n("span",{class:"token punctuation"},")")])]),n("span",{class:"token punctuation"},"]"),s(`
    `),n("span",{class:"token keyword"},"internal"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"ServerClass"),s(`
    `),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),G=e(`<h2 id="net-framework与-net-core" tabindex="-1"><a class="header-anchor" href="#net-framework与-net-core" aria-hidden="true">#</a> .NET Framework与.NET Core</h2><figure><img src="https://nas.ilyl.life:8092/wpf/com3.gif" alt=".Net Framework调用.Net Core" width="420" height="200" tabindex="0" loading="lazy"><figcaption>.Net Framework调用.Net Core</figcaption></figure><p>无法使用COM 激活的方式调用，但是可以使用COM CLSID 找到。</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> comType <span class="token operator">=</span> Type<span class="token punctuation">.</span><span class="token function">GetTypeFromCLSID</span><span class="token punctuation">(</span>Guid<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>DemoCore<span class="token punctuation">.</span>Contract<span class="token punctuation">.</span>ContractGuids<span class="token punctuation">.</span>ServerClass<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> active <span class="token operator">=</span> System<span class="token punctuation">.</span>Activator<span class="token punctuation">.</span><span class="token function">CreateInstance</span><span class="token punctuation">(</span>comType<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token class-name">DemoCore<span class="token punctuation">.</span>Contract<span class="token punctuation">.</span>IServer</span><span class="token punctuation">;</span>
<span class="token comment">//var sum=active.Sum(2,5);</span>
<span class="token comment">//MessageBox.Show(sum.ToString());</span>
<span class="token class-name"><span class="token keyword">var</span></span> mainView<span class="token operator">=</span>active<span class="token punctuation">.</span><span class="token function">StartCore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
mainView<span class="token punctuation">.</span><span class="token function">ShowDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="net-framework-prism" tabindex="-1"><a class="header-anchor" href="#net-framework-prism" aria-hidden="true">#</a> .NET Framework Prism</h3><p>.NET Framework客户端<code>DemoWin.Client</code>，调用.NET Core的WPF程序，并带Prism插件。</p><ol><li><p>由于<code>DemoCore.Plugin</code>支持.NET Cor和.NET Framework，在通过上述调用时，<code>DemoCore.Plugin.comhost.dll</code>需要<code>Regsvr32</code>注册。</p></li><li><p>另外客户端是.NET Framework，虽然提供的服务是.NET Core，但是对应的<code>Demo.Plugin</code>需要是.NET Framework版本。</p></li><li><p>最后还需要将<code>DemoCore.Plugin</code>生成的.NET Framework版本拷贝到<code>DemoWin.Client</code>目录下。</p></li></ol><p>既<code>DemoWin.Client</code>目录下应包含<code>DemoCore.Plugin</code>的.NET Framework版本、<code>Demo.Plugin</code>的.NET Framework版本、<code>update.exe</code>、以及它们对应的<code>Prism</code>依赖。最后别忘了需要注册<code>DemoCore.Plugin.comhost.dll</code>文件。</p><h2 id="net-framework与-net-framework" tabindex="-1"><a class="header-anchor" href="#net-framework与-net-framework" aria-hidden="true">#</a> .NET Framework与.NET Framework</h2><p>这种通过COM CLSID用的不多，同一种语言，直接引用，或者用反射。</p><figure><img src="https://nas.ilyl.life:8092/wpf/com4.gif" alt=".NET Framework调用.NET Framework" width="420" height="200" tabindex="0" loading="lazy"><figcaption>.NET Framework调用.NET Framework</figcaption></figure><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> comType <span class="token operator">=</span> Type<span class="token punctuation">.</span><span class="token function">GetTypeFromCLSID</span><span class="token punctuation">(</span>Guid<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>ContractGuids<span class="token punctuation">.</span>ServerClass<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> active <span class="token operator">=</span> System<span class="token punctuation">.</span>Activator<span class="token punctuation">.</span><span class="token function">CreateInstance</span><span class="token punctuation">(</span>comType<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token class-name">IServer</span><span class="token punctuation">;</span>
active<span class="token punctuation">.</span><span class="token function">StartWin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="vb与-net-core" tabindex="-1"><a class="header-anchor" href="#vb与-net-core" aria-hidden="true">#</a> VB与.NET Core</h2><figure><img src="https://nas.ilyl.life:8092/wpf/com5.gif" alt="VB调用.NET Core" width="420" height="200" tabindex="0" loading="lazy"><figcaption>VB调用.NET Core</figcaption></figure><div class="language-vb line-numbers-mode" data-ext="vb"><pre class="language-vb"><code><span class="token keyword">Dim</span> obj <span class="token keyword">As</span> <span class="token keyword">Object</span>

<span class="token keyword">Set</span> obj <span class="token operator">=</span> CreateObject<span class="token punctuation">(</span><span class="token string">&quot;DemoCore.Plugin.Server&quot;</span><span class="token punctuation">)</span>
obj<span class="token punctuation">.</span>StartWpfCore

<span class="token keyword">Set</span> obj <span class="token operator">=</span> <span class="token boolean">Nothing</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="vb-prism" tabindex="-1"><a class="header-anchor" href="#vb-prism" aria-hidden="true">#</a> VB Prism</h3><figure><img src="https://nas.ilyl.life:8092/wpf/update3.gif" alt="VB调用.NET Core Prism" width="420" height="200" tabindex="0" loading="lazy"><figcaption>VB调用.NET Core Prism</figcaption></figure><p>因为直接调用<code>DemoCore.Plugin.Server</code>服务，而它是.NET Core，更新的插件既<code>Demo.Plugin</code>也应该是.NET Core，不能使用<code>.NET Framework</code>，否则提示找不到的问题。</p><p>另外，更新<code>update.exe</code>程序是找当前目录的，所有<code>vb</code>客户端也需要放到当前目录下才行。</p>`,19);function U(B,O){const o=p("ExternalLinkIcon"),c=p("RouterLink"),r=p("Mermaid"),u=p("Tabs");return k(),m("div",null,[n("p",null,[n("a",b,[s("Com激活说明"),a(o)])]),h,n("p",null,[s("反射和直接引用都可以，"),n("a",g,[s("示例源代码地址"),a(o)])]),n("ol",null,[w,n("li",null,[a(c,{to:"/cs/wpf/plugin.html"},{default:t(()=>[s("Demo.Plugin")]),_:1}),s("：模块插件")]),n("li",null,[a(c,{to:"/cs/wpf/update.html"},{default:t(()=>[s("update")]),_:1}),s("：更新程序")])]),a(r,{id:"mermaid-132",code:"eJzT1dXlKsksyUm1UnD29322tfH5im4ukGBaTn55ckZiUYlCiAsXl4JCcWlSelFiQYbC03WLnnVsf756PVBQQSElsyg1uSQzP08hxAmkDElhWRKqUgWgiIZLam5+mJOec05mal6JJlg8NS8FTaeen2uIgltRYm5qeX5RNropyWC9YJPCM/OIMco5vygVuynJ+SmpYJNASjCMghsIN+7ZnN6nXQufbV7xtK0Hh//zUkvSYE5Pzs8rKUpMLomGOxYqEKugq2ungGQOUFcy0AkoGiBuwqYDrAXCBgsj21mcWlSWWgS3MSCnND0zL1YBixaQhUiqwdZBlYNsgPodHnAQByAHABcAiu3WGg=="}),a(r,{id:"mermaid-133",code:"eJzT1dXlKsksyUm1Uni5cOvLuYuerV36ctUSLpB4Wk5+eXJGYlGJQogLF5eCQnFpUnpRYkGGwtMJ6592rXg6cwVQUEEhJbMoNbkkMz9PIcQJpAxJYVnS03WLnnVsf756PVhCASii4ZKamx/mpOeck5maV6IJFk/NS0HTqefnGqLgVpSYm1qeX5SNbkoyWC/YpPDMPGKMcs4vSsVuSnJ+SirYJJASDKPgBsKNe7Jj9/MV3U939RPyPEleCMgpTc/Mo4oX0I3C9MKz2VueTdsAMaK0ICWxJFUDQoE0YShesfDp3OnPprU/2b2NNC9DdfZPgulUUMhLLUmDSReA3amRAnQ3sd7HbmIyUAafYXAj4elWQVfXDikigVJwDlgKGkBAcQgLIogcEFwA+mY2oQ=="}),f,n("p",null,[s("或者使用"),n("a",C,[s("Regasm.exe"),a(o)])]),y,n("p",null,[n("a",T,[s("官网示例NET Core Com"),a(o)])]),N,n("p",null,[s("另外添加了一个"),x,s("的方法，实现带Prism的启动，将"),a(c,{to:"/cs/wpf/plugin.html"},{default:t(()=>[s("模块化")]),_:1}),s("的功能全部搬过来。")]),S,n("p",null,[s("使用"),n("a",E,[s("regsvr32"),a(o)]),s("对"),_,s("进行注册。")]),I,n("div",F,[D,P,n("p",null,[s("这里是将"),a(c,{to:"/cs/wpf/plugin.html"},{default:t(()=>[s("模块")]),_:1}),s("的所有功能都复制过来，只调整了一个"),X,s("，导致IOC也是包含在里面。")]),V]),W,a(u,{id:"261",data:[{id:".NET Core客户端"},{id:".NET Core代理"}]},{title0:t(({value:i,isActive:l})=>[s(".NET Core客户端")]),title1:t(({value:i,isActive:l})=>[s(".NET Core代理")]),tab0:t(({value:i,isActive:l})=>[M]),tab1:t(({value:i,isActive:l})=>[A]),_:1},8,["data"]),G])}const Y=d(v,[["render",U],["__file","com.html.vue"]]);export{Y as default};
