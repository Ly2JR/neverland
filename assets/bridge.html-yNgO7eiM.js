const e=JSON.parse('{"key":"v-a3ee05f0","path":"/cs/design-pattern/bridge.html","title":"桥接模式","lang":"zh-CN","frontmatter":{"title":"桥接模式","date":"2023-06-17T00:00:00.000Z","dir.order":3,"order":3,"editLink":false,"footer":false,"category":["设计模式"],"tag":["设计模式"],"description":"参与此模式的类和对象包括： Abstraction(BusinessObject) 定义抽象的接口。 维护对实现器类型对象的引用。 RefinedAbstraction(CustomerBusinessObject) 扩展抽象定义的接口。 Implementor(DataObject) 定义实现类的接口。这个接口不必完全对应于抽象的接口；实际上，这两个...","head":[["meta",{"property":"og:url","content":"https://ilyl.life/cs/design-pattern/bridge.html"}],["meta",{"property":"og:site_name","content":"乌龙茶有点甜"}],["meta",{"property":"og:title","content":"桥接模式"}],["meta",{"property":"og:description","content":"参与此模式的类和对象包括： Abstraction(BusinessObject) 定义抽象的接口。 维护对实现器类型对象的引用。 RefinedAbstraction(CustomerBusinessObject) 扩展抽象定义的接口。 Implementor(DataObject) 定义实现类的接口。这个接口不必完全对应于抽象的接口；实际上，这两个..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-07-21T07:17:50.000Z"}],["meta",{"property":"article:author","content":"乌龙茶"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:published_time","content":"2023-06-17T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-07-21T07:17:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"桥接模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-06-17T00:00:00.000Z\\",\\"dateModified\\":\\"2023-07-21T07:17:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"乌龙茶\\",\\"url\\":\\"https://ilyl.life\\",\\"email\\":\\"mailto:982474256@qq.com\\"}]}"]]},"headers":[],"git":{"createdTime":1687005402000,"updatedTime":1689923870000,"contributors":[{"name":"乌龙茶","email":"982474256@qq.com","commits":2}]},"readingTime":{"minutes":1.97,"words":591},"filePathRelative":"cs/design-pattern/bridge.md","localizedDate":"2023年6月17日","excerpt":"<p>参与此模式的类和对象包括：</p>\\n<ul>\\n<li>\\n<p>Abstraction(<code>BusinessObject</code>)</p>\\n<ul>\\n<li>定义抽象的接口。</li>\\n<li>维护对实现器类型对象的引用。</li>\\n</ul>\\n</li>\\n<li>\\n<p>RefinedAbstraction(<code>CustomerBusinessObject</code>)</p>\\n<ul>\\n<li>扩展抽象定义的接口。</li>\\n</ul>\\n</li>\\n<li>\\n<p>Implementor(<code>DataObject</code>)</p>\\n<ul>\\n<li>定义实现类的接口。这个接口不必完全对应于抽象的接口；实际上，这两个接口可能完全不同。通常，实现接口仅提供基元操作，抽象基于这些基元定义更高级别的操作。</li>\\n</ul>\\n</li>\\n<li>\\n<p>ConcreteImplementor(<code>CustomerDataObject</code>)</p>\\n<ul>\\n<li>实现实现器接口并定义其具体实现。</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}');export{e as data};
