import{_ as c}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as t,o as l,c as i,f as a,d as s,e as n,b as e}from"./app-mFT_BNR7.js";const u={},r=e('<p>前端需要RSA加密，使用<code>JSEncrypt</code>加密对长文本支持不友好，<code>Encryptlong</code>在<code>JSEncrypt</code>基础上进行了扩展。</p><p>但是实际情况是前端利用公钥加密，后端私钥加密，前端需要公钥解密。</p><p>因此在<code>Encryptlong</code>的基础上继续扩展，支持以下功能</p><ul class="task-list-container"><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-0" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-0"> 中文长文本加解密</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-1" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-1"> 公钥解密</label></li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><ol><li>公钥需要完整的包括头部<code>-----BEGIN PUBLIC KEY-----</code>和尾部<code>-----END PUBLIC KEY-----</code></li><li>公钥是有换行的，需要在每个换行处添加<code>\\n</code></li><li>RSA加解密针对汉字都使用了URL转码处理</li></ol></div><h2 id="演示" tabindex="-1"><a class="header-anchor" href="#演示" aria-hidden="true">#</a> 演示</h2>',6),k=s("h2",{id:"中文加解密",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#中文加解密","aria-hidden":"true"},"#"),n(" 中文加解密")],-1),d=s("p",null,"在中文加解密之前需要进行一次转码。",-1),v={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent",target:"_blank",rel:"noopener noreferrer"},b={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent",target:"_blank",rel:"noopener noreferrer"},m={href:"https://developer.mozilla.org/en-US/docs/Glossary/Base64",target:"_blank",rel:"noopener noreferrer"},y=e(`<h3 id="base64" tabindex="-1"><a class="header-anchor" href="#base64" aria-hidden="true">#</a> Base64</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">base64ToBytes</span><span class="token punctuation">(</span><span class="token parameter">base64</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> binString <span class="token operator">=</span> <span class="token function">atob</span><span class="token punctuation">(</span>base64<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> Uint8Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>binString<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">m</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> m<span class="token punctuation">.</span><span class="token function">codePointAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">bytesToBase64</span><span class="token punctuation">(</span><span class="token parameter">bytes</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> binString <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> String<span class="token punctuation">.</span><span class="token function">fromCodePoint</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">btoa</span><span class="token punctuation">(</span>binString<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// Usage</span>
<span class="token function">bytesToBase64</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TextEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">&quot;a Ā 𐀀 文 🦄&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;YSDEgCDwkICAIOaWhyDwn6aE&quot;</span>
<span class="token keyword">new</span> <span class="token class-name">TextDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token function">base64ToBytes</span><span class="token punctuation">(</span><span class="token string">&quot;YSDEgCDwkICAIOaWhyDwn6aE&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;a Ā 𐀀 文 🦄&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="公钥解密" tabindex="-1"><a class="header-anchor" href="#公钥解密" aria-hidden="true">#</a> 公钥解密</h2><p>公钥解密需要修改原来的<code>decrypt</code>的方法，这里直接拷贝复制为<code>decryptex</code></p><h3 id="新建rsa-ts" tabindex="-1"><a class="header-anchor" href="#新建rsa-ts" aria-hidden="true">#</a> 新建rsa.ts</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> JSEncrypt <span class="token keyword">from</span> <span class="token string">&#39;./encryptlong&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> publicKey <span class="token operator">=</span>
  <span class="token string">&#39;-----BEGIN PUBLIC KEY-----\\n&#39;</span> <span class="token operator">+</span>
  <span class="token string">&#39;\\n&#39;</span> <span class="token operator">+</span>
  <span class="token string">&#39;\\n&#39;</span> <span class="token operator">+</span>
  <span class="token string">&#39;\\n&#39;</span> <span class="token operator">+</span>
  <span class="token string">&#39;-----END PUBLIC KEY-----&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">encrypt</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> jsEncrypt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSEncrypt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  jsEncrypt<span class="token punctuation">.</span><span class="token function">setPublicKey</span><span class="token punctuation">(</span>publicKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> enData <span class="token operator">=</span> <span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> result <span class="token operator">=</span> jsEncrypt<span class="token punctuation">.</span><span class="token function">encryptUnicodeLong</span><span class="token punctuation">(</span>enData<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">decrypt</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> jsEncrypt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSEncrypt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  jsEncrypt<span class="token punctuation">.</span><span class="token function">setPublicKey</span><span class="token punctuation">(</span>publicKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> result <span class="token operator">=</span> jsEncrypt<span class="token punctuation">.</span><span class="token function">decryptUnicodeLong</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> decryptData <span class="token operator">=</span> <span class="token function">decodeURIComponent</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> decryptData<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="调整encryptlong" tabindex="-1"><a class="header-anchor" href="#调整encryptlong" aria-hidden="true">#</a> 调整Encryptlong</h3><div class="hint-container tip"><p class="hint-container-title">提示</p><p>pnpm patch-commit 补丁制作有问题，占时没有使用该方法</p></div><p>将Encryptlong.js完整拷贝出来。与<code>rsa.js</code>同一目录。</p><ol><li><p>注释开头</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// (function (global, factory) {</span>
<span class="token comment">//  typeof exports === &#39;object&#39; &amp;&amp; typeof module !== &#39;undefined&#39; ? factory(exports) :</span>
<span class="token comment">//  typeof define === &#39;function&#39; &amp;&amp; define.amd ? define([&#39;exports&#39;], factory) :</span>
<span class="token comment">//  (factory((global.JSEncrypt = {})));</span>
<span class="token comment">// }(this, (function (exports) { &#39;use strict&#39;;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>注释<code>JSEncrypt</code>函数部分</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// var JSEncrypt = /** @class */ (function () {</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>注释结尾</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//return JSEncrypt;</span>
<span class="token comment">// }());</span>

<span class="token comment">// window.JSEncrypt = JSEncrypt;</span>

<span class="token comment">// exports.JSEncrypt = JSEncrypt;</span>
<span class="token comment">// exports.default = JSEncrypt;</span>

<span class="token comment">// Object.defineProperty(exports, &#39;__esModule&#39;, { value: true });</span>

<span class="token comment">// })));</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>结尾添加导出</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> JSEncrypt<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>添加公钥解密</p><p>原函数<code>decrypt</code>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token class-name">RSAKey</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">decrypt</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">ctext</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token function">parseBigInt</span><span class="token punctuation">(</span>ctext<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> m <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doPrivate</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token function">pkcs1unpad2</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>n<span class="token punctuation">.</span><span class="token function">bitLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>新建函数<code>decryptEx</code>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token class-name">RSAKey</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">decryptEx</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">ctext</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token function">parseBigInt</span><span class="token punctuation">(</span>ctext<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> m <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doPublic</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token function">pkcs1unpad2Ex</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>n<span class="token punctuation">.</span><span class="token function">bitLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="highlight-lines"><br><br><div class="highlight-line"> </div><br><br><br><div class="highlight-line"> </div><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>解密部分</p><p>原函数<code>pkcs1unpad2</code>:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">pkcs1unpad2</span><span class="token punctuation">(</span><span class="token parameter">d<span class="token punctuation">,</span> n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">++</span>i<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token punctuation">.</span>length <span class="token operator">-</span> i <span class="token operator">!=</span> n <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">||</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token operator">++</span>i<span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>i <span class="token operator">&gt;=</span> b<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> ret <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">++</span>i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> c <span class="token operator">=</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">255</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">&lt;</span> <span class="token number">128</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// utf-8 decode</span>
    ret <span class="token operator">+=</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">&gt;</span> <span class="token number">191</span> <span class="token operator">&amp;&amp;</span> c <span class="token operator">&lt;</span> <span class="token number">224</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ret <span class="token operator">+=</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>c <span class="token operator">&amp;</span> <span class="token number">31</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>b<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">63</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">++</span>i<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    ret <span class="token operator">+=</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>c <span class="token operator">&amp;</span> <span class="token number">15</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">12</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">63</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>b<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">63</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    i <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>新建函数<code>pkcs1unpad2Ex</code>:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">pkcs1unpad2Ex</span><span class="token punctuation">(</span><span class="token parameter">d<span class="token punctuation">,</span> _n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">++</span>i<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// if (b.length - i != n - 1 || b[i] != 2) {</span>
<span class="token comment">//   return null;</span>
<span class="token comment">// }</span>
<span class="token comment">// ++i;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>i <span class="token operator">&gt;=</span> b<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> ret <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">++</span>i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> c <span class="token operator">=</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">255</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">&lt;</span> <span class="token number">128</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// utf-8 decode</span>
    ret <span class="token operator">+=</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">&gt;</span> <span class="token number">191</span> <span class="token operator">&amp;&amp;</span> c <span class="token operator">&lt;</span> <span class="token number">224</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ret <span class="token operator">+=</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>c <span class="token operator">&amp;</span> <span class="token number">31</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>b<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">63</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">++</span>i<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    ret <span class="token operator">+=</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>c <span class="token operator">&amp;</span> <span class="token number">15</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">12</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">63</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>b<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">63</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    i <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>中文加密</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 分段加密，支持中文</span>
<span class="token class-name">JSEncrypt</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">encryptUnicodeLong</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">var</span> k <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//根据key所能编码的最大长度来定分段长度。key size - 11：11字节随机padding使每次加密结果都不同。</span>
<span class="token keyword">var</span> maxLength <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>k<span class="token punctuation">.</span>n<span class="token punctuation">.</span><span class="token function">bitLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">11</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> ret <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> subStr <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
    encryptedString <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> subStart <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    subEnd <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> bitLen <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    tmpPoint <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> string<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//js 是使用 Unicode 编码的，每个字符所占用的字节数不同</span>
    <span class="token keyword">var</span> charCode <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>charCode <span class="token operator">&lt;=</span> <span class="token number">0x007f</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        bitLen <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>charCode <span class="token operator">&lt;=</span> <span class="token number">0x07ff</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        bitLen <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>charCode <span class="token operator">&lt;=</span> <span class="token number">0xffff</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        bitLen <span class="token operator">+=</span> <span class="token number">3</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        bitLen <span class="token operator">+=</span> <span class="token number">4</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//字节数到达上限，获取子字符串加密并追加到总字符串后。更新下一个字符串起始位置及字节计算。</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>bitLen <span class="token operator">&gt;</span> maxLength<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        subStr <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>subStart<span class="token punctuation">,</span> subEnd<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> en <span class="token operator">=</span> k<span class="token punctuation">.</span><span class="token function">encrypt</span><span class="token punctuation">(</span>subStr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        encryptedString <span class="token operator">+=</span> en<span class="token punctuation">;</span>
        subStart <span class="token operator">=</span> subEnd<span class="token punctuation">;</span>
        bitLen <span class="token operator">=</span> bitLen <span class="token operator">-</span> tmpPoint<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        subEnd <span class="token operator">=</span> i<span class="token punctuation">;</span>
        tmpPoint <span class="token operator">=</span> bitLen<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    subStr <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>subStart<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> end <span class="token operator">=</span> k<span class="token punctuation">.</span><span class="token function">encrypt</span><span class="token punctuation">(</span>subStr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    encryptedString <span class="token operator">+=</span> end<span class="token punctuation">;</span>
    ret <span class="token operator">=</span> <span class="token function">hex2b64</span><span class="token punctuation">(</span>encryptedString<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>中文解密</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 分段解密，支持中文</span>
<span class="token class-name">JSEncrypt</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">decryptUnicodeLong</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">var</span> k <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//解密长度=key size.hex2b64结果是每字节每两字符，所以直接*2</span>
<span class="token keyword">var</span> maxLength <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>k<span class="token punctuation">.</span>n<span class="token punctuation">.</span><span class="token function">bitLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> hexString <span class="token operator">=</span> <span class="token function">b64tohex</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> decryptedString <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> rexStr <span class="token operator">=</span> <span class="token string">&#39;.{1,&#39;</span> <span class="token operator">+</span> maxLength <span class="token operator">+</span> <span class="token string">&#39;}&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> rex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>rexStr<span class="token punctuation">,</span> <span class="token string">&#39;g&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> subStrArray <span class="token operator">=</span> hexString<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>rex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>subStrArray<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    subStrArray<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">entry</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        decryptedString <span class="token operator">+=</span> k<span class="token punctuation">.</span><span class="token function">decryptEx</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> decryptedString<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">decryptEx</span><span class="token punctuation">(</span>hexString<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> y<span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol>`,10);function g(w,h){const o=t("VuePlayground"),p=t("ExternalLinkIcon");return l(),i("div",null,[r,a(o,{title:"RSA%E5%85%AC%E9%92%A5%E8%A7%A3%E5%AF%86",key:"e2b65b02",settings:"%7B%7D",files:"eyJBcHAudnVlIjoiPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlZiwgZ2V0Q3VycmVudEluc3RhbmNlLHJlYWN0aXZlIH0gZnJvbSAndnVlJ1xuaW1wb3J0IEVsZW1lbnRQbHVzIGZyb20gJ2VsZW1lbnQtcGx1cycgXG5pbXBvcnQge2RlY3J5cHR9IGZyb20gJy4vcnNhLmpzJ1xuZ2V0Q3VycmVudEluc3RhbmNlKCkuYXBwQ29udGV4dC5hcHAudXNlKEVsZW1lbnRQbHVzKTtcbmNvbnN0IGRhdGE9cmVhY3RpdmUoe1xuICAgIGVuY3J5cHREYXRhOidodnIvQjQ2NWhzRXpqd0J6Vm9oMmsxVndvcTdUdlpRbFREUUFJZVZuMXdVbFcrZTdyTUZ5STVacFlrUnhYdDdEdUNCTzgyMXlPUE9hdUhIY3ZCbE5lSzUvZkZRQTZlTFRPSHRmWmhJdms1ZWVCbFkvMU1lTE9TNWRRWkFsRlFpSng1MkJyNEdJdG1yRVJOSmVDN3hSeCtOMDUvMXI3SkpQUDZUaGx6QjFCWWc9JyxcbiAgICBkZWNyeXB0RGF0YTonJyxcbiAgICBwdWJsaWNLZXk6Jy0tLS0tQkVHSU4gUFVCTElDIEtFWS0tLS0tXFxuJytcbidNSUdmTUEwR0NTcUdTSWIzRFFFQkFRVUFBNEdOQURDQmlRS0JnUUMvTHIzb3ljK3J4RlhiejJkdmFvTUk2TjBSXFxuJytcbidtbGlqV1lCOCtnMTFoV3ZoemVRYVdrNlJZZWFQUGRxSm9lLzZxVm5EcDJ2eDVtN243YWZvNmF6WkhnM3R1clFvXFxuJytcbid5dng4ZG5JbDZKYUlHeDlEbVB6Mmw5MmNDSmpSMDlxU0ovVENRK21uWEtKVnJiRG1xQzlhcXA3MlBkdEJuMXVWXFxuJytcbidyQU5CSW94OW8zdHFkVldxTVFJREFRQUJcXG4nK1xuJy0tLS0tRU5EIFBVQkxJQyBLRVktLS0tLSdcbn0pO1xuXG5mdW5jdGlvbiBoYW5kbGVEZWNyeXB0KCl7XG4gIGNvbnN0IGVuY3J5cHREYXRhPWRlY3J5cHQoZGF0YS5lbmNyeXB0RGF0YSxkYXRhLnB1YmxpY0tleSk7XG4gIGRhdGEuZGVjcnlwdERhdGE9ZW5jcnlwdERhdGE7XG59XG48L3NjcmlwdD5cblxuPHRlbXBsYXRlPlxuIDxlbC1hbGVydCB0aXRsZT1cIuengemSpeWSjOWFrOmSpeS4ukpTRW5jcnlwdOmHjOeahERFTU9cIiB0eXBlPVwic3VjY2Vzc1wiIGVmZmVjdD1cImRhcmtcIi8%2BXG48ZWwtaW5wdXRcbiAgICB2LW1vZGVsPVwiZGF0YS5wdWJsaWNLZXlcIlxuICAgIDpyb3dzPVwiM1wiXG4gICAgdHlwZT1cInRleHRhcmVhXCJcbiAgICBwbGFjZWhvbGRlcj1cIuWFrOmSpVwiXG4gIC8%2BXG4gICAgICA8ZWwtaW5wdXRcbiAgICB2LW1vZGVsPVwiZGF0YS5lbmNyeXB0RGF0YVwiXG4gICAgOnJvd3M9XCIzXCJcbiAgICB0eXBlPVwidGV4dGFyZWFcIlxuICAgIHBsYWNlaG9sZGVyPVwi5a%2BG5paHXCJcbiAgLz5cbiAgPGVsLWlucHV0XG4gICAgdi1tb2RlbD1cImRhdGEuZGVjcnlwdERhdGFcIlxuICAgIDpyb3dzPVwiM1wiXG4gICAgdHlwZT1cInRleHRhcmVhXCJcbiAgICBwbGFjZWhvbGRlcj1cIuaYjuaWh1wiXG4gIC8%2BXG48ZWwtYnV0dG9uIHR5cGU9XCJwcmltYXJ5XCIgQGNsaWNrPVwiaGFuZGxlRGVjcnlwdFwiPuWFrOmSpeino%2BWvhjwvZWwtYnV0dG9uPlxuXG48L3RlbXBsYXRlPlxuXG48c3R5bGU%2BXG4gIEBpbXBvcnQgXCJodHRwczovL3VucGtnLmNvbS9lbGVtZW50LXBsdXNAMi9kaXN0L2luZGV4LmNzc1wiO1xuPC9zdHlsZT5cbiIsInJzYS5qcyI6ImltcG9ydCBKU0VuY3J5cHQgZnJvbSAnL2Fzc2V0cy9qcy9qc2VuY3J5cHRsb25nLmpzJztcblxuZXhwb3J0IGZ1bmN0aW9uIGVuY3J5cHQoZGF0YSxwdWJsaWNLZXkpIHtcbiAgY29uc3QganNFbmNyeXB0ID0gbmV3IEpTRW5jcnlwdCgpO1xuICBqc0VuY3J5cHQuc2V0UHVibGljS2V5KHB1YmxpY0tleSk7XG4gIGNvbnN0IGVuRGF0YSA9IGVuY29kZVVSSUNvbXBvbmVudChkYXRhKTtcbiAgY29uc3QgcmVzdWx0ID0ganNFbmNyeXB0LmVuY3J5cHRVbmljb2RlTG9uZyhlbkRhdGEpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGVjcnlwdChkYXRhLHB1YmxpY0tleSkge1xuICBjb25zdCBqc0VuY3J5cHQgPSBuZXcgSlNFbmNyeXB0KCk7XG4gIGpzRW5jcnlwdC5zZXRQdWJsaWNLZXkocHVibGljS2V5KTtcbiAgY29uc3QgcmVzdWx0ID0ganNFbmNyeXB0LmRlY3J5cHRVbmljb2RlTG9uZyhkYXRhKTtcbiAgY29uc3QgZGVjcnlwdERhdGEgPSBkZWNvZGVVUklDb21wb25lbnQocmVzdWx0KTtcbiAgcmV0dXJuIGRlY3J5cHREYXRhO1xufVxuIiwiaW1wb3J0LW1hcC5qc29uIjoie1xuICBcImltcG9ydHNcIjoge1xuICAgIFwidnVlXCI6IFwiaHR0cHM6Ly9wbGF5LnZ1ZWpzLm9yZy92dWUucnVudGltZS5lc20tYnJvd3Nlci5qc1wiLFxuICAgIFwiZWxlbWVudC1wbHVzXCI6IFwiaHR0cHM6Ly91bnBrZy5jb20vZWxlbWVudC1wbHVzQDIvZGlzdC9pbmRleC5mdWxsLm1pbi5tanNcIixcbiAgICBcInZ1ZS9zZXJ2ZXItcmVuZGVyZXJcIjogXCJodHRwczovL3BsYXkudnVlanMub3JnL3NlcnZlci1yZW5kZXJlci5lc20tYnJvd3Nlci5qc1wiXG4gIH1cbn1cbiJ9"}),k,d,s("p",null,[n("如果"),s("a",v,[n("decodeURIComponent"),a(p)]),n("和"),s("a",b,[n("encodeURIComponent"),a(p)]),n("或者"),s("a",m,[n("Base64"),a(p)])]),y])}const V=c(u,[["render",g],["__file","rsa.html.vue"]]);export{V as default};
