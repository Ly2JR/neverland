import{_ as c}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as l,c as i,d as n,f as a,a as s,e as t}from"./app-BqPwg2aw.js";const u={},k={href:"https://learn.microsoft.com/zh-cn/aspnet/core/signalr/introduction?view=aspnetcore-8.0",target:"_blank",rel:"noopener noreferrer"},r=t('<p>并且提供Android和IOS以及Web相关包。但是文档有点抽象，除非自己下手写才能更深的理解，这里疏浅的总结几个点，更快的理解SignalR，并配上示例代码。</p><h2 id="要点" tabindex="-1"><a class="header-anchor" href="#要点"><span>要点</span></a></h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p>Hub抽象代理，对参数名，参数类型需要完全一致</p></div><p>SignalR通信围绕<code>Hub</code>展开，高度抽象，包括几个方面</p><h3 id="中心" tabindex="-1"><a class="header-anchor" href="#中心"><span>中心</span></a></h3>',5),d=t("<p><code>Hub</code>提供两个代理方法,</p><ul><li>发消息<code>SendAsync</code></li><li>发消息以及响应<code>InvokeAsnyc</code></li></ul><p>不同点:</p><p><code>InvokeAsnyc</code>可以接收客户端的响应，而<code>SendAsync</code>只管发。</p><p><code>Hub</code>主要使用流程大体分为三种</p><ul><li><p>一端发消息、一端收消息</p></li><li><p>一端发消息，并直接响应、一端只收消息</p></li><li><p>一端发消息，并得到另一个端的实时响应</p><ol><li><p>第一种是通过一端只发一端只收，改成即发也收，人为参与的情况。</p></li><li><p>第二种是发完消息后需要立马得到客户端的响应，比如<code>自动唤醒</code>。</p></li></ol></li></ul><p>那么又如何区分谁向谁发，谁来接收的问题？</p>",7),v={href:"https://learn.microsoft.com/zh-cn/aspnet/core/signalr/hubs?view=aspnetcore-8.0#the-clients-object",target:"_blank",rel:"noopener noreferrer"},m=t('<p>常见的有:</p><p>发起者客户端:<code>Clients.Caller</code></p><p>除发起者外的所有客户端：<code>Clients.Others</code></p><p>指定客户端：<code>Clients.Client(ConnectionId)</code></p><h3 id="客户端" tabindex="-1"><a class="header-anchor" href="#客户端"><span>客户端</span></a></h3><p>客户端都是通过代理调用<code>Hub</code>方法实现。</p><p>客户端除了<code>Hub</code>有的<code>SendAsync</code>和<code>InvokeAsync</code>之外还有，<code>On</code>方法。</p>',7),g=n("p",null,"客户端A向客户端B发消息",-1),b=t(`<p>涉及三端<code>Hub</code>、<code>客户端A</code>、<code>客户端B</code></p><ul><li><p>Hub端</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name">Task</span> <span class="token function">SendToClientB</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> msg<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">await</span> Clients<span class="token punctuation">.</span>Others<span class="token punctuation">.</span><span class="token function">SendAsync</span><span class="token punctuation">(</span><span class="token string">&quot;ReceiveClientAMessage&quot;</span><span class="token punctuation">,</span>msg<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><div class="highlight-line"> </div><div class="highlight-line"> </div><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>PC客户端A<code>发起者</code></p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>HubConnection<span class="token punctuation">.</span><span class="token function">SendAsync</span><span class="token punctuation">(</span><span class="token string">&quot;SendToClientB&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>客户端A向客户端B发送消息，调用<code>Hub</code>中心的<code>SendToClientB</code>方法，发送内容为<code>Hello</code></p></li><li><p>PC客户端B<code>接收者</code></p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>HubConnection<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">On</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;ReceiveClientAMessage&quot;</span><span class="token punctuation">,</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>客户端B接收消息，监听<code>ReceiveClientAMessage</code>方法，并带有一个<code>string</code>参数。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>这里任何客户端调用<code>HubConnection.SendAsync(&quot;SendToClientB&quot;,&quot;Hello&quot;);</code>，客户端B都能收到消息。</p><p>除非在<code>Hub</code>的<code>SendToClientB</code>方法里将<code>Clients.Others</code>改为指定客户端B的连接才行<code>Clients.Client(ClientB.ConnectedId)</code></p></div></li></ul>`,2),h=n("p",null,"客户端A向客户端B发消息，同时客户端A确认已接收消息",-1),y=t(`<p>涉及三端<code>Hub</code>、<code>客户端A</code>、<code>客户端B</code></p><ul><li><p>Hub端</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token function">SendToClientB</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> msg<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">await</span> Clients<span class="token punctuation">.</span>Others<span class="token punctuation">.</span><span class="token function">SendAsync</span><span class="token punctuation">(</span><span class="token string">&quot;ReceiveClientAMessage&quot;</span><span class="token punctuation">,</span>msg<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token string">&quot;已收到&quot;</span>；
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><div class="highlight-line"> </div><br><div class="highlight-line"> </div><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>PC客户端A<code>发起者</code></p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> clientB<span class="token operator">=</span> HubConnection<span class="token punctuation">.</span><span class="token function">InvokeAsync</span><span class="token punctuation">(</span><span class="token string">&quot;SendToClientB&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>clientB<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>客户端A向客户端B发送消息，调用<code>Hub</code>中心的<code>SendToClientB</code>方法，发送内容为<code>Hello</code>,并接收<code>Hub</code>的响应。</p></li><li><p>PC客户端B<code>接收者</code></p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>HubConnection<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">On</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;ReceiveClientAMessage&quot;</span><span class="token punctuation">,</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul>`,2),f=n("p",null,"客户端A向客户端B发消息，客户端B收到消息后，向客户端A发送它的反馈",-1),w=t(`<p>涉及三端<code>Hub</code>、<code>客户端A</code>、<code>客户端B</code></p><ul><li><p>Hub端</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token function">GetClientMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> ret<span class="token operator">=</span> <span class="token keyword">await</span> Clients<span class="token punctuation">.</span>Caller<span class="token punctuation">.</span><span class="token function">InvokeAsync</span><span class="token punctuation">(</span><span class="token string">&quot;GetMessage&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>PC客户端A<code>响应者</code></p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>HubConnection<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">On</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;GetMessage&quot;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
   retrun <span class="token string">&quot;客户端A已收到&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>客户端A订阅<code>Hub</code>中的<code>GetMessage</code>方法,并返回结果。</p></li><li><p>PC客户端B<code>接收者</code></p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>HubConnection<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">On</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;GetMessage&quot;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
   retrun <span class="token string">&quot;客户端B已收到&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>客户端B订阅<code>Hub</code>中的<code>GetMessage</code>方法,并返回结果。</p></li></ul>`,2),C={id:"强类型中心",tabindex:"-1"},A={class:"header-anchor",href:"#强类型中心"},q={href:"https://learn.microsoft.com/zh-cn/aspnet/core/signalr/hubs?view=aspnetcore-8.0#strongly-typed-hubs",target:"_blank",rel:"noopener noreferrer"},x=t(`<p>提供了<code>Hub&lt;T&gt;</code>接口用于解决<code>Hub</code>中的硬编码问题。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IHubChat</span><span class="token punctuation">{</span>
    <span class="token return-type class-name">Task</span> <span class="token function">ReceiveClientAMessage</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name">Task</span> <span class="token function">ReceiveClientBMessage</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token function">GetMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChatHub</span><span class="token punctuation">:</span><span class="token type-list"><span class="token class-name">Hub<span class="token punctuation">&lt;</span>IChatHub<span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>硬编码</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">//发消息</span>
<span class="token keyword">await</span> Clients<span class="token punctuation">.</span>Others<span class="token punctuation">.</span><span class="token function">SendAsync</span><span class="token punctuation">(</span><span class="token string">&quot;ReceiveClientAMessage&quot;</span><span class="token punctuation">,</span>msg<span class="token punctuation">)</span>
<span class="token comment">//发消息</span>
<span class="token keyword">await</span> Clients<span class="token punctuation">.</span>Others<span class="token punctuation">.</span><span class="token function">InvokeAsync</span><span class="token punctuation">(</span><span class="token string">&quot;ReceiveClientBMessage&quot;</span><span class="token punctuation">,</span>msg<span class="token punctuation">)</span>
<span class="token comment">//发消息并接收消息</span>
<span class="token keyword">await</span> Clients<span class="token punctuation">.</span>Caller<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">InvokeAsync</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;GetMessage&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>强中心</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">//发消息</span>
<span class="token keyword">await</span> Clients<span class="token punctuation">.</span>Others<span class="token punctuation">.</span><span class="token function">ReceiveClientAMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>
<span class="token comment">//发消息</span>
<span class="token keyword">await</span> Clients<span class="token punctuation">.</span>Others<span class="token punctuation">.</span><span class="token function">ReceiveClientBMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>
<span class="token comment">//发消息冰接收消息</span>
<span class="token keyword">await</span> Clients<span class="token punctuation">.</span>Caller<span class="token punctuation">.</span><span class="token function">GetMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="实时通信示例" tabindex="-1"><a class="header-anchor" href="#实时通信示例"><span>实时通信示例</span></a></h2><p>以一个简单的聊天对话为例，包含以下功能</p><ul class="task-list-container"><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-0" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-0"> 强类型中心</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-1" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-1"> 实时通信</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-2" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-2"> 唤醒</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-3" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-3"> SignalR日志</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-4" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-4"> 通过API使用SignalR</label></li></ul><figure><img src="https://nas.ilyl.life:8092/dotnet/signalr.gif" alt="聊天" width="420" height="200" tabindex="0" loading="lazy"><figcaption>聊天</figcaption></figure><div class="hint-container tip"><p class="hint-container-title">提示</p><p>提示&quot;发生一个或多个错误，未能启动调试适配器。可以在输出窗口中查看额外的信息。&quot;时</p><p>在工具\\选项\\调试\\常规\\对ASP.NET启用JavaScript调试(Chrome、Edge和IE)中，取消即可。</p></div><ul><li>定义强类型接口</li></ul><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IChatHub</span>
<span class="token punctuation">{</span>
    <span class="token comment">//接收消息</span>
    <span class="token return-type class-name">Task</span> <span class="token function">GetHubMessage</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> clientId<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//接收指定客户端</span>
    <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token function">InvokeClientMessage</span><span class="token punctuation">(</span><span class="token class-name">CancellationToken</span> token<span class="token operator">=</span><span class="token keyword">default</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>引用<code>Microsoft.AspNetCore.SignalR</code></li></ul><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">Microsoft<span class="token punctuation">.</span>AspNetCore<span class="token punctuation">.</span>SignalR</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>继承<code>Hub&lt;T&gt;</code></li></ul><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChatHub</span><span class="token punctuation">:</span><span class="token type-list"><span class="token class-name">Hub<span class="token punctuation">&lt;</span>IChatHub<span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在<code>ChatHub</code>里处理所有客户端之间的的交互。</p><p>主要有两个，发消息和接收消息,他们都依赖<code>Hub</code>，提供了各种方法</p><ul><li><p>发送消息：<code>SendAsync</code></p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">SendMessage</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> user<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> message<span class="token punctuation">)</span>
    <span class="token operator">=&gt;</span> <span class="token keyword">await</span> Clients<span class="token punctuation">.</span>All<span class="token punctuation">.</span><span class="token function">SendAsync</span><span class="token punctuation">(</span><span class="token string">&quot;ReceiveMessage&quot;</span><span class="token punctuation">,</span> user<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>通过发送消息<code>SendAsync</code>实现不同客户端的消息发送</p><ul><li>客户端A发送消息到客户端B</li><li>客户端B发送消息到客户端A</li><li>...</li></ul><p>如何确认哪个客户端，以及发送给哪个客户端？</p><p>这时就需要<code>Hub.Context</code>上下文。</p><p>重写<code>OnConnectedAsync</code>和<code>OnDisconnectedAsync</code>方法，并通过<code>Context.GetHttpContext()</code>获取到客户端连接。</p></li><li><p>接收消息：<code>InvokeAsync</code></p><p>接收消息与发送消息类似，具体示例放在API部分。</p></li></ul><h3 id="日志" tabindex="-1"><a class="header-anchor" href="#日志"><span>日志</span></a></h3><p>添加<code>Serilog</code>日志记录所有情况</p><p>引用<code>Serilog</code>、<code>Serilog.AspNetCore</code>、<code>Serilog.Sinks.Async</code>、<code>Serilog.Sinks.File</code>四个包</p><p>将以下代码放在<code>Program</code>顶层</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>Log<span class="token punctuation">.</span>Logger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">LoggerConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span>WriteTo<span class="token punctuation">.</span><span class="token function">Console</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span>WriteTo<span class="token punctuation">.</span><span class="token function">Async</span><span class="token punctuation">(</span>f <span class="token operator">=&gt;</span> f<span class="token punctuation">.</span><span class="token function">File</span><span class="token punctuation">(</span><span class="token string">&quot;Logs\\\\log-.txt&quot;</span><span class="token punctuation">,</span>
    <span class="token named-parameter punctuation">outputTemplate</span><span class="token punctuation">:</span> <span class="token string">&quot;{Timestamp:yyyy-MM-dd HH:mm:ss.fff zzz}[{Level:u3}] {Message:lj}{NewLine}{Exception}&quot;</span><span class="token punctuation">,</span>
    <span class="token named-parameter punctuation">rollingInterval</span><span class="token punctuation">:</span> RollingInterval<span class="token punctuation">.</span>Day<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span>MinimumLevel<span class="token punctuation">.</span><span class="token function">Information</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">CreateLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启用日志</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>builder<span class="token punctuation">.</span>Host<span class="token punctuation">.</span><span class="token function">UseSerilog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//日志</span>
<span class="token range operator">..</span><span class="token punctuation">.</span>
app<span class="token punctuation">.</span><span class="token function">UseSerilogRequestLogging</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="chathub" tabindex="-1"><a class="header-anchor" href="#chathub"><span>ChatHub</span></a></h3><p>通过上下文得知，客户端连接时会自动携带一个唯一ID，例如<code>id=r22i63i8cd9xALATOW9HhA</code>。</p><p>因此，继续新增两个属性<code>user</code>标识身份，<code>type</code>标识身份类型<code>0:普通客户端</code>,<code>1:管理员客户端</code>，作为简单身份验证。</p><p>为了统一管理，新建<code>ChatManager</code>类，记录所有客户端的连接断开情况。</p><ul><li>客户端用户类</li></ul><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">?</span></span> userId<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">uint</span></span> userType<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">?</span></span> intime<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>UserId <span class="token operator">=</span> userId<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>UserType <span class="token operator">=</span> userType<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>InTime <span class="token operator">=</span> intime<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//自定义用户ID</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span><span class="token punctuation">?</span></span> UserId <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token comment">//SignalR唯一标识</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span><span class="token punctuation">?</span></span> ConnectionId <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token comment">//自定义用户类型</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">uint</span></span> UserType <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token comment">//连接时间</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span><span class="token punctuation">?</span></span> InTime <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>聊天管理类</li></ul><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChatManager</span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">ConcurrentDictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> User<span class="token punctuation">&gt;</span></span> _chatRoom<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">ILogger<span class="token punctuation">&lt;</span>ChatManager<span class="token punctuation">&gt;</span></span> _logger<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">string</span></span> TimeFormat <span class="token operator">=</span> <span class="token string">&quot;HH:mm:ss&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token function">ChatManager</span><span class="token punctuation">(</span><span class="token class-name">ILogger<span class="token punctuation">&lt;</span>ChatManager<span class="token punctuation">&gt;</span></span> logger<span class="token punctuation">,</span> <span class="token class-name">ConcurrentDictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> User<span class="token punctuation">&gt;</span></span> chatRoom<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _logger <span class="token operator">=</span> logger<span class="token punctuation">;</span>
        _chatRoom <span class="token operator">=</span> chatRoom<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name">User<span class="token punctuation">?</span></span> <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token class-name"><span class="token keyword">string</span></span> connectionId<span class="token punctuation">]</span>
    <span class="token punctuation">{</span> <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _chatRoom<span class="token punctuation">[</span>connectionId<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name">User<span class="token punctuation">?</span></span> <span class="token function">Get</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> userId<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> _chatRoom<span class="token punctuation">.</span>Values<span class="token punctuation">.</span><span class="token function">FirstOrDefault</span><span class="token punctuation">(</span>u <span class="token operator">=&gt;</span> u<span class="token punctuation">.</span>UserId <span class="token operator">==</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token keyword">public</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>User<span class="token punctuation">&gt;</span></span> <span class="token function">GetAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> onlineUsers <span class="token operator">=</span> _chatRoom<span class="token punctuation">.</span>Values<span class="token punctuation">.</span><span class="token function">OrderBy</span><span class="token punctuation">(</span>o <span class="token operator">=&gt;</span> o<span class="token punctuation">.</span>InTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> onlineUsers<span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">AddOrUpdate</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> connectionId<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> userId<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">uint</span></span> type <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _chatRoom<span class="token punctuation">.</span><span class="token function">AddOrUpdate</span><span class="token punctuation">(</span>connectionId<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            UserId <span class="token operator">=</span> userId<span class="token punctuation">,</span>
            ConnectionId <span class="token operator">=</span> connectionId<span class="token punctuation">,</span>
            UserType <span class="token operator">=</span> type<span class="token punctuation">,</span>
            InTime <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span>TimeFormat<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>k<span class="token punctuation">,</span> o<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
        <span class="token punctuation">{</span>
            o<span class="token punctuation">.</span>UserId <span class="token operator">=</span> userId<span class="token punctuation">;</span>
            o<span class="token punctuation">.</span>ConnectionId <span class="token operator">=</span> connectionId<span class="token punctuation">;</span>
            o<span class="token punctuation">.</span>UserType <span class="token operator">=</span> type<span class="token punctuation">;</span>
            o<span class="token punctuation">.</span>InTime <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span>TimeFormat<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> ConnectionId <span class="token operator">=</span> connectionId<span class="token punctuation">,</span> UserType <span class="token operator">=</span> type <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        _logger<span class="token punctuation">.</span><span class="token function">LogInformation</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;房间管理:用户ID:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">userId</span><span class="token punctuation">}</span></span><span class="token string">,用户类型:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">type</span><span class="token punctuation">}</span></span><span class="token string">进入房间&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Remove</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> connectionId<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>_chatRoom<span class="token punctuation">.</span><span class="token function">TryRemove</span><span class="token punctuation">(</span>connectionId<span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token class-name"><span class="token keyword">var</span></span> v<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            _logger<span class="token punctuation">.</span><span class="token function">LogInformation</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;房间管理:移除用户ID:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">v<span class="token punctuation">.</span>UserId</span><span class="token punctuation">}</span></span><span class="token string">,用户类型:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">v<span class="token punctuation">.</span>UserType</span><span class="token punctuation">}</span></span><span class="token string">,进入时间:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">v<span class="token punctuation">.</span>InTime</span><span class="token punctuation">}</span></span><span class="token string">,离开时间:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span>TimeFormat<span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            _logger<span class="token punctuation">.</span><span class="token function">LogInformation</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;房间管理:移除用户失败&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>重写<code>OnConnectedAsync</code></li></ul><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">OnConnectedAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> ctx <span class="token operator">=</span> Context<span class="token punctuation">.</span><span class="token function">GetHttpContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ctx <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ctx<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Query<span class="token punctuation">.</span><span class="token function">TryGetValue</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token class-name"><span class="token keyword">var</span></span> oName<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            _logger<span class="token punctuation">.</span><span class="token function">LogWarning</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;非法用户连接到服务中心&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            Context<span class="token punctuation">.</span><span class="token function">Abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name"><span class="token keyword">var</span></span> userId <span class="token operator">=</span> oName<span class="token punctuation">.</span><span class="token function">FirstOrDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrEmpty</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            _logger<span class="token punctuation">.</span><span class="token function">LogWarning</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;非法用户连接到服务中心&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            Context<span class="token punctuation">.</span><span class="token function">Abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name"><span class="token keyword">var</span></span> type <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Query<span class="token punctuation">.</span><span class="token function">TryGetValue</span><span class="token punctuation">(</span><span class="token string">&quot;type&quot;</span><span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token class-name"><span class="token keyword">var</span></span> oType<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            type <span class="token operator">=</span> oType<span class="token punctuation">.</span><span class="token function">FirstOrDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        _logger<span class="token punctuation">.</span><span class="token function">LogInformation</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;用户ID[</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">userId</span><span class="token punctuation">}</span></span><span class="token string">],ID[</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">Context<span class="token punctuation">.</span>ConnectionId</span><span class="token punctuation">}</span></span><span class="token string">],用户类型:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">type</span><span class="token punctuation">}</span></span><span class="token string">连接到服务中心&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        _chatManager<span class="token punctuation">.</span><span class="token function">AddOrUpdate</span><span class="token punctuation">(</span>Context<span class="token punctuation">.</span>ConnectionId<span class="token punctuation">,</span> userId<span class="token operator">!</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrEmpty</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">?</span> <span class="token number">0u</span> <span class="token punctuation">:</span> <span class="token number">1u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">await</span> <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">OnConnectedAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>重写<code>OnDisconnectedAsync</code></li></ul><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name">Task</span> <span class="token function">OnDisconnectedAsync</span><span class="token punctuation">(</span><span class="token class-name">Exception<span class="token punctuation">?</span></span> exception<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> ctx <span class="token operator">=</span> Context<span class="token punctuation">.</span><span class="token function">GetHttpContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ctx <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Query<span class="token punctuation">.</span><span class="token function">TryGetValue</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token class-name"><span class="token keyword">var</span></span> oName<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            _logger<span class="token punctuation">.</span><span class="token function">LogInformation</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;用户[</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">oName<span class="token punctuation">.</span><span class="token function">FirstOrDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string">],ID[</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">Context<span class="token punctuation">.</span>ConnectionId</span><span class="token punctuation">}</span></span><span class="token string">]断开连接&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        _chatManager<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>Context<span class="token punctuation">.</span>ConnectionId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">OnDisconnectedAsync</span><span class="token punctuation">(</span>exception<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>向其他客户端发送消息,并返回结果</li></ul><p><code>6行</code>:获取调用者用户,通过<code>user</code>指定用户</p><p><code>9行</code>:没法用户直接返回</p><p><code>17</code>:通过重写<code>OnConnectedAsync</code>获取到当前用户的ID并且管理起来</p><p><code>21</code>:客户端A向客户端发消息时，客户端B不在线时,需要告知客户端A。</p><p><code>23</code>:向客户端B发送消息</p><p><code>27</code>:当客户端B接收消息并返回它的消息</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token function">SendToClientAndReceive</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> clientId<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> message<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> ctx <span class="token operator">=</span> Context<span class="token punctuation">.</span><span class="token function">GetHttpContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ctx <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ctx<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Query<span class="token punctuation">.</span><span class="token function">TryGetValue</span><span class="token punctuation">(</span>Contracts<span class="token punctuation">.</span>FLAG_NAME<span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token class-name"><span class="token keyword">var</span></span> oName<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            _logger<span class="token punctuation">.</span><span class="token function">LogInformation</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;非法用户向客户端发送消息：</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">message</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token string">&quot;非法用户&quot;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token keyword">var</span></span> cancelTokenSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CancellationTokenSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            cancelTokenSource<span class="token punctuation">.</span><span class="token function">CancelAfter</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token class-name"><span class="token keyword">var</span></span> currentClientUser <span class="token operator">=</span> oName<span class="token punctuation">.</span><span class="token function">FirstOrDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">var</span></span> host <span class="token operator">=</span> _chatManager<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>clientId<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>host <span class="token keyword">is</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                _logger<span class="token punctuation">.</span><span class="token function">LogInformation</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;客户端用户[</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">currentClientUser</span><span class="token punctuation">}</span></span><span class="token string">]向客户端[</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">clientId</span><span class="token punctuation">}</span></span><span class="token string">]发送消息：</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">message</span><span class="token punctuation">}</span></span><span class="token string">,但客户端[</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">clientId</span><span class="token punctuation">}</span></span><span class="token string">]不在线&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token interpolation-string"><span class="token string">$&quot;客户端[</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">clientId</span><span class="token punctuation">}</span></span><span class="token string">]不在线&quot;</span></span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">await</span> Clients<span class="token punctuation">.</span><span class="token function">Client</span><span class="token punctuation">(</span>host<span class="token punctuation">.</span>ConnectionId<span class="token operator">!</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetHubMessage</span><span class="token punctuation">(</span>currentClientUser<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
            _logger<span class="token punctuation">.</span><span class="token function">LogInformation</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;客户端用户[</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">currentClientUser</span><span class="token punctuation">}</span></span><span class="token string">]向成功客户端[</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">clientId</span><span class="token punctuation">}</span></span><span class="token string">]发送消息：</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">message</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            
            <span class="token comment">//来自客户端的响应</span>
            <span class="token class-name"><span class="token keyword">var</span></span> msg <span class="token operator">=</span> <span class="token keyword">await</span> Clients<span class="token punctuation">.</span>Caller<span class="token punctuation">.</span><span class="token function">InvokeClientMessage</span><span class="token punctuation">(</span>cancelTokenSource<span class="token punctuation">.</span>Token<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> msg<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token string">&quot;非法用户&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><div class="highlight-line"> </div><br><br><div class="highlight-line"> </div><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><br><div class="highlight-line"> </div><br><div class="highlight-line"> </div><br><br><br><div class="highlight-line"> </div><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="集成到api中" tabindex="-1"><a class="header-anchor" href="#集成到api中"><span>集成到API中</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddSingleton</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ChatManager<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddSingleton</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ConcurrentDictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> User<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddSignalR</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddCors</span><span class="token punctuation">(</span>option <span class="token operator">=&gt;</span> option<span class="token punctuation">.</span><span class="token function">AddPolicy</span><span class="token punctuation">(</span><span class="token string">&quot;SignalR&quot;</span><span class="token punctuation">,</span> builder <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    builder<span class="token punctuation">.</span><span class="token function">AllowAnyMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">AllowAnyHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">SetIsOriginAllowed</span><span class="token punctuation">(</span>origin <span class="token operator">=&gt;</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">AllowCredentials</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token range operator">..</span><span class="token punctuation">.</span>

<span class="token class-name"><span class="token keyword">var</span></span> app <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">MapHub</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ChatHub<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;/chathub&quot;</span><span class="token punctuation">,</span> options <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    options<span class="token punctuation">.</span>Transports <span class="token operator">=</span> HttpTransportType<span class="token punctuation">.</span>WebSockets <span class="token operator">|</span>
    HttpTransportType<span class="token punctuation">.</span>LongPolling<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">UseCors</span><span class="token punctuation">(</span><span class="token string">&quot;SignalR&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="完整program" tabindex="-1"><a class="header-anchor" href="#完整program"><span>完整Program</span></a></h3><p>完整<code>Program.cs</code></p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">Microsoft<span class="token punctuation">.</span>AspNetCore<span class="token punctuation">.</span>Http<span class="token punctuation">.</span>Connections</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">Microsoft<span class="token punctuation">.</span>AspNetCore<span class="token punctuation">.</span>Identity</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">Microsoft<span class="token punctuation">.</span>AspNetCore<span class="token punctuation">.</span>Mvc</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">Serilog</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">SignalrApi</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">SignalrApi<span class="token punctuation">.</span>Models</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Concurrent</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text<span class="token punctuation">.</span>Json<span class="token punctuation">.</span>Serialization</span><span class="token punctuation">;</span>

Log<span class="token punctuation">.</span>Logger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">LoggerConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span>WriteTo<span class="token punctuation">.</span><span class="token function">Console</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span>WriteTo<span class="token punctuation">.</span><span class="token function">Async</span><span class="token punctuation">(</span>f <span class="token operator">=&gt;</span> f<span class="token punctuation">.</span><span class="token function">File</span><span class="token punctuation">(</span><span class="token string">&quot;Logs\\\\log-.txt&quot;</span><span class="token punctuation">,</span>
    <span class="token named-parameter punctuation">outputTemplate</span><span class="token punctuation">:</span> <span class="token string">&quot;{Timestamp:yyyy-MM-dd HH:mm:ss.fff zzz}[{Level:u3}] {Message:lj}{NewLine}{Exception}&quot;</span><span class="token punctuation">,</span>
    <span class="token named-parameter punctuation">rollingInterval</span><span class="token punctuation">:</span> RollingInterval<span class="token punctuation">.</span>Day<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span>MinimumLevel<span class="token punctuation">.</span><span class="token function">Information</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">CreateLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">try</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> builder <span class="token operator">=</span> WebApplication<span class="token punctuation">.</span><span class="token function">CreateSlimBuilder</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    builder<span class="token punctuation">.</span>Host<span class="token punctuation">.</span><span class="token function">UseSerilog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//日志</span>
    builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddSingleton</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ChatManager<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddSingleton</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ConcurrentDictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> User<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddSignalR</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddCors</span><span class="token punctuation">(</span>option <span class="token operator">=&gt;</span> option<span class="token punctuation">.</span><span class="token function">AddPolicy</span><span class="token punctuation">(</span><span class="token string">&quot;SignalR&quot;</span><span class="token punctuation">,</span> builder <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        builder<span class="token punctuation">.</span><span class="token function">AllowAnyMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">AllowAnyHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">SetIsOriginAllowed</span><span class="token punctuation">(</span>origin <span class="token operator">=&gt;</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">AllowCredentials</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">ConfigureHttpJsonOptions</span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        options<span class="token punctuation">.</span>SerializerOptions<span class="token punctuation">.</span>TypeInfoResolverChain<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> AppJsonSerializerContext<span class="token punctuation">.</span>Default<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name"><span class="token keyword">var</span></span> app <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    app<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">MapHub</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ChatHub<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;/chathub&quot;</span><span class="token punctuation">,</span> options <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        options<span class="token punctuation">.</span>Transports <span class="token operator">=</span> HttpTransportType<span class="token punctuation">.</span>WebSockets <span class="token operator">|</span>
        HttpTransportType<span class="token punctuation">.</span>LongPolling<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    app<span class="token punctuation">.</span><span class="token function">UseCors</span><span class="token punctuation">(</span><span class="token string">&quot;SignalR&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    app<span class="token punctuation">.</span><span class="token function">UseSerilogRequestLogging</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    app<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>ex<span class="token punctuation">,</span> <span class="token string">&quot;Application terminated unexpectedly&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">finally</span>
<span class="token punctuation">{</span>
    Log<span class="token punctuation">.</span><span class="token function">CloseAndFlush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">JsonSerializable</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">List<span class="token punctuation">&lt;</span>User<span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">internal</span> <span class="token keyword">partial</span> <span class="token keyword">class</span> <span class="token class-name">AppJsonSerializerContext</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">JsonSerializerContext</span></span>
<span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="客户终端" tabindex="-1"><a class="header-anchor" href="#客户终端"><span>客户终端</span></a></h3><ul><li>主程序</li></ul><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">Microsoft<span class="token punctuation">.</span>AspNetCore<span class="token punctuation">.</span>SignalR<span class="token punctuation">.</span>Client</span><span class="token punctuation">;</span>

<span class="token class-name">HubConnection</span> connection<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">string</span></span> temp<span class="token operator">=</span><span class="token keyword">string</span><span class="token punctuation">.</span>Empty<span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> suc<span class="token operator">=</span><span class="token keyword">await</span> <span class="token function">ConnectAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>suc<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token class-name">ConsoleKeyInfo</span> pressKey<span class="token punctuation">;</span>
Console<span class="token punctuation">.</span>CancelKeyPress <span class="token operator">+=</span> Console_CancelKeyPress<span class="token punctuation">;</span>

<span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Console_CancelKeyPress</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span><span class="token punctuation">?</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">ConsoleCancelEventArgs</span> e<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    e<span class="token punctuation">.</span>Cancel <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">do</span>
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;按Q键退出程序，或CTRL+C中断操作&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    pressKey <span class="token operator">=</span> Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">&quot;向客户端B发送消息:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> msg <span class="token operator">=</span> Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>connection <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> clientB <span class="token operator">=</span><span class="token keyword">await</span> connection<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">InvokeAsync</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;SendToClientAndReceive&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;clientB&quot;</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>clientB<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>pressKey<span class="token punctuation">.</span>Key <span class="token operator">!=</span> ConsoleKey<span class="token punctuation">.</span>Q<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> <span class="token function">CloseConnectionAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>连接</li></ul><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span><span class="token keyword">bool</span><span class="token punctuation">&gt;</span></span> <span class="token function">ConnectAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">try</span>
    <span class="token punctuation">{</span>
        connection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HubConnectionBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">WithUrl</span><span class="token punctuation">(</span><span class="token string">&quot;http://localhost:5214/chathub?user=clientB&amp;type=1&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">WithAutomaticReconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        connection<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">On</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;GetHubMessage&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>userId<span class="token punctuation">,</span> msg<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
        <span class="token punctuation">{</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;来自客户端B[</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">userId</span><span class="token punctuation">}</span></span><span class="token string">]消息:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">msg</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        connection<span class="token punctuation">.</span><span class="token function">On</span><span class="token punctuation">(</span><span class="token string">&quot;InvokeClientMessage&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token string">&quot;客户端B已收到&quot;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">await</span> connection<span class="token punctuation">.</span><span class="token function">StartAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;客户端[clientB]成功连接到chathub&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;启动异常:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">ex<span class="token punctuation">.</span>Message</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>断开连接</li></ul><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">CloseConnectionAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>connection <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>connection<span class="token punctuation">.</span>State <span class="token operator">!=</span> HubConnectionState<span class="token punctuation">.</span>Disconnected<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">await</span> connection<span class="token punctuation">.</span><span class="token function">StopAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">await</span> connection<span class="token punctuation">.</span><span class="token function">DisposeAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;离开chathub&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="api调用" tabindex="-1"><a class="header-anchor" href="#api调用"><span>API调用</span></a></h3><p>虽然使用了<code>SignalR</code>,并且也提供了其他平台的支持，但是也可以对<code>SignalR</code>部分封装，通过API的方式使用。</p><ul><li>消息载体</li></ul><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">record</span> <span class="token class-name">PostMsg</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> receiver<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> sender<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> sendMsg<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>查看所有在线客户端</li></ul><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> chatApi <span class="token operator">=</span> app<span class="token punctuation">.</span><span class="token function">MapGroup</span><span class="token punctuation">(</span><span class="token string">&quot;/chat&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
chatApi<span class="token punctuation">.</span><span class="token function">MapGet</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">FromServices</span></span><span class="token punctuation">]</span> <span class="token class-name">ChatManager</span> chatManager<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>Results<span class="token punctuation">.</span><span class="token function">Ok</span><span class="token punctuation">(</span>chatManager<span class="token punctuation">.</span><span class="token function">GetAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://nas.ilyl.life:8092/dotnet/signalr1.png" alt="在线" width="420" height="200" tabindex="0" loading="lazy"><figcaption>在线</figcaption></figure><ul><li>向指定客户端发送消息</li></ul><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code> chatApi<span class="token punctuation">.</span><span class="token function">MapPost</span><span class="token punctuation">(</span><span class="token string">&quot;/SendTo&quot;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token class-name">PostMsg</span> msg<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">FromServices</span></span><span class="token punctuation">]</span> <span class="token class-name">IHubContext<span class="token punctuation">&lt;</span>ChatHub<span class="token punctuation">&gt;</span></span> ctx<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">FromServices</span></span><span class="token punctuation">]</span> <span class="token class-name">ChatManager</span> chatManager<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
 <span class="token punctuation">{</span>
     <span class="token class-name"><span class="token keyword">var</span></span> host <span class="token operator">=</span> chatManager<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>receiver<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token keyword">if</span> <span class="token punctuation">(</span>host <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
     <span class="token punctuation">{</span>
         <span class="token keyword">await</span> ctx<span class="token punctuation">.</span>Clients<span class="token punctuation">.</span><span class="token function">Client</span><span class="token punctuation">(</span>host<span class="token punctuation">.</span>ConnectionId<span class="token operator">!</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SendAsync</span><span class="token punctuation">(</span>Contracts<span class="token punctuation">.</span>SendClientMessage<span class="token punctuation">,</span> msg<span class="token punctuation">.</span>sender<span class="token punctuation">,</span> msg<span class="token punctuation">.</span>sendMsg<span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token keyword">return</span> Results<span class="token punctuation">.</span><span class="token function">Ok</span><span class="token punctuation">(</span><span class="token string">&quot;Ok&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
     <span class="token keyword">return</span> Results<span class="token punctuation">.</span><span class="token function">Ok</span><span class="token punctuation">(</span><span class="token string">&quot;Offline&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://nas.ilyl.life:8092/dotnet/signalr2.gif" alt="api发送消息" width="420" height="200" tabindex="0" loading="lazy"><figcaption>api发送消息</figcaption></figure><ul><li>向指定客户端发送消息并接收客户端响应消息</li></ul><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code> chatApi<span class="token punctuation">.</span><span class="token function">MapPost</span><span class="token punctuation">(</span><span class="token string">&quot;/SendAndReceive&quot;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token class-name">PostMsg</span> msg<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">FromServices</span></span><span class="token punctuation">]</span> <span class="token class-name">IHubContext<span class="token punctuation">&lt;</span>ChatHub<span class="token punctuation">&gt;</span></span> ctx<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">FromServices</span></span><span class="token punctuation">]</span> <span class="token class-name">ChatManager</span> chatManager<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
 <span class="token punctuation">{</span>
     <span class="token class-name"><span class="token keyword">var</span></span> host <span class="token operator">=</span> chatManager<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>receiver<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token keyword">if</span> <span class="token punctuation">(</span>host <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
     <span class="token punctuation">{</span>
         <span class="token keyword">await</span> ctx<span class="token punctuation">.</span>Clients<span class="token punctuation">.</span><span class="token function">Client</span><span class="token punctuation">(</span>host<span class="token punctuation">.</span>ConnectionId<span class="token operator">!</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SendAsync</span><span class="token punctuation">(</span>Contracts<span class="token punctuation">.</span>SendClientMessage<span class="token punctuation">,</span> msg<span class="token punctuation">.</span>sender<span class="token punctuation">,</span> msg<span class="token punctuation">.</span>sendMsg<span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token class-name"><span class="token keyword">var</span></span> cancelTokenSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CancellationTokenSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         cancelTokenSource<span class="token punctuation">.</span><span class="token function">CancelAfter</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token class-name"><span class="token keyword">var</span></span> ret <span class="token operator">=</span> <span class="token keyword">await</span> ctx<span class="token punctuation">.</span>Clients<span class="token punctuation">.</span><span class="token function">Client</span><span class="token punctuation">(</span>host<span class="token punctuation">.</span>ConnectionId<span class="token operator">!</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">InvokeAsync</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>Contracts<span class="token punctuation">.</span>GetClientMessage<span class="token punctuation">,</span>cancelTokenSource<span class="token punctuation">.</span>Token<span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token keyword">return</span> Results<span class="token punctuation">.</span><span class="token function">Ok</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
     <span class="token keyword">return</span> Results<span class="token punctuation">.</span><span class="token function">Ok</span><span class="token punctuation">(</span><span class="token string">&quot;Offline&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://nas.ilyl.life:8092/dotnet/signalr3.gif" alt="api发送消息并接收客户端响应" width="420" height="200" tabindex="0" loading="lazy"><figcaption>api发送消息并接收客户端响应</figcaption></figure><h2 id="其他" tabindex="-1"><a class="header-anchor" href="#其他"><span>其他</span></a></h2>`,74),S={href:"https://github.com/ly2jr/SignalrApi",target:"_blank",rel:"noopener noreferrer"};function I(T,H){const p=o("ExternalLinkIcon"),e=o("Mermaid");return l(),i("div",null,[n("p",null,[n("a",k,[a("SignalR"),s(p)]),a("是一个很好的实时应用。")]),r,s(e,{id:"mermaid-20",code:"eJzT1dXlKsksyUm1Uni2tfH5im4ukEhaTn55ckZiUYlCiAsXl4KCR2mSgo2unq6dQoDz03WLnnVsf756PYq4Y15KUX5mCnZJT/9ghAQAUMkshg=="}),d,n("p",null,[a("在于Clients."),n("a",v,[a("客户端对象"),s(p)]),a("。")]),m,n("ul",null,[n("li",null,[g,s(e,{id:"mermaid-106",code:"eJzT1dXlKsksyUm1Uniyo+H56vVP+ye+39MDYT+bso0LpCAtJ788OSOxqETBJ4jr6bpFzzq2A2UddfWAip9t63jWuF5P186jNIkLiBV09Z71LQXqhEsowHU4cQEAFtg4Vg=="}),b]),n("li",null,[h,s(e,{id:"mermaid-149",code:"eJzT1dXlKsksyUm1Uniyo+H56vVP+yc+29bxrHH9+z09T3duez57y7O+pU8n9z7dNeVxQyNMzapnU7ZBlHGBTEjLyS9PzkgsKlHwCeJ6um7Rs47tQGWOCrp6cOP0dO0UPEqTuIAYKAw0E24CSAauxwmqAKjvZUPjs44JT7vmAxUgzOQCALb5YPs="}),y]),n("li",null,[f,s(e,{id:"mermaid-181",code:"eJzT1dXlKsksyUm1Uniyo+H56vVP+yc+29bxrHH9+z09T3due7pv+tOODU/7lwFln+xYBVTwfFbL03Xznk3f9nRy79NdU7hAJqTl5JcnZyQWlSj4BHE9XbfoWcd2oEpHBV09uHF6unYKHqVJXEAMFH7Wt/TZlG0IGbgeJ4R2J6C65wvXvVi35On2TRAN2AxBqIcbh3ABFwBF9n0G"}),w])]),n("h3",C,[n("a",A,[n("span",null,[n("a",q,[a("强类型中心"),s(p)])])])]),x,n("p",null,[n("a",S,[a("示例源代码地址"),s(p)])])])}const R=c(u,[["render",I],["__file","signalr.html.vue"]]),O=JSON.parse('{"path":"/tools/csharp/signalr.html","title":"Signalr","lang":"zh-CN","frontmatter":{"title":"Signalr","date":"2023-11-28T00:00:00.000Z","editLink":false,"footer":false,"isOriginal":true,"category":["Signalr"],"tag":["C#"],"description":"SignalR是一个很好的实时应用。 并且提供Android和IOS以及Web相关包。但是文档有点抽象，除非自己下手写才能更深的理解，这里疏浅的总结几个点，更快的理解SignalR，并配上示例代码。 要点 提示 Hub抽象代理，对参数名，参数类型需要完全一致 SignalR通信围绕Hub展开，高度抽象，包括几个方面 中心 Hub提供两个代理方法, 发消...","head":[["meta",{"property":"og:url","content":"https://ilyl.life/tools/csharp/signalr.html"}],["meta",{"property":"og:site_name","content":"乌龙茶有点甜"}],["meta",{"property":"og:title","content":"Signalr"}],["meta",{"property":"og:description","content":"SignalR是一个很好的实时应用。 并且提供Android和IOS以及Web相关包。但是文档有点抽象，除非自己下手写才能更深的理解，这里疏浅的总结几个点，更快的理解SignalR，并配上示例代码。 要点 提示 Hub抽象代理，对参数名，参数类型需要完全一致 SignalR通信围绕Hub展开，高度抽象，包括几个方面 中心 Hub提供两个代理方法, 发消..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://nas.ilyl.life:8092/dotnet/signalr.gif =420x200"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-29T08:46:13.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"Signalr"}],["meta",{"property":"article:author","content":"乌龙茶"}],["meta",{"property":"article:tag","content":"C#"}],["meta",{"property":"article:published_time","content":"2023-11-28T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-11-29T08:46:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Signalr\\",\\"image\\":[\\"https://nas.ilyl.life:8092/dotnet/signalr.gif =420x200\\",\\"https://nas.ilyl.life:8092/dotnet/signalr1.png =420x200\\",\\"https://nas.ilyl.life:8092/dotnet/signalr2.gif =420x200\\",\\"https://nas.ilyl.life:8092/dotnet/signalr3.gif =420x200\\"],\\"datePublished\\":\\"2023-11-28T00:00:00.000Z\\",\\"dateModified\\":\\"2023-11-29T08:46:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"乌龙茶\\",\\"url\\":\\"https://ilyl.life\\",\\"email\\":\\"mailto:982474256@qq.com\\"}]}"]]},"headers":[{"level":2,"title":"要点","slug":"要点","link":"#要点","children":[{"level":3,"title":"中心","slug":"中心","link":"#中心","children":[]},{"level":3,"title":"客户端","slug":"客户端","link":"#客户端","children":[]},{"level":3,"title":"强类型中心","slug":"强类型中心","link":"#强类型中心","children":[]}]},{"level":2,"title":"实时通信示例","slug":"实时通信示例","link":"#实时通信示例","children":[{"level":3,"title":"日志","slug":"日志","link":"#日志","children":[]},{"level":3,"title":"ChatHub","slug":"chathub","link":"#chathub","children":[]},{"level":3,"title":"集成到API中","slug":"集成到api中","link":"#集成到api中","children":[]},{"level":3,"title":"完整Program","slug":"完整program","link":"#完整program","children":[]},{"level":3,"title":"客户终端","slug":"客户终端","link":"#客户终端","children":[]},{"level":3,"title":"API调用","slug":"api调用","link":"#api调用","children":[]}]},{"level":2,"title":"其他","slug":"其他","link":"#其他","children":[]}],"git":{"createdTime":1701164938000,"updatedTime":1701247573000,"contributors":[{"name":"乌龙茶","email":"982474256@qq.com","commits":2}]},"readingTime":{"minutes":9.43,"words":2829},"filePathRelative":"tools/csharp/signalr.md","localizedDate":"2023年11月28日","excerpt":"<p><a href=\\"https://learn.microsoft.com/zh-cn/aspnet/core/signalr/introduction?view=aspnetcore-8.0\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">SignalR</a>是一个很好的实时应用。</p>\\n<p>并且提供Android和IOS以及Web相关包。但是文档有点抽象，除非自己下手写才能更深的理解，这里疏浅的总结几个点，更快的理解SignalR，并配上示例代码。</p>\\n<h2>要点</h2>\\n<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">提示</p>\\n<p>Hub抽象代理，对参数名，参数类型需要完全一致</p>\\n</div>","autoDesc":true}');export{R as comp,O as data};
