const e=JSON.parse('{"key":"v-ad3b5bda","path":"/cs/design-pattern/visitor.html","title":"访问者模式","lang":"zh-CN","frontmatter":{"title":"访问者模式","date":"2023-06-17T00:00:00.000Z","dir.order":23,"order":23,"editLink":false,"footer":false,"category":["设计模式"],"tag":["设计模式"],"description":"参与此模式的类和对象包括： Visitor(Visitor) 为对象结构中的每个ConcrteElement类声明一个访问操作。该操作的名称和签名标识了向访问者发送访问请求的类。这让访问者可以确定被访问元素的具体类。然后访问者可以通过其特定的界面直接访问元素。 ConcreteVisitor(IncomeVisitor,VacationVisitor)...","head":[["meta",{"property":"og:url","content":"https://ilyl.life/cs/design-pattern/visitor.html"}],["meta",{"property":"og:site_name","content":"乌龙茶有点甜"}],["meta",{"property":"og:title","content":"访问者模式"}],["meta",{"property":"og:description","content":"参与此模式的类和对象包括： Visitor(Visitor) 为对象结构中的每个ConcrteElement类声明一个访问操作。该操作的名称和签名标识了向访问者发送访问请求的类。这让访问者可以确定被访问元素的具体类。然后访问者可以通过其特定的界面直接访问元素。 ConcreteVisitor(IncomeVisitor,VacationVisitor)..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-07-21T07:17:50.000Z"}],["meta",{"property":"article:author","content":"乌龙茶"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:published_time","content":"2023-06-17T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-07-21T07:17:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"访问者模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-06-17T00:00:00.000Z\\",\\"dateModified\\":\\"2023-07-21T07:17:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"乌龙茶\\",\\"url\\":\\"https://ilyl.life\\",\\"email\\":\\"mailto:982474256@qq.com\\"}]}"]]},"headers":[],"git":{"createdTime":1687005402000,"updatedTime":1689923870000,"contributors":[{"name":"乌龙茶","email":"982474256@qq.com","commits":2}]},"readingTime":{"minutes":2.87,"words":860},"filePathRelative":"cs/design-pattern/visitor.md","localizedDate":"2023年6月17日","excerpt":"<p>参与此模式的类和对象包括：</p>\\n<ul>\\n<li>\\n<p>Visitor(<code>Visitor</code>)</p>\\n<ul>\\n<li>为对象结构中的每个ConcrteElement类声明一个访问操作。该操作的名称和签名标识了向访问者发送访问请求的类。这让访问者可以确定被访问元素的具体类。然后访问者可以通过其特定的界面直接访问元素。</li>\\n</ul>\\n</li>\\n<li>\\n<p>ConcreteVisitor(<code>IncomeVisitor</code>,<code>VacationVisitor</code>)</p>\\n<ul>\\n<li>实现访问者声明的每个操作。每个操作都实现了为结构中的相应类或对象定义的算法片段。ConcreteVisitor为算法提供上下文并存储其本地状态。这个状态通常会在结构的遍历过程中累积结果。</li>\\n</ul>\\n</li>\\n<li>\\n<p>Element(<code>Element</code>)</p>\\n<ul>\\n<li>定义一个以访问者为参数的Accept操作。</li>\\n</ul>\\n</li>\\n<li>\\n<p>ConcreteElement(<code>Employee</code>)</p>\\n<ul>\\n<li>实现以访问者为参数的Accept操作。</li>\\n</ul>\\n</li>\\n<li>\\n<p>ObjectStructure(<code>Employees</code>)</p>\\n<ul>\\n<li>可以枚举它的元素。</li>\\n<li>可以提供高级界面以允许访问者访问其元素。</li>\\n<li>可以是组合(模式)或集合，例如列表或集合。</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}');export{e as data};
