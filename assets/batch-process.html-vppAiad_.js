const e=JSON.parse('{"key":"v-202b37d8","path":"/tools/csharp/batch-process.html","title":"批量赋取值","lang":"zh-CN","frontmatter":{"title":"批量赋取值","date":"2023-12-11T00:00:00.000Z","editLink":false,"footer":false,"isOriginal":true,"category":["工具箱"],"tag":["Winform"],"description":"在Winform中常见的一个功能是配置，需要赋值取值，而且还是大批量的地方，一个一个手动处理非常繁琐。 如何进行批量化一键赋值和一键取值，更近一步的衍生，就是一个标准的动态模板功能。 以批量赋值取值为例进行说明。 设置基类用户控件 设置基类控件为了适应不同的子控件。 新增了一个属性Key,一个GetValue()和一个SetValue()方法。 Key用于与数据库字段名匹配 GetValue方法用户获取用户输入的值","head":[["meta",{"property":"og:url","content":"https://ilyl.life/tools/csharp/batch-process.html"}],["meta",{"property":"og:site_name","content":"乌龙茶有点甜"}],["meta",{"property":"og:title","content":"批量赋取值"}],["meta",{"property":"og:description","content":"在Winform中常见的一个功能是配置，需要赋值取值，而且还是大批量的地方，一个一个手动处理非常繁琐。 如何进行批量化一键赋值和一键取值，更近一步的衍生，就是一个标准的动态模板功能。 以批量赋值取值为例进行说明。 设置基类用户控件 设置基类控件为了适应不同的子控件。 新增了一个属性Key,一个GetValue()和一个SetValue()方法。 Key用于与数据库字段名匹配 GetValue方法用户获取用户输入的值"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-18T03:13:08.000Z"}],["meta",{"property":"article:author","content":"乌龙茶"}],["meta",{"property":"article:tag","content":"Winform"}],["meta",{"property":"article:published_time","content":"2023-12-11T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-12-18T03:13:08.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"批量赋取值\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-12-11T00:00:00.000Z\\",\\"dateModified\\":\\"2023-12-18T03:13:08.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"乌龙茶\\",\\"url\\":\\"https://ilyl.life\\",\\"email\\":\\"mailto:982474256@qq.com\\"}]}"]]},"headers":[{"level":2,"title":"设置基类用户控件","slug":"设置基类用户控件","link":"#设置基类用户控件","children":[]},{"level":2,"title":"继承BaseControl添加一个名为TextControl的用户控件","slug":"继承basecontrol添加一个名为textcontrol的用户控件","link":"#继承basecontrol添加一个名为textcontrol的用户控件","children":[]},{"level":2,"title":"设计TextControl用户控件","slug":"设计textcontrol用户控件","link":"#设计textcontrol用户控件","children":[]},{"level":2,"title":"重写基类控件方法","slug":"重写基类控件方法","link":"#重写基类控件方法","children":[]},{"level":2,"title":"设计配置表","slug":"设计配置表","link":"#设计配置表","children":[]},{"level":2,"title":"在窗体中设计布局","slug":"在窗体中设计布局","link":"#在窗体中设计布局","children":[]},{"level":2,"title":"赋值取值","slug":"赋值取值","link":"#赋值取值","children":[]}],"git":{"createdTime":1702263126000,"updatedTime":1702869188000,"contributors":[{"name":"乌龙茶","email":"982474256@qq.com","commits":2}]},"readingTime":{"minutes":1.9,"words":570},"filePathRelative":"tools/csharp/batch-process.md","localizedDate":"2023年12月11日","excerpt":"<p>在Winform中常见的一个功能是配置，需要赋值取值，而且还是大批量的地方，一个一个手动处理非常繁琐。</p>\\n<p>如何进行批量化一键赋值和一键取值，更近一步的衍生，就是一个标准的动态模板功能。</p>\\n<p>以批量赋值取值为例进行说明。</p>\\n<h2> 设置基类用户控件</h2>\\n<p>设置基类控件为了适应不同的子控件。</p>\\n<p>新增了一个属性<code>Key</code>,一个<code>GetValue()</code>和一个<code>SetValue()</code>方法。</p>\\n<p><code>Key</code>用于与数据库字段名匹配</p>\\n<p><code>GetValue</code>方法用户获取用户输入的值</p>","autoDesc":true}');export{e as data};
