const e=JSON.parse('{"key":"v-6612afdb","path":"/cs/design-pattern/observer.html","title":"观察者模式","lang":"zh-CN","frontmatter":{"title":"观察者模式","date":"2023-06-17T00:00:00.000Z","dir.order":16,"order":16,"editLink":false,"footer":false,"category":["设计模式"],"tag":["设计模式"],"description":"参与此模式的类和对象包括： Subject(Stock) 知道它的观察者。任意数量的Observer对象都可以观察一个主题。 提供了附加和分离观察者对象的接口。 ConcreteSubject(IBM) 将感兴趣的状态存储到ConcreteObserver。 当状态改变时向观察者发送通知。 Observer(IInvestor) 为应该通知主题更改的对象定义更新接口。 ConcreteObserver(Investor) 维护对ConcreteSubject对象的引用。 商店状态应该与主题保存一致。 实现观察者更新接口，使其状态与主体的状态保存一致。","head":[["meta",{"property":"og:url","content":"https://ilyl.life/cs/design-pattern/observer.html"}],["meta",{"property":"og:site_name","content":"乌龙茶有点甜"}],["meta",{"property":"og:title","content":"观察者模式"}],["meta",{"property":"og:description","content":"参与此模式的类和对象包括： Subject(Stock) 知道它的观察者。任意数量的Observer对象都可以观察一个主题。 提供了附加和分离观察者对象的接口。 ConcreteSubject(IBM) 将感兴趣的状态存储到ConcreteObserver。 当状态改变时向观察者发送通知。 Observer(IInvestor) 为应该通知主题更改的对象定义更新接口。 ConcreteObserver(Investor) 维护对ConcreteSubject对象的引用。 商店状态应该与主题保存一致。 实现观察者更新接口，使其状态与主体的状态保存一致。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-07-21T07:17:50.000Z"}],["meta",{"property":"article:author","content":"乌龙茶"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:published_time","content":"2023-06-17T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-07-21T07:17:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"观察者模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-06-17T00:00:00.000Z\\",\\"dateModified\\":\\"2023-07-21T07:17:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"乌龙茶\\",\\"url\\":\\"https://ilyl.life\\",\\"email\\":\\"mailto:982474256@qq.com\\"}]}"]]},"headers":[],"git":{"createdTime":1687005402000,"updatedTime":1689923870000,"contributors":[{"name":"乌龙茶","email":"982474256@qq.com","commits":2}]},"readingTime":{"minutes":2.07,"words":620},"filePathRelative":"cs/design-pattern/observer.md","localizedDate":"2023年6月17日","excerpt":"<p>参与此模式的类和对象包括：</p>\\n<ul>\\n<li>\\n<p>Subject(<code>Stock</code>)</p>\\n<ul>\\n<li>知道它的观察者。任意数量的Observer对象都可以观察一个主题。</li>\\n<li>提供了附加和分离观察者对象的接口。</li>\\n</ul>\\n</li>\\n<li>\\n<p>ConcreteSubject(<code>IBM</code>)</p>\\n<ul>\\n<li>将感兴趣的状态存储到ConcreteObserver。</li>\\n<li>当状态改变时向观察者发送通知。</li>\\n</ul>\\n</li>\\n<li>\\n<p>Observer(<code>IInvestor</code>)</p>\\n<ul>\\n<li>为应该通知主题更改的对象定义更新接口。</li>\\n</ul>\\n</li>\\n<li>\\n<p>ConcreteObserver(<code>Investor</code>)</p>\\n<ul>\\n<li>维护对ConcreteSubject对象的引用。</li>\\n<li>商店状态应该与主题保存一致。</li>\\n<li>实现观察者更新接口，使其状态与主体的状态保存一致。</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}');export{e as data};
