import{_ as c}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,c as d,d as e,a as i,w as a,f as n,e as l,o as u}from"./app-BaXx2_6M.js";const m={},k=l(`<p>默认都是最新的版本</p><ul><li><p><a href="https://visualstudio.microsoft.com/zh-hans/downloads/" target="_blank" rel="noopener noreferrer">Visual Studio 2022</a></p></li><li><p><a href="https://dotnet.microsoft.com/zh-cn/download/dotnet-framework/net48" target="_blank" rel="noopener noreferrer">.NET Framework 4.8</a></p></li><li><p><a href="https://dotnet.microsoft.com/zh-cn/download/dotnet/7.0" target="_blank" rel="noopener noreferrer">.NET 7</a></p></li></ul><p>为什么会出现两个.NET框架？.NET Framework 4.8是为UI准备，并且是通过PictureBox的方式使用。使用第二种方式可以全部改为.NET 7</p><h2 id="软件包" tabindex="-1"><a class="header-anchor" href="#软件包"><span>软件包</span></a></h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p><code>海康SDK</code>必须</p><p>集成到Winform：海康SDK提供的demo就是Winform</p><p>集成到WPF：也可以使用Winform的方式，但是不推荐，现在使用另外一种方式，需要使用FFMPEG，ReactiveUI可选，但是既然上了WPF，那么就装上它。</p></div><ol><li><a href="https://open.hikvision.com/download/5cda567cf47ae80dd41a54b3?type=10" target="_blank" rel="noopener noreferrer">海康SDK</a></li><li><a href="https://ffmpeg.org/" target="_blank" rel="noopener noreferrer">FFMPEG</a></li><li><a href="https://www.reactiveui.net/" target="_blank" rel="noopener noreferrer">ReactiveUI</a></li></ol><h2 id="集成到winform" tabindex="-1"><a class="header-anchor" href="#集成到winform"><span>集成到Winform</span></a></h2><p>海康本身提供了Winfrom的示例，注意的是将<code>头文件</code>文件夹下的所有文件拷贝到项目目录下，记得项目和拷贝的文件分<code>x86</code>和<code>x64</code></p><h2 id="集成到wpf" tabindex="-1"><a class="header-anchor" href="#集成到wpf"><span>集成到WPF</span></a></h2><h3 id="picturebox方式" tabindex="-1"><a class="header-anchor" href="#picturebox方式"><span>PictureBox方式</span></a></h3><div class="hint-container tip"><p class="hint-container-title">提示</p><p>WPF控件没有句柄,通过<a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.windows.forms.integration?view=windowsdesktop-6.0" target="_blank" rel="noopener noreferrer">WindowsFormsIntegration</a>实现WPF与Winform互操作</p><p>反之通过<a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.windows.forms.integration.elementhost?view=windowsdesktop-6.0" target="_blank" rel="noopener noreferrer">ElementHost</a>托管WPF控件</p></div><p>通过PictureBox就是用的传统Winform方式，但是毕竟<a href="https://learn.microsoft.com/zh-cn/dotnet/desktop/wpf/introduction-to-wpf?view=netframeworkdesktop-4.8" target="_blank" rel="noopener noreferrer">WPF</a>和<a href="https://learn.microsoft.com/zh-cn/dotnet/desktop/winforms/?view=netframeworkdesktop-4.8" target="_blank" rel="noopener noreferrer">Winform</a>是两种不同的程序方式，需要适配下。</p><ol><li><p>引用程序集<code>System.Windows.Forms</code>和<code>WindowsFormsIntegration</code></p><div class="language-xaml line-numbers-mode" data-ext="xaml" data-title="xaml"><pre class="language-xaml"><code>xmlns:wf=&quot;clr-namespace:System.Windows.Forms;assembly=System.Windows.Forms&quot;
xmlns:wfi=&quot;clr-namespace:System.Windows.Forms.Integration;assembly=WindowsFormsIntegration&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Nuget包添加<code>Microsoft.Xaml.Behaviors.Wpf</code></p><p>添加行为<a href="https://learn.microsoft.com/zh-cn/dotnet/desktop/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml?view=netframeworkdesktop-4.8" target="_blank" rel="noopener noreferrer">命名空间</a></p><div class="language-xaml line-numbers-mode" data-ext="xaml" data-title="xaml"><pre class="language-xaml"><code>xmlns:i=&quot;http://schemas.microsoft.com/xaml/behaviors&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>添加<code>PictureBox</code>控件</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">wfi:</span>WindowsFormsHost</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">wf:</span>PictureBox</span> <span class="token attr-name"><span class="token namespace">x:</span>Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>videoPictureBox<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">wfi:</span>WindowsFormsHost</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>播放</p><p>这里使用Wpf中的<code>behaviors</code>,将<code>PictureBox</code>控件本身当作参数传递即可。</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span> <span class="token attr-name">Content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>句柄预览<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">i:</span>Interaction.Triggers</span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">i:</span>EventTrigger</span> <span class="token attr-name">EventName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Click<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">i:</span>InvokeCommandAction</span> <span class="token attr-name">Command</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{Binding PlayCommand}<span class="token punctuation">&quot;</span></span> <span class="token attr-name">CommandParameter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{Binding ElementName=videoPictureBox}<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">i:</span>EventTrigger</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">i:</span>Interaction.Triggers</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Button</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="image方式" tabindex="-1"><a class="header-anchor" href="#image方式"><span>Image方式</span></a></h3><figure><img src="https://nas.ilyl.life:8092/wpf/hk_p2.gif" alt="WPF无句柄预览" tabindex="0" loading="lazy"><figcaption>WPF无句柄预览</figcaption></figure><h4 id="关键点" tabindex="-1"><a class="header-anchor" href="#关键点"><span>关键点</span></a></h4><ul><li>FFMPEG</li><li>视频格式</li></ul><p>FFMPEG很强大，但相关资料非常少。</p><p>从NuGet上下载<code>FFmpeg.AutoGen</code>，如果能跑通提供的<a href="https://github.com/Ruslan-B/FFmpeg.AutoGen/tree/master/FFmpeg.AutoGen.Example" target="_blank" rel="noopener noreferrer">官方示例</a>，问题已经解决了60%，在了解相关视频格式问题，已经完成了30%，剩下10%通过<a href="https://github.com/" target="_blank" rel="noopener noreferrer">github</a>和<a href="https://stackoverflow.com/" target="_blank" rel="noopener noreferrer">stackoverflow</a>找相关问题或者案例。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>WPF通过<a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.windows.threading.dispatcher.checkaccess?view=windowsdesktop-7.0" target="_blank" rel="noopener noreferrer">Application.Current.Dispatcher.CheckAccess</a>来判断线程</p><p>Winform则通过<a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.windows.forms.control.invokerequired?view=windowsdesktop-7.0&amp;viewFallbackFrom=net-7.0" target="_blank" rel="noopener noreferrer">Control.InvokeRequired</a></p></div>`,20),h=e("p",null,[n("使用"),e("a",{href:"https://learn.microsoft.com/zh-cn/dotnet/api/system.windows.media.imaging.writeablebitmap?view=windowsdesktop-6.0",target:"_blank",rel:"noopener noreferrer"},"WriteableBitmap"),n("作为Image的数据源")],-1),g=e("div",{class:"language-xaml line-numbers-mode","data-ext":"xaml","data-title":"xaml"},[e("pre",{class:"language-xaml"},[e("code",null,`<Image
      RenderOptions.BitmapScalingMode="HighQuality"
      Source="{Binding VedioSource}"
      Stretch="Fill"
      UseLayoutRounding="True" />
`)]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),f=e("div",{class:"language-csharp line-numbers-mode","data-ext":"cs","data-title":"cs"},[e("pre",{class:"language-csharp"},[e("code",null,[e("span",{class:"token keyword"},"private"),n(),e("span",{class:"token class-name"},"ImageSource"),n(" _vedioSource "),e("span",{class:"token operator"},"="),n(),e("span",{class:"token keyword"},"null"),e("span",{class:"token punctuation"},";"),n(`
`),e("span",{class:"token keyword"},"public"),n(),e("span",{class:"token return-type class-name"},"ImageSource"),n(` VedioSource
`),e("span",{class:"token punctuation"},"{"),n(`
    `),e("span",{class:"token keyword"},"get"),n(),e("span",{class:"token punctuation"},"{"),n(),e("span",{class:"token keyword"},"return"),n(" _vedioSource"),e("span",{class:"token punctuation"},";"),n(),e("span",{class:"token punctuation"},"}"),n(`
    `),e("span",{class:"token keyword"},"set"),n(`
    `),e("span",{class:"token punctuation"},"{"),n(`
        _vedioSource `),e("span",{class:"token operator"},"="),n(),e("span",{class:"token keyword"},"value"),e("span",{class:"token punctuation"},";"),n(`
        PropertyChanged`),e("span",{class:"token punctuation"},"?."),e("span",{class:"token function"},"Invoke"),e("span",{class:"token punctuation"},"("),e("span",{class:"token keyword"},"this"),e("span",{class:"token punctuation"},","),n(),e("span",{class:"token keyword"},"new"),n(),e("span",{class:"token constructor-invocation class-name"},"PropertyChangedEventArgs"),e("span",{class:"token punctuation"},"("),e("span",{class:"token keyword"},"nameof"),e("span",{class:"token punctuation"},"("),n("VedioSource"),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},";"),n(`
    `),e("span",{class:"token punctuation"},"}"),n(`
`),e("span",{class:"token punctuation"},"}"),n(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),v=e("div",{class:"hint-container warning"},[e("p",{class:"hint-container-title"},"注意"),e("ul",null,[e("li",null,[e("p",null,"WriteableBitmap需要在UI线程上声明")]),e("li",null,[e("p",null,"在写入WriteableBitmap时需要判断线程")])])],-1),w=e("li",null,[e("p",null,"使用海康回调模式，自己解码")],-1),b=e("p",null,[n("通过FFmpeg提供的"),e("code",null,"sws_scale"),n("进行转换")],-1),_={class:"hint-container warning"},x=e("p",{class:"hint-container-title"},"注意",-1),F=e("code",null,"FFmpeg.AutoGen",-1),y=e("p",null,"别忘了释放指针，否则 💣",-1),W=l('<h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>如果只是单纯的展示，那么PictureBox是一种不错的方式。</p><p>更近一步的话，会发现两个常见小问题，更多问题见<a href="https://learn.microsoft.com/zh-cn/dotnet/desktop/wpf/advanced/wpf-and-windows-forms-interoperation?view=netframeworkdesktop-4.8#layout-support" target="_blank" rel="noopener noreferrer">官方文档</a>:</p><ol><li><p>放大缩小窗体时，出现白色闪烁问题。</p><figure><img src="https://nas.ilyl.life:8092/wpf/hk_p1.gif" alt="WPF句柄预览缩放问题" tabindex="0" loading="lazy"><figcaption>WPF句柄预览缩放问题</figcaption></figure></li><li><p>使用WPF控件无法放在PictureBox顶层。</p><figure><img src="https://nas.ilyl.life:8092/wpf/hk_issue2.png" alt="WPF句柄预览叠加问题" tabindex="0" loading="lazy"><figcaption>WPF句柄预览叠加问题</figcaption></figure></li></ol><p>为了解决这两个问题，使用Image方式是一种更好的方法。</p><p>但这里没有贴更多的代码及具体实现，但是过程及注意事项如上所示。</p><p>其一视频是个很深的学问;</p><p>其二代码由原来的几百行缩减到几十行，当然是托了<code>FFMPEG</code>的福;</p><p>其三这里只是简单的预览视频，更多的操作及问题，后续遇见在写 😄</p><p>推荐一个<a href="https://github.com/unosquare/ffmediaelement" target="_blank" rel="noopener noreferrer">WPF视频播放器示例</a></p>',10);function P(T,E){const r=o("Tabs"),p=o("RouteLink");return u(),d("div",null,[k,e("ol",null,[e("li",null,[h,i(r,{id:"149",data:[{id:"Views"},{id:"ViewModels"}]},{title0:a(({value:t,isActive:s})=>[n("Views")]),title1:a(({value:t,isActive:s})=>[n("ViewModels")]),tab0:a(({value:t,isActive:s})=>[g]),tab1:a(({value:t,isActive:s})=>[f]),_:1}),v]),w,e("li",null,[b,e("div",_,[x,e("p",null,[n("虽然"),F,n("提供了C#版本，但是FFmpeg参数问题还需要自己处理，例如常见的"),i(p,{to:"/tools/csharp/intptr-and-pointer.html"},{default:a(()=>[n("Intptr与指针转换")]),_:1})]),y])])]),W])}const B=c(m,[["render",P],["__file","hk.html.vue"]]),q=JSON.parse('{"path":"/cs/wpf/hk.html","title":"海康视频","lang":"zh-CN","frontmatter":{"title":"海康视频","date":"2023-06-15T00:00:00.000Z","editLink":false,"footer":false,"isOriginal":true,"category":["C#"],"tag":["WPF","FFMPEG","海康视频"],"description":"默认都是最新的版本 Visual Studio 2022 .NET Framework 4.8 .NET 7 为什么会出现两个.NET框架？.NET Framework 4.8是为UI准备，并且是通过PictureBox的方式使用。使用第二种方式可以全部改为.NET 7 软件包 提示 海康SDK必须 集成到Winform：海康SDK提供的demo就是W...","head":[["meta",{"property":"og:url","content":"https://ilyl.life/cs/wpf/hk.html"}],["meta",{"property":"og:site_name","content":"乌龙茶有点甜"}],["meta",{"property":"og:title","content":"海康视频"}],["meta",{"property":"og:description","content":"默认都是最新的版本 Visual Studio 2022 .NET Framework 4.8 .NET 7 为什么会出现两个.NET框架？.NET Framework 4.8是为UI准备，并且是通过PictureBox的方式使用。使用第二种方式可以全部改为.NET 7 软件包 提示 海康SDK必须 集成到Winform：海康SDK提供的demo就是W..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://nas.ilyl.life:8092/wpf/hk_p2.gif"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-25T03:55:38.000Z"}],["meta",{"property":"article:author","content":"乌龙茶"}],["meta",{"property":"article:tag","content":"WPF"}],["meta",{"property":"article:tag","content":"FFMPEG"}],["meta",{"property":"article:tag","content":"海康视频"}],["meta",{"property":"article:published_time","content":"2023-06-15T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-25T03:55:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"海康视频\\",\\"image\\":[\\"https://nas.ilyl.life:8092/wpf/hk_p2.gif\\",\\"https://nas.ilyl.life:8092/wpf/hk_p1.gif\\",\\"https://nas.ilyl.life:8092/wpf/hk_issue2.png\\"],\\"datePublished\\":\\"2023-06-15T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-25T03:55:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"乌龙茶\\",\\"url\\":\\"https://ilyl.life\\",\\"email\\":\\"mailto:ly2@ilyl.life\\"}]}"]]},"headers":[{"level":2,"title":"软件包","slug":"软件包","link":"#软件包","children":[]},{"level":2,"title":"集成到Winform","slug":"集成到winform","link":"#集成到winform","children":[]},{"level":2,"title":"集成到WPF","slug":"集成到wpf","link":"#集成到wpf","children":[{"level":3,"title":"PictureBox方式","slug":"picturebox方式","link":"#picturebox方式","children":[]},{"level":3,"title":"Image方式","slug":"image方式","link":"#image方式","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1686822897000,"updatedTime":1714017338000,"contributors":[{"name":"乌龙茶","email":"982474256@qq.com","commits":13}]},"readingTime":{"minutes":3.27,"words":980},"filePathRelative":"cs/wpf/hk.md","localizedDate":"2023年6月15日","excerpt":"<p>默认都是最新的版本</p>\\n<ul>\\n<li>\\n<p><a href=\\"https://visualstudio.microsoft.com/zh-hans/downloads/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Visual Studio 2022</a></p>\\n</li>\\n<li>\\n<p><a href=\\"https://dotnet.microsoft.com/zh-cn/download/dotnet-framework/net48\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">.NET Framework 4.8</a></p>\\n</li>\\n<li>\\n<p><a href=\\"https://dotnet.microsoft.com/zh-cn/download/dotnet/7.0\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">.NET 7</a></p>\\n</li>\\n</ul>","autoDesc":true}');export{B as comp,q as data};
