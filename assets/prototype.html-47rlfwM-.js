const t=JSON.parse('{"key":"v-6c09d042","path":"/cs/design-pattern/prototype.html","title":"原型模式","lang":"zh-CN","frontmatter":{"title":"原型模式","date":"2023-06-17T00:00:00.000Z","dir.order":17,"order":17,"editLink":false,"footer":false,"category":["设计模式"],"tag":["设计模式"],"description":"参与此模式的类和对象包括： Prototype(ColorPrototype) 声明用于克隆自身的接口。 ConcretePrototype(Color) 实现克隆本身的操作。 Client(ColorManager) 通过要求原型克隆自身来创建新对象。 ","head":[["meta",{"property":"og:url","content":"https://ilyl.life/cs/design-pattern/prototype.html"}],["meta",{"property":"og:site_name","content":"乌龙茶有点甜"}],["meta",{"property":"og:title","content":"原型模式"}],["meta",{"property":"og:description","content":"参与此模式的类和对象包括： Prototype(ColorPrototype) 声明用于克隆自身的接口。 ConcretePrototype(Color) 实现克隆本身的操作。 Client(ColorManager) 通过要求原型克隆自身来创建新对象。 "}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-07-21T07:17:50.000Z"}],["meta",{"property":"article:author","content":"乌龙茶"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:published_time","content":"2023-06-17T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-07-21T07:17:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"原型模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-06-17T00:00:00.000Z\\",\\"dateModified\\":\\"2023-07-21T07:17:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"乌龙茶\\",\\"url\\":\\"https://ilyl.life\\",\\"email\\":\\"mailto:982474256@qq.com\\"}]}"]]},"headers":[],"git":{"createdTime":1687005402000,"updatedTime":1689923870000,"contributors":[{"name":"乌龙茶","email":"982474256@qq.com","commits":2}]},"readingTime":{"minutes":1.44,"words":432},"filePathRelative":"cs/design-pattern/prototype.md","localizedDate":"2023年6月17日","excerpt":"<p>参与此模式的类和对象包括：</p>\\n<ul>\\n<li>\\n<p>Prototype(<code>ColorPrototype</code>)</p>\\n<ul>\\n<li>声明用于克隆自身的接口。</li>\\n</ul>\\n</li>\\n<li>\\n<p>ConcretePrototype(<code>Color</code>)</p>\\n<ul>\\n<li>实现克隆本身的操作。</li>\\n</ul>\\n</li>\\n<li>\\n<p>Client(<code>ColorManager</code>)</p>\\n<ul>\\n<li>通过要求原型克隆自身来创建新对象。</li>\\n</ul>\\n</li>\\n</ul>\\n\\n","autoDesc":true}');export{t as data};
