import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{r as e,o as u,c as i,d as n,e as s,f as a,w as r,b as p}from"./app-f740d570.js";const k={},d=n("h2",{id:"开发包",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#开发包","aria-hidden":"true"},"#"),s(" 开发包")],-1),m={class:"hint-container tip"},v=n("p",{class:"hint-container-title"},"提示",-1),b={href:"https://github.com/PrismLibrary/Prism-Samples-Wpf",target:"_blank",rel:"noopener noreferrer"},g=n("p",null,[s("WPF 入门可以看下"),n("code",null,"深入浅出WPF"),s("以及"),n("code",null,"WPF编程宝典")],-1),y={href:"https://prismlibrary.com/index.html",target:"_blank",rel:"noopener noreferrer"},h=n("h2",{id:"数据库配置",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#数据库配置","aria-hidden":"true"},"#"),s(" 数据库配置")],-1),w=n("h3",{id:"表设计",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#表设计","aria-hidden":"true"},"#"),s(" 表设计")],-1),M=n("p",null,[s("树形菜单在数据库可配置，先设计菜单树模型，这里设计三个模型，"),n("code",null,"SubSystem"),s("、"),n("code",null,"SubMenu"),s("、"),n("code",null,"MenuLink"),s("分别为模块、模块下的菜单、菜单对应的插件")],-1),q=p(`<h3 id="初始化数据" tabindex="-1"><a class="header-anchor" href="#初始化数据" aria-hidden="true">#</a> 初始化数据</h3><div class="hint-container tip"><p class="hint-container-title">提示</p><p>一个菜单一个插件，还是多个菜单一个插件都没关系</p></div><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token class-name">List<span class="token punctuation">&lt;</span>SubSystem<span class="token punctuation">&gt;</span></span> DefaultSubSystems<span class="token operator">=</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>SubSystem<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SubSystem</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> SubCode <span class="token operator">=</span> <span class="token string">&quot;AA&quot;</span><span class="token punctuation">,</span> SubName <span class="token operator">=</span> <span class="token string">&quot;A模块&quot;</span><span class="token punctuation">,</span> Order <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SubSystem</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> SubCode <span class="token operator">=</span> <span class="token string">&quot;SS&quot;</span><span class="token punctuation">,</span> SubName <span class="token operator">=</span> <span class="token string">&quot;B模块&quot;</span><span class="token punctuation">,</span> Order <span class="token operator">=</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token class-name">List<span class="token punctuation">&lt;</span>SubMenu<span class="token punctuation">&gt;</span></span> DefaultSubMenus<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>SubMenu<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MenuEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> SubCode <span class="token operator">=</span> <span class="token string">&quot;AA&quot;</span><span class="token punctuation">,</span> MenuCode <span class="token operator">=</span> <span class="token string">&quot;AA01&quot;</span><span class="token punctuation">,</span> MenuName <span class="token operator">=</span> <span class="token string">&quot;test1&quot;</span><span class="token punctuation">,</span> SupMenuId <span class="token operator">=</span> <span class="token string">&quot;AA&quot;</span><span class="token punctuation">,</span> Grade <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>Order <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> EndGrade <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MenuEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> SubCode <span class="token operator">=</span> <span class="token string">&quot;AA&quot;</span><span class="token punctuation">,</span> MenuCode <span class="token operator">=</span> <span class="token string">&quot;AA02&quot;</span><span class="token punctuation">,</span> MenuName <span class="token operator">=</span> <span class="token string">&quot;test2&quot;</span><span class="token punctuation">,</span> SupMenuId <span class="token operator">=</span> <span class="token string">&quot;AA&quot;</span><span class="token punctuation">,</span> Grade <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>Order <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> EndGrade <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MenuEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> SubCode <span class="token operator">=</span> <span class="token string">&quot;SS&quot;</span><span class="token punctuation">,</span> MenuCode <span class="token operator">=</span> <span class="token string">&quot;SS01&quot;</span><span class="token punctuation">,</span> MenuName <span class="token operator">=</span> <span class="token string">&quot;test3&quot;</span><span class="token punctuation">,</span> SupMenuId <span class="token operator">=</span> <span class="token string">&quot;SS&quot;</span><span class="token punctuation">,</span> Grade <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>Order <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> EndGrade <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MenuEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> SubCode <span class="token operator">=</span> <span class="token string">&quot;SS&quot;</span><span class="token punctuation">,</span> MenuCode <span class="token operator">=</span> <span class="token string">&quot;SS0101&quot;</span><span class="token punctuation">,</span> MenuName <span class="token operator">=</span> <span class="token string">&quot;test4&quot;</span><span class="token punctuation">,</span> SupMenuId <span class="token operator">=</span> <span class="token string">&quot;SS01&quot;</span><span class="token punctuation">,</span> Grade <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>Order <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> EndGrade <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MenuEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> SubCode <span class="token operator">=</span> <span class="token string">&quot;SS&quot;</span><span class="token punctuation">,</span> MenuCode <span class="token operator">=</span> <span class="token string">&quot;SS010101&quot;</span><span class="token punctuation">,</span> MenuName <span class="token operator">=</span> <span class="token string">&quot;test5&quot;</span><span class="token punctuation">,</span> SupMenuId <span class="token operator">=</span> <span class="token string">&quot;SS0101&quot;</span><span class="token punctuation">,</span> Grade <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span>Order <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> EndGrade <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MenuEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> SubCode <span class="token operator">=</span> <span class="token string">&quot;SS&quot;</span><span class="token punctuation">,</span> MenuCode <span class="token operator">=</span> <span class="token string">&quot;SS010102&quot;</span><span class="token punctuation">,</span> MenuName <span class="token operator">=</span> <span class="token string">&quot;test6&quot;</span><span class="token punctuation">,</span> SupMenuId <span class="token operator">=</span> <span class="token string">&quot;SS0101&quot;</span><span class="token punctuation">,</span> Grade <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span>Order <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> EndGrade <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token class-name">List<span class="token punctuation">&lt;</span>MenuLink<span class="token punctuation">&gt;</span></span> DefautlLinks <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>MenuLink<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MenuLink</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> MenuCode <span class="token operator">=</span> <span class="token string">&quot;AA01&quot;</span> Assembly <span class="token operator">=</span> <span class="token string">&quot;Demo.Plugin&quot;</span><span class="token punctuation">,</span>Class <span class="token operator">=</span> <span class="token string">&quot;Demo.Plugin.Entry&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MenuLink</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> MenuCode <span class="token operator">=</span> <span class="token string">&quot;SS0101&quot;</span> Assembly <span class="token operator">=</span> <span class="token string">&quot;Demo.Plugin&quot;</span><span class="token punctuation">,</span>Class <span class="token operator">=</span> <span class="token string">&quot;Demo.Plugin.Entry&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="dto" tabindex="-1"><a class="header-anchor" href="#dto" aria-hidden="true">#</a> DTO</h3><p>将设计的三个表转换成 WPF 菜单树控件<code>TreeView</code>需要的数据模型<code>TreeMenu</code></p><p>首先要确认的事，数据库设计可以配置无数层，但是 WPF 界面显示，深度不应太深，<code>MAX_LEVEL</code>属性进行控制</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>| -A  |
| --- |  |A1
|---|A12
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中树形菜单的第一层为<code>SubSystem</code>的值。二三层对应<code>SubMenu</code>数据值</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">byte</span></span> MAX_LEVEL<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token class-name">ObservableCollection<span class="token punctuation">&lt;</span>TreeMenu<span class="token punctuation">&gt;</span></span> _treeMenu<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">LoadTreeMenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> sub <span class="token keyword">in</span> DefaultSubSystems<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">TreeMenu</span> subTree <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token function">IterationMenu</span><span class="token punctuation">(</span>DefaultSubMenus<span class="token punctuation">,</span> <span class="token keyword">ref</span> subTree<span class="token punctuation">,</span> sub<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>subTree <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            _treeMenu<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>subTree<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">IterationMenu</span><span class="token punctuation">(</span><span class="token class-name">List<span class="token punctuation">&lt;</span>SubMenu<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token keyword">ref</span> <span class="token class-name">TreeMenu</span> treeParent<span class="token punctuation">,</span> <span class="token class-name">SubSystem</span> parent<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> grade<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>grade <span class="token operator">==</span> MAX_LEVEL<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>treeParent <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        treeParent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TreeMenu</span><span class="token punctuation">{</span> TreeCode <span class="token operator">=</span> parent<span class="token punctuation">.</span>SubCode<span class="token punctuation">,</span> TreeName <span class="token operator">=</span> parent<span class="token punctuation">.</span>SubName<span class="token punctuation">,</span> Children <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>TreeMenu<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> child <span class="token keyword">in</span> source<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>o <span class="token operator">=&gt;</span> o<span class="token punctuation">.</span>SupMenuId <span class="token operator">==</span> parent<span class="token punctuation">.</span>SubCode <span class="token operator">&amp;&amp;</span> o<span class="token punctuation">.</span>Grade <span class="token operator">==</span> grade<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">OrderBy</span><span class="token punctuation">(</span>o <span class="token operator">=&gt;</span> o<span class="token punctuation">.</span>Order<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token keyword">var</span></span> menu <span class="token operator">=</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">TreeMenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> TreeCode<span class="token operator">=</span> child<span class="token punctuation">.</span>MenuCode<span class="token punctuation">,</span> TreeName<span class="token operator">=</span>child<span class="token punctuation">.</span>MenuName<span class="token punctuation">,</span> Order<span class="token operator">=</span>child<span class="token punctuation">.</span>Order <span class="token punctuation">}</span><span class="token punctuation">;</span>
            treeParent<span class="token punctuation">.</span>Children<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>menu<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">IterationMenu</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> <span class="token keyword">ref</span> treeParent<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> grade <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> child <span class="token keyword">in</span> treeParent<span class="token punctuation">.</span>Children<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token keyword">var</span></span> child1 <span class="token operator">=</span> child<span class="token punctuation">;</span>
            child<span class="token punctuation">.</span>Children <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>TreeMenu<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> c <span class="token keyword">in</span> source<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>o <span class="token operator">=&gt;</span> o<span class="token punctuation">.</span>SupMenuId <span class="token operator">==</span> child<span class="token punctuation">.</span>MenuCode <span class="token operator">&amp;&amp;</span> o<span class="token punctuation">.</span>Grade <span class="token operator">==</span> grade<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">OrderBy</span><span class="token punctuation">(</span>o <span class="token operator">=&gt;</span> o<span class="token punctuation">.</span>Order<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name"><span class="token keyword">var</span></span> menu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TreeMenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> TreeCode <span class="token operator">=</span> c<span class="token punctuation">.</span>MenuCode<span class="token punctuation">,</span> TreeName <span class="token operator">=</span> c<span class="token punctuation">.</span>MenuName<span class="token punctuation">,</span> Order <span class="token operator">=</span> c<span class="token punctuation">.</span>Order <span class="token punctuation">}</span><span class="token punctuation">;</span>
                child<span class="token punctuation">.</span>Children<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>menu<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token function">IterationMenu</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> <span class="token keyword">ref</span> child1<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> grade <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="wpf" tabindex="-1"><a class="header-anchor" href="#wpf" aria-hidden="true">#</a> WPF</h2><h3 id="views" tabindex="-1"><a class="header-anchor" href="#views" aria-hidden="true">#</a> Views</h3><p>一个简单的左右布局用上<code>TreeView</code>和<code>TabControl</code>控件</p><ul><li>TreeView</li></ul><p>ItemsSource 绑定的是<code>TreeMenu</code>数据源，注意使用<code>ObservableCollection</code></p>`,14),f={href:"https://learn.microsoft.com/en-us/dotnet/api/system.windows.hierarchicaldatatemplate?view=windowsdesktop-7.0",target:"_blank",rel:"noopener noreferrer"},S=p(`<p>设计一个简单模板：</p><ol><li><p>添加一个<code>Grid</code>布局实现多个控件</p></li><li><p>转换器<code>BoolToVisible</code>，将<code>True</code>转换<code>Visibility.Visible</code>，反之<code>Visibility.Collapsed</code></p></li><li><p>转换器<code>VisibleToReverse</code>，将<code>Visibility.Visible</code>转换<code>Visibility.Collapsed</code>，反之<code>Visibility.Visible</code></p></li><li><p><code>IsGrouping</code>属性来判断子/父节点，父节点则用<code>TextBlock</code>显示本身，子节点就用<code>Button</code>来显示</p></li></ol><div class="language-xaml line-numbers-mode" data-ext="xaml"><pre class="language-xaml"><code>&lt;HierarchicalDataTemplate x:Key=&quot;TreeItemStyle&quot; ItemsSource=&quot;{Binding Children}&quot;&gt;
&lt;Grid&gt;
    &lt;StackPanel x:Name=&quot;ParentMenu&quot; Visibility=&quot;{Binding IsGrouping, Converter={StaticResource BoolToVisible}}&quot;&gt;
        &lt;TextBlock Text=&quot;{Binding MenuName}&quot; /&gt;
    &lt;/StackPanel&gt;
    &lt;Button
        Command=&quot;{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type TreeView}}, Path=DataContext.NavigateCommand}&quot;
        CommandParameter=&quot;{Binding MenuCode}&quot;
        Visibility=&quot;{Binding Visibility, ElementName=ParentMenu, Converter={StaticResource VisibleToReverse}}&quot;&gt;
        &lt;StackPanel&gt;
            &lt;TextBlock Text=&quot;{Binding MenuName}&quot; /&gt;
        &lt;/StackPanel&gt;
    &lt;/Button&gt;
&lt;/Grid&gt;
&lt;/HierarchicalDataTemplate&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-xaml line-numbers-mode" data-ext="xaml"><pre class="language-xaml"><code>&lt;TreeView
    Grid.Column=&quot;0&quot;
    ItemTemplate=&quot;{StaticResource TreeItemStyle}&quot;
    ItemsSource=&quot;{Binding TreeMenuData}&quot;/&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>TabControl</li></ul><p>这里用上了<code>Prism</code>的<code>Regions</code>实现控件的添加</p><div class="language-xaml line-numbers-mode" data-ext="xaml"><pre class="language-xaml"><code>&lt;TabControl
    Grid.Column=&quot;1&quot;
    prism:RegionManager.RegionName=&quot;TabRegion&quot;/&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="viewmodels" tabindex="-1"><a class="header-anchor" href="#viewmodels" aria-hidden="true">#</a> ViewModels</h3><ul><li><code>TreeView</code>使用的模型</li></ul><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TreeMenu</span><span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> TreeCode<span class="token punctuation">{</span><span class="token keyword">get</span><span class="token punctuation">;</span><span class="token keyword">set</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> TreeName<span class="token punctuation">{</span><span class="token keyword">get</span><span class="token punctuation">;</span><span class="token keyword">set</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Order<span class="token punctuation">{</span><span class="token keyword">get</span><span class="token punctuation">;</span><span class="token keyword">set</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> IsGrouping<span class="token punctuation">{</span><span class="token keyword">get</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>Children<span class="token operator">!=</span><span class="token keyword">null</span><span class="token operator">&amp;&amp;</span>Children<span class="token punctuation">.</span>Count<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>TreeMenu<span class="token punctuation">&gt;</span></span> Children<span class="token punctuation">{</span><span class="token keyword">get</span><span class="token punctuation">;</span><span class="token keyword">set</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>加载插件并与<code>Prism</code>关联</li></ul><p>通过<code>Prism</code>的<code>LoadModule</code>加载插件，<code>RequestNavigate</code>进行导航请求</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>Prism 加载 Module 有多种方式，但是这里因为一切都是<code>动态可配</code>，所以使用<code>LoadManual</code>的方式</p></div><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">LoadPrismModule</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> menuCode<span class="token punctuation">)</span><span class="token punctuation">{</span>
    _moduleManager<span class="token punctuation">.</span><span class="token function">LoadModule</span><span class="token punctuation">(</span>menuCode<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> parameters <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NavigationParameters</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token string">&quot;code&quot;</span><span class="token punctuation">,</span> menuCode <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    _regionManager<span class="token punctuation">.</span><span class="token function">RequestNavigate</span><span class="token punctuation">(</span><span class="token string">&quot;TabRegion&quot;</span><span class="token punctuation">,</span> menu<span class="token punctuation">.</span>MenuId<span class="token punctuation">,</span> parameters<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">IConcurrentDictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> Type<span class="token punctuation">&gt;</span></span> _compsCache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ConcurrentDictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> Type<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">LoadComponent</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> menuCode<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> link <span class="token operator">=</span> DefautlLinks<span class="token punctuation">.</span><span class="token function">FirstOrDefault</span><span class="token punctuation">(</span>it <span class="token operator">=&gt;</span> it<span class="token punctuation">.</span>MenuCode <span class="token operator">==</span> menuCode<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>link <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token class-name">Type<span class="token punctuation">?</span></span> type <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>_compsCache<span class="token punctuation">.</span><span class="token function">ContainsKey</span><span class="token punctuation">(</span>link<span class="token punctuation">.</span>Assembly<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">Assembly</span> asm <span class="token operator">=</span> Assembly<span class="token punctuation">.</span><span class="token function">LoadFrom</span><span class="token punctuation">(</span>AppDomain<span class="token punctuation">.</span>CurrentDomain<span class="token punctuation">.</span>BaseDirectory <span class="token operator">+</span> link<span class="token punctuation">.</span>Assembly <span class="token operator">+</span> <span class="token string">&quot;.dll&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        type <span class="token operator">=</span> asm<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span>link<span class="token punctuation">.</span>Class<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
        _compsCache<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>link<span class="token punctuation">.</span>Assembly<span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        type <span class="token operator">=</span> _compsCache<span class="token punctuation">[</span>link<span class="token punctuation">.</span>Assembly<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name"><span class="token keyword">var</span></span> moduleCatalog <span class="token operator">=</span> _c<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Resolve</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IModuleCatalog<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    moduleCatalog<span class="token punctuation">.</span><span class="token function">AddModule</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">ModuleInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        ModuleName <span class="token operator">=</span> menuCode<span class="token punctuation">,</span>
        ModuleType <span class="token operator">=</span> type<span class="token punctuation">.</span>AssemblyQualifiedName<span class="token punctuation">,</span>
        InitializationMode <span class="token operator">=</span> InitializationMode<span class="token punctuation">.</span>WhenAvailable<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LoadModule</span><span class="token punctuation">(</span>menuCode<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OpenTabItem</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> menuCode<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrEmpty</span><span class="token punctuation">(</span>menuCode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> openMenu <span class="token operator">=</span> DefaultMenus<span class="token punctuation">.</span><span class="token function">FirstOrDefault</span><span class="token punctuation">(</span>o <span class="token operator">=&gt;</span> o<span class="token punctuation">.</span>MenuId <span class="token operator">==</span> menuCode<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>openMenu <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> moduleExist <span class="token operator">=</span> _moduleManager<span class="token punctuation">.</span><span class="token function">ModuleExists</span><span class="token punctuation">(</span>openMenu<span class="token punctuation">.</span>MenuId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>moduleExist<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">LoadComponent</span><span class="token punctuation">(</span>openMenu<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">LoadModule</span><span class="token punctuation">(</span>openMenu<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="自定义插件" tabindex="-1"><a class="header-anchor" href="#自定义插件" aria-hidden="true">#</a> 自定义插件</h2><p>由于使用了<code>Prism</code>来实现插件化，那么自定义的项目也需要安装<code>Prism</code></p><h3 id="入口" tabindex="-1"><a class="header-anchor" href="#入口" aria-hidden="true">#</a> 入口</h3><p>项目名称为<code>Demo.Plugin</code>,自定义一个类继承<code>IModule</code></p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">RegisterTypes</span><span class="token punctuation">(</span><span class="token class-name">IContainerRegistry</span> containerRegistry<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    containerRegistry<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">RegisterForNavigation</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>HelloView<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;AA01&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    containerRegistry<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">RegisterForNavigation</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>WorldView<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;SS010101&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="自动更新" tabindex="-1"><a class="header-anchor" href="#自动更新" aria-hidden="true">#</a> 自动更新</h2>`,22),C={href:"https://github.com/Ly2JR/wpf-samples/tree/main/src/update",target:"_blank",rel:"noopener noreferrer"},T=n("figure",null,[n("img",{src:"https://nas.ilyl.life:8092/wpf/update2.gif",alt:"自动更新",width:"420",height:"200",tabindex:"0",loading:"lazy"}),n("figcaption",null,"自动更新")],-1),_=n("h2",{id:"结语",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#结语","aria-hidden":"true"},"#"),s(" 结语")],-1),x=n("p",null,"至此，一个基本的可配置化插件开发完成，稍微进行扩展就能实现更多功能",-1),A={href:"https://github.com/Ly2JR/wpf-samples/tree/main/src/demo",target:"_blank",rel:"noopener noreferrer"};function L(I,P){const t=e("ExternalLinkIcon"),o=e("Mermaid"),c=e("RouterLink");return u(),i("div",null,[d,n("div",m,[v,n("p",null,[s("这里有很多关于"),n("a",b,[s("Prism 示例"),a(t)])]),g]),n("ol",null,[n("li",null,[n("a",y,[s("Prism"),a(t)])])]),h,w,M,a(o,{id:"mermaid-27",code:"eJzT1dXlKsksyUm1Uni2YOLTvYte9M952jv12YqFT+d1c4FkuZJzEouLXTIT04sSc7kUFFIyi1KTSzLz8xR8goBcsKxCcGlScGVxSWpuNVBIQUG7uKQoMy8dJOycn5KKLuaXmAsVy8wrUfAvSkktAnJrkU3zTc0rRTULJIJhGEgQYRo2W5MqS1IV3IsSMVxRgGpgUn5+joJrXgqSUuyOA2nzyczLJsJ1jsXFqblJOZUogs4gU6AmwoNNQclQSUFXN19BSUsJ5n2IPIiFkAXSMPu5ADlsi7E=",title:"eJx7tmDi072LXvTPedo79dmKhU/ndQMAezQMsw=="}),q,n("p",null,[s("树形菜单使用"),n("a",f,[s("HierarchicalDataTemplate"),a(t)]),s("进行数据迭代，")]),S,n("p",null,[s("使用了"),a(c,{to:"/cs/wpf/update.html"},{default:r(()=>[s("更新")]),_:1}),s("功能，在启动时检查是否有新的DLL文件需要更新，如果有则更新，"),n("a",C,[s("更新代码地址"),a(t)])]),T,_,x,n("p",null,[n("a",A,[s("完整项目地址"),a(t)])])])}const E=l(k,[["render",L],["__file","plugin.html.vue"]]);export{E as default};
