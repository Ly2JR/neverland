import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as l,d as n,f as s,a as t,e as p}from"./app-CNoNHlwC.js";const i={},u={href:"https://learn.microsoft.com/zh-cn/dotnet/csharp/asynchronous-programming/task-asynchronous-programming-model",target:"_blank",rel:"noopener noreferrer"},k=p(`<p>但是部分情况下需要将同步的方法改为异步方法，如旧代码、第三方语言代码。</p><p>以模拟登录为例，等待三秒后返回结果</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">Login</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> userId<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> pwd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>userId <span class="token operator">==</span> <span class="token number">123</span><span class="token operator">&amp;&amp;</span>pwd<span class="token operator">==</span><span class="token number">456</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Task<span class="token punctuation">.</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">&quot;成功&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token string">&quot;账号或密码错误&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">Stopwatch</span> sw <span class="token operator">=</span> Stopwatch<span class="token punctuation">.</span><span class="token function">StartNew</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> ret <span class="token operator">=</span> <span class="token function">Login</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token number">456</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    sw<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;登录结果:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">ret</span><span class="token punctuation">}</span></span><span class="token string">:耗时:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">sw<span class="token punctuation">.</span>ElapsedMilliseconds</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//输出结果</span>
<span class="token comment">//登录结果:成功:耗时:3026</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在返回结果之前是无法进行其他操作，因此需要改为异步</p>`,4),r={id:"委托",tabindex:"-1"},d={class:"header-anchor",href:"#委托"},m={href:"https://learn.microsoft.com/zh-cn/dotnet/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously",target:"_blank",rel:"noopener noreferrer"},v=p(`<p>使用委托对<code>Login</code>方法进行包装</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">LoginExt</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> userId<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">int</span></span> pwd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">Func<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> f <span class="token operator">=</span> Login<span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> uuid<span class="token operator">=</span>Guid<span class="token punctuation">.</span><span class="token function">NewGuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> retTask<span class="token operator">=</span>f<span class="token punctuation">.</span><span class="token function">BeginInvoke</span><span class="token punctuation">(</span>userId<span class="token punctuation">,</span> pwd<span class="token punctuation">,</span> <span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> id <span class="token operator">=</span> <span class="token punctuation">(</span>Guid<span class="token punctuation">)</span>r<span class="token punctuation">.</span>AsyncState<span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;处理完成:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">id</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> uuid<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>retTask<span class="token punctuation">.</span>IsCompleted<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Task<span class="token punctuation">.</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">600</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;正在登录中...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> f<span class="token punctuation">.</span><span class="token function">EndInvoke</span><span class="token punctuation">(</span>retTask<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">Stopwatch</span> sw <span class="token operator">=</span> Stopwatch<span class="token punctuation">.</span><span class="token function">StartNew</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> ret <span class="token operator">=</span> <span class="token function">LoginExt</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token number">456</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    sw<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;登录结果:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">ret</span><span class="token punctuation">}</span></span><span class="token string">:耗时:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">sw<span class="token punctuation">.</span>ElapsedMilliseconds</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//输出结果</span>
<span class="token comment">//正在登录中...</span>
<span class="token comment">//正在登录中...</span>
<span class="token comment">//正在登录中...</span>
<span class="token comment">//正在登录中...</span>
<span class="token comment">//处理完成:c3e58bb0-da4e-4fd9-b4a4-7ba196a06d4e</span>
<span class="token comment">//正在登录中...</span>
<span class="token comment">//登录结果:成功:耗时:3079</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过异步，将同步等待的方法变为异步，但是这是<code>.NET Framework</code>下的方式，<code>.NET Core</code>不在支持委托的异步方式，提示<code>System.PlatformNotSupportedException:“Operation is not supported on this platform.”</code>，推荐使用<code>Task</code></p><h2 id="task" tabindex="-1"><a class="header-anchor" href="#task"><span>Task</span></a></h2><p>最简单的一种方式</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token function">LoginAsync</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> userId<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">int</span></span> pwd<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">await</span> Task<span class="token punctuation">.</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">Login</span><span class="token punctuation">(</span>userId<span class="token punctuation">,</span> pwd<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name">Stopwatch</span> sw <span class="token operator">=</span> Stopwatch<span class="token punctuation">.</span><span class="token function">StartNew</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> ret <span class="token operator">=</span> <span class="token function">LoginAsync</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">456</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>ret<span class="token punctuation">.</span>IsCompleted<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Task<span class="token punctuation">.</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">600</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;正在登录中...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
sw<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;登录结果:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">ret<span class="token punctuation">.</span>Result</span><span class="token punctuation">}</span></span><span class="token string">:耗时:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">sw<span class="token punctuation">.</span>ElapsedMilliseconds</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//输出结果</span>
<span class="token comment">//正在登录中...</span>
<span class="token comment">//正在登录中...</span>
<span class="token comment">//正在登录中...</span>
<span class="token comment">//正在登录中...</span>
<span class="token comment">//正在登录中...</span>
<span class="token comment">//登录结果:成功:耗时:3055</span>
</code></pre><div class="highlight-lines"><br><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="task-run" tabindex="-1"><a class="header-anchor" href="#task-run"><span>Task.Run</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token function">Login2Async</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> userId<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> pwd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
   <span class="token class-name"><span class="token keyword">var</span></span> ret<span class="token operator">=</span> <span class="token keyword">await</span> Task<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Run</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">Login</span><span class="token punctuation">(</span>userId<span class="token punctuation">,</span> pwd<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><div class="highlight-line"> </div><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用<code>Task.Run</code>处理，结果一致</p><h3 id="task-factory-startnew" tabindex="-1"><a class="header-anchor" href="#task-factory-startnew"><span>Task.Factory.StartNew</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token function">Login3Async</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> userId<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> pwd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> ret <span class="token operator">=</span> <span class="token keyword">await</span> Task<span class="token punctuation">.</span>Factory<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">StartNew</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">Login</span><span class="token punctuation">(</span>userId<span class="token punctuation">,</span> pwd<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><div class="highlight-line"> </div><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用<code>Task.Factory.StartNew</code>包装，结果一致</p>`,12),b={id:"taskcompletionsource",tabindex:"-1"},g={class:"header-anchor",href:"#taskcompletionsource"},y={href:"https://learn.microsoft.com/zh-cn/dotnet/api/system.threading.tasks.taskcompletionsource?view=net-6.0",target:"_blank",rel:"noopener noreferrer"},w=p(`<p><code>TaskCompletionSource</code>也是一个异步操作，用于更为精准的操作。</p><p>例如<code>Login</code>原始代码为同步操作，但是可能有提供<code>Login</code>的异步操作，如<code>LoginExt</code>改造方法，这里更近一步处理，提供<code>Login</code>的非阻塞方法</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Login2</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> userId<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> pwd<span class="token punctuation">,</span><span class="token class-name">Action<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> callback<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">bool</span></span> isAsync<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>callback<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">Func<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> f <span class="token operator">=</span> Login<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>isAsync<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token keyword">var</span></span> uuid <span class="token operator">=</span> Guid<span class="token punctuation">.</span><span class="token function">NewGuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">var</span></span> retTask <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">BeginInvoke</span><span class="token punctuation">(</span>userId<span class="token punctuation">,</span> pwd<span class="token punctuation">,</span> <span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
            <span class="token punctuation">{</span>
                <span class="token class-name"><span class="token keyword">var</span></span> id <span class="token operator">=</span> <span class="token punctuation">(</span>Guid<span class="token punctuation">)</span>r<span class="token punctuation">.</span>AsyncState<span class="token punctuation">;</span>
                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;处理完成:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">id</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name"><span class="token keyword">var</span></span> task <span class="token operator">=</span> <span class="token punctuation">(</span>AsyncResult<span class="token punctuation">)</span>r<span class="token punctuation">;</span>
                <span class="token function">callback</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">EndInvoke</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span> uuid<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            <span class="token function">callback</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>userId<span class="token punctuation">,</span> pwd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">Stopwatch</span> sw <span class="token operator">=</span> Stopwatch<span class="token punctuation">.</span><span class="token function">StartNew</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> ret <span class="token operator">=</span> <span class="token function">Login2</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">456</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;登录结果:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">r</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Task<span class="token punctuation">.</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">600</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;正在登录中...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    sw<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;登录成功:耗时: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp"> sw<span class="token punctuation">.</span>ElapsedMilliseconds</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//输出结果</span>
<span class="token comment">//正在登录中...</span>
<span class="token comment">//正在登录中...</span>
<span class="token comment">//正在登录中...</span>
<span class="token comment">//正在登录中...</span>
<span class="token comment">//处理完成:9afd55c9-57bb-48d8-ad20-400cfbc79174</span>
<span class="token comment">//登录结果:成功</span>
<span class="token comment">//正在登录中...</span>
<span class="token comment">//登录成功:耗时: 3085</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当提供了一个包含<code>阻塞</code>和<code>非阻塞</code>的方法时，看看能不能对它进行转换</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token function">Login4Async</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> userId<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">int</span></span> pwd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">await</span> Task<span class="token punctuation">.</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> retResult <span class="token operator">=</span> <span class="token keyword">string</span><span class="token punctuation">.</span>Empty<span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> flag <span class="token operator">=</span> <span class="token function">Login2</span><span class="token punctuation">(</span>userId<span class="token punctuation">,</span> pwd<span class="token punctuation">,</span> <span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        retResult <span class="token operator">=</span> r<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> retResult<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span>  <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">Stopwatch</span> sw <span class="token operator">=</span> Stopwatch<span class="token punctuation">.</span><span class="token function">StartNew</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> ret<span class="token operator">=</span> <span class="token function">Login4Async</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">456</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>ret<span class="token punctuation">.</span>IsCompleted<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Task<span class="token punctuation">.</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">600</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;正在登录中...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    sw<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;登录结果:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">ret<span class="token punctuation">.</span>Result</span><span class="token punctuation">}</span></span><span class="token string"> 耗时: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">sw<span class="token punctuation">.</span>ElapsedMilliseconds</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//IsAysnc:True 输出结果</span>
<span class="token comment">//正在登录中...</span>
<span class="token comment">//登录结果: 耗时: 622</span>
<span class="token comment">//处理完成:fa8efe5c-3ce3-47f8-afec-ecec409515ab</span>

<span class="token comment">//IsAysnc:False 输出结果</span>
<span class="token comment">//正在登录中...</span>
<span class="token comment">//正在登录中...</span>
<span class="token comment">//正在登录中...</span>
<span class="token comment">//正在登录中...</span>
<span class="token comment">//正在登录中...</span>
<span class="token comment">//登录结果:成功 耗时: 3060</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当使用阻塞方法<code>IsAysnc</code>为<code>False</code>结果按预期输出，但是为<code>True</code>时，即包含委托的处理，结果不对。</p><p>这时就需要<code>TaskCompletionSource</code>对带委托的方法进行精准控制</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">static</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token function">Login5Async</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> userId<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> pwd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">TaskCompletionSource<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> tcs<span class="token operator">=</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">TaskCompletionSource<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> flag <span class="token operator">=</span> <span class="token function">Login2</span><span class="token punctuation">(</span>userId<span class="token punctuation">,</span> pwd<span class="token punctuation">,</span> <span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        tcs<span class="token punctuation">.</span><span class="token function">SetResult</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> tcs<span class="token punctuation">.</span>Task<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span>  <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">Stopwatch</span> sw <span class="token operator">=</span> Stopwatch<span class="token punctuation">.</span><span class="token function">StartNew</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> ret<span class="token operator">=</span> <span class="token function">Login5Async</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">456</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>ret<span class="token punctuation">.</span>IsCompleted<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Task<span class="token punctuation">.</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">600</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;正在登录中...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    sw<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;登录结果:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">ret<span class="token punctuation">.</span>Result</span><span class="token punctuation">}</span></span><span class="token string"> 耗时: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">sw<span class="token punctuation">.</span>ElapsedMilliseconds</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//输出结果</span>
<span class="token comment">//正在登录中...</span>
<span class="token comment">//正在登录中...</span>
<span class="token comment">//正在登录中...</span>
<span class="token comment">//正在登录中...</span>
<span class="token comment">//处理完成:e3458626-7aad-4c36-910c-7db0c5ba2269</span>
<span class="token comment">//正在登录中...</span>
<span class="token comment">//登录结果:成功 耗时: 3089</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不管使用同步还是异步方法，通过<code>TaskCompletionSource</code>精准控制都能按预期的结果输出。</p>`,9);function h(f,T){const a=o("ExternalLinkIcon");return c(),l("div",null,[n("p",null,[s("最新的"),n("a",u,[s("Task"),t(a)]),s("使异步操作变得更简单。")]),k,n("h2",r,[n("a",d,[n("span",null,[n("a",m,[s("委托"),t(a)])])])]),v,n("h3",b,[n("a",g,[n("span",null,[n("a",y,[s("TaskCompletionSource"),t(a)])])])]),w])}const x=e(i,[["render",h],["__file","sync-and-async.html.vue"]]),_=JSON.parse('{"path":"/tools/csharp/sync-and-async.html","title":"同步和异步","lang":"zh-CN","frontmatter":{"title":"同步和异步","date":"2024-03-01T00:00:00.000Z","editLink":false,"footer":false,"isOriginal":true,"category":["Task"],"tag":["C#"],"description":"最新的Task使异步操作变得更简单。 但是部分情况下需要将同步的方法改为异步方法，如旧代码、第三方语言代码。 以模拟登录为例，等待三秒后返回结果 在返回结果之前是无法进行其他操作，因此需要改为异步 委托 使用委托对Login方法进行包装 通过异步，将同步等待的方法变为异步，但是这是.NET Framework下的方式，.NET Core不在支持委托的异...","head":[["meta",{"property":"og:url","content":"https://ilyl.life/tools/csharp/sync-and-async.html"}],["meta",{"property":"og:site_name","content":"乌龙茶有点甜"}],["meta",{"property":"og:title","content":"同步和异步"}],["meta",{"property":"og:description","content":"最新的Task使异步操作变得更简单。 但是部分情况下需要将同步的方法改为异步方法，如旧代码、第三方语言代码。 以模拟登录为例，等待三秒后返回结果 在返回结果之前是无法进行其他操作，因此需要改为异步 委托 使用委托对Login方法进行包装 通过异步，将同步等待的方法变为异步，但是这是.NET Framework下的方式，.NET Core不在支持委托的异..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-01T05:14:36.000Z"}],["meta",{"property":"article:author","content":"乌龙茶"}],["meta",{"property":"article:tag","content":"C#"}],["meta",{"property":"article:published_time","content":"2024-03-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-01T05:14:36.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"同步和异步\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-01T05:14:36.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"乌龙茶\\",\\"url\\":\\"https://ilyl.life\\",\\"email\\":\\"mailto:982474256@qq.com\\"}]}"]]},"headers":[{"level":2,"title":"委托","slug":"委托","link":"#委托","children":[]},{"level":2,"title":"Task","slug":"task","link":"#task","children":[{"level":3,"title":"Task.Run","slug":"task-run","link":"#task-run","children":[]},{"level":3,"title":"Task.Factory.StartNew","slug":"task-factory-startnew","link":"#task-factory-startnew","children":[]},{"level":3,"title":"TaskCompletionSource","slug":"taskcompletionsource","link":"#taskcompletionsource","children":[]}]}],"git":{"createdTime":1709270076000,"updatedTime":1709270076000,"contributors":[{"name":"乌龙茶","email":"982474256@qq.com","commits":1}]},"readingTime":{"minutes":3.95,"words":1185},"filePathRelative":"tools/csharp/sync-and-async.md","localizedDate":"2024年3月1日","excerpt":"<p>最新的<a href=\\"https://learn.microsoft.com/zh-cn/dotnet/csharp/asynchronous-programming/task-asynchronous-programming-model\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Task</a>使异步操作变得更简单。</p>\\n<p>但是部分情况下需要将同步的方法改为异步方法，如旧代码、第三方语言代码。</p>\\n<p>以模拟登录为例，等待三秒后返回结果</p>\\n<div class=\\"language-csharp\\" data-ext=\\"cs\\" data-title=\\"cs\\"><pre class=\\"language-csharp\\"><code><span class=\\"token keyword\\">static</span> <span class=\\"token return-type class-name\\"><span class=\\"token keyword\\">string</span></span> <span class=\\"token function\\">Login</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\"><span class=\\"token keyword\\">int</span></span> userId<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\"><span class=\\"token keyword\\">int</span></span> pwd<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>userId <span class=\\"token operator\\">==</span> <span class=\\"token number\\">123</span><span class=\\"token operator\\">&amp;&amp;</span>pwd<span class=\\"token operator\\">==</span><span class=\\"token number\\">456</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n        Task<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Delay</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">3000</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Wait</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token string\\">\\"成功\\"</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token string\\">\\"账号或密码错误\\"</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">static</span> <span class=\\"token return-type class-name\\"><span class=\\"token keyword\\">void</span></span> <span class=\\"token function\\">Main</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\"><span class=\\"token keyword\\">string</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span></span> args<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token class-name\\">Stopwatch</span> sw <span class=\\"token operator\\">=</span> Stopwatch<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">StartNew</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> ret <span class=\\"token operator\\">=</span> <span class=\\"token function\\">Login</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">123</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">456</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    sw<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Stop</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    Console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">WriteLine</span><span class=\\"token punctuation\\">(</span><span class=\\"token interpolation-string\\"><span class=\\"token string\\">$\\"登录结果:</span><span class=\\"token interpolation\\"><span class=\\"token punctuation\\">{</span><span class=\\"token expression language-csharp\\">ret</span><span class=\\"token punctuation\\">}</span></span><span class=\\"token string\\">:耗时:</span><span class=\\"token interpolation\\"><span class=\\"token punctuation\\">{</span><span class=\\"token expression language-csharp\\">sw<span class=\\"token punctuation\\">.</span>ElapsedMilliseconds</span><span class=\\"token punctuation\\">}</span></span><span class=\\"token string\\">\\"</span></span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    Console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">ReadKey</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token comment\\">//输出结果</span>\\n<span class=\\"token comment\\">//登录结果:成功:耗时:3026</span>\\n</code></pre></div>","autoDesc":true}');export{x as comp,_ as data};
