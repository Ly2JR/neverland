const t=JSON.parse('{"key":"v-06358d44","path":"/cs/design-pattern/strategy.html","title":"策略模式","lang":"zh-CN","frontmatter":{"title":"策略模式","date":"2023-06-17T00:00:00.000Z","dir.order":21,"order":21,"editLink":false,"footer":false,"category":["设计模式"],"tag":["设计模式"],"description":"参与此模式的类和对象包括： Strategy(SortStrategy) 声明所有支持的算法通用的接口。Context使用这个接口调用一个ConcreteStrategy定义的算法。 ConcreteStrategy(QuickSort,ShellSort,MergeSort) 使用Strategy接口实现算法。 Context(SortedList)...","head":[["meta",{"property":"og:url","content":"https://ilyl.life/cs/design-pattern/strategy.html"}],["meta",{"property":"og:site_name","content":"乌龙茶有点甜"}],["meta",{"property":"og:title","content":"策略模式"}],["meta",{"property":"og:description","content":"参与此模式的类和对象包括： Strategy(SortStrategy) 声明所有支持的算法通用的接口。Context使用这个接口调用一个ConcreteStrategy定义的算法。 ConcreteStrategy(QuickSort,ShellSort,MergeSort) 使用Strategy接口实现算法。 Context(SortedList)..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-07-21T07:17:50.000Z"}],["meta",{"property":"article:author","content":"乌龙茶"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:published_time","content":"2023-06-17T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-07-21T07:17:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"策略模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-06-17T00:00:00.000Z\\",\\"dateModified\\":\\"2023-07-21T07:17:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"乌龙茶\\",\\"url\\":\\"https://ilyl.life\\",\\"email\\":\\"mailto:982474256@qq.com\\"}]}"]]},"headers":[],"git":{"createdTime":1687005402000,"updatedTime":1689923870000,"contributors":[{"name":"乌龙茶","email":"982474256@qq.com","commits":2}]},"readingTime":{"minutes":1.58,"words":474},"filePathRelative":"cs/design-pattern/strategy.md","localizedDate":"2023年6月17日","excerpt":"<p>参与此模式的类和对象包括：</p>\\n<ul>\\n<li>\\n<p>Strategy(<code>SortStrategy</code>)</p>\\n<ul>\\n<li>声明所有支持的算法通用的接口。Context使用这个接口调用一个ConcreteStrategy定义的算法。</li>\\n</ul>\\n</li>\\n<li>\\n<p>ConcreteStrategy(<code>QuickSort</code>,<code>ShellSort</code>,<code>MergeSort</code>)</p>\\n<ul>\\n<li>使用Strategy接口实现算法。</li>\\n</ul>\\n</li>\\n<li>\\n<p>Context(<code>SortedList</code>)</p>\\n<ul>\\n<li>配置有一个ConcreteStrategy对象。</li>\\n<li>维护对Strategy对象的引用。</li>\\n<li>可以定义一个让Strategy访问其数据的接口。</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}');export{t as data};
