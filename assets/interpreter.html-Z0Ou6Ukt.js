const e=JSON.parse('{"key":"v-4c3d0387","path":"/cs/design-pattern/interpreter.html","title":"解释器模式","lang":"zh-CN","frontmatter":{"title":"解释器模式","date":"2023-06-17T00:00:00.000Z","dir.order":12,"order":12,"editLink":false,"footer":false,"category":["设计模式"],"tag":["设计模式"],"description":"参与此模式的类和对象包括： AbstractExpression(Expression) 声明一个用于执行操作的接口 TerminalExpression(ThousandExpression,HUndredExpression,TenExpression,OneExpression) 实现与语法中的终结符合关联的解释操作。 句子中的每个终结符号都需要一个实例。 NonterminalExpression(not used) 语法中的每个规则R::=R1R2...Rn都需要一个这样的类。 为每个符号R1到Rn维护AbstractExpression类型的实例变量。 为语法中的非终结符号实现解释操作。Interpret通常在表示R1到Rn的变量上递归调用自身。 Context(Context) 包含对解释器来说是全局的信息。 Client(InterpreterApp) 构建(或给出)抽象语法树，表示语法定义的语言中的特定句子。抽象语法树由NonterminalExpression和TerminalExpression类的实例组装而成。 调用解释操作。","head":[["meta",{"property":"og:url","content":"https://ilyl.life/cs/design-pattern/interpreter.html"}],["meta",{"property":"og:site_name","content":"乌龙茶有点甜"}],["meta",{"property":"og:title","content":"解释器模式"}],["meta",{"property":"og:description","content":"参与此模式的类和对象包括： AbstractExpression(Expression) 声明一个用于执行操作的接口 TerminalExpression(ThousandExpression,HUndredExpression,TenExpression,OneExpression) 实现与语法中的终结符合关联的解释操作。 句子中的每个终结符号都需要一个实例。 NonterminalExpression(not used) 语法中的每个规则R::=R1R2...Rn都需要一个这样的类。 为每个符号R1到Rn维护AbstractExpression类型的实例变量。 为语法中的非终结符号实现解释操作。Interpret通常在表示R1到Rn的变量上递归调用自身。 Context(Context) 包含对解释器来说是全局的信息。 Client(InterpreterApp) 构建(或给出)抽象语法树，表示语法定义的语言中的特定句子。抽象语法树由NonterminalExpression和TerminalExpression类的实例组装而成。 调用解释操作。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-07-21T07:17:50.000Z"}],["meta",{"property":"article:author","content":"乌龙茶"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:published_time","content":"2023-06-17T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-07-21T07:17:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"解释器模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-06-17T00:00:00.000Z\\",\\"dateModified\\":\\"2023-07-21T07:17:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"乌龙茶\\",\\"url\\":\\"https://ilyl.life\\",\\"email\\":\\"mailto:982474256@qq.com\\"}]}"]]},"headers":[],"git":{"createdTime":1687005402000,"updatedTime":1689923870000,"contributors":[{"name":"乌龙茶","email":"982474256@qq.com","commits":2}]},"readingTime":{"minutes":2.15,"words":646},"filePathRelative":"cs/design-pattern/interpreter.md","localizedDate":"2023年6月17日","excerpt":"<p>参与此模式的类和对象包括：</p>\\n<ul>\\n<li>\\n<p>AbstractExpression(<code>Expression</code>)</p>\\n<ul>\\n<li>声明一个用于执行操作的接口</li>\\n</ul>\\n</li>\\n<li>\\n<p>TerminalExpression(<code>ThousandExpression</code>,<code>HUndredExpression</code>,<code>TenExpression</code>,<code>OneExpression</code>)</p>\\n<ul>\\n<li>实现与语法中的终结符合关联的解释操作。</li>\\n<li>句子中的每个终结符号都需要一个实例。</li>\\n</ul>\\n</li>\\n<li>\\n<p>NonterminalExpression(<code>not used</code>)</p>\\n<ul>\\n<li>语法中的每个规则R::=R1R2...Rn都需要一个这样的类。</li>\\n<li>为每个符号R1到Rn维护AbstractExpression类型的实例变量。</li>\\n<li>为语法中的非终结符号实现解释操作。Interpret通常在表示R1到Rn的变量上递归调用自身。</li>\\n</ul>\\n</li>\\n<li>\\n<p>Context(<code>Context</code>)</p>\\n<ul>\\n<li>包含对解释器来说是全局的信息。</li>\\n</ul>\\n</li>\\n<li>\\n<p>Client(<code>InterpreterApp</code>)</p>\\n<ul>\\n<li>构建(或给出)抽象语法树，表示语法定义的语言中的特定句子。抽象语法树由NonterminalExpression和TerminalExpression类的实例组装而成。</li>\\n<li>调用解释操作。</li>\\n</ul>\\n</li>\\n</ul>","copyright":{"author":"乌龙茶","license":"MIT"},"autoDesc":true}');export{e as data};
